{"version":3,"file":"avatar.js","sourceRoot":"","sources":["../../../../src/components/navigation/avatar/avatar.tsx"],"names":[],"mappings":"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","sourcesContent":["import {classNames} from '../../../utils/classnames.js';\nimport {CSSProperties, ReactNode, RefAttributes} from 'react';\nimport {Size} from '../../../constants/size.js';\nimport {Label, LabelProps} from '../../text/index.js';\nimport {Tooltip, TooltipTrigger, TooltipType} from '../../feedback/index.js';\nimport {TriggerElement} from '../../action/index.js';\nimport {FocusRing} from 'react-aria';\nimport {Icon, IconName, iconNames, IconSize} from '../../media/index.js';\n\ntype AvatarSize = Size.xs | Size.sm | Size.md | Size.lg;\n\nexport interface AvatarProps extends RefAttributes<HTMLDivElement> {\n    /**\n     * Textual replacement for the image. Required for accessibility.\n     */\n    alt: string;\n    /**\n     * CSS class for the element.\n     */\n    className?: string;\n    /**\n     * Description to show below label.\n     */\n    description?: string;\n    /**\n     * Icon to show as avatar when image src or text is not provided.\n     */\n    iconName?: IconName;\n    /**\n     * Whether element is disabled.\n     */\n    isDisabled?: boolean;\n    /**\n     * Whether avatar is navigable with keyboard.\n     */\n    isInteractive?: boolean;\n    /**\n     * Label to display next to the image.\n     */\n    label?: ReactNode;\n    /**\n     * Max width label container can take.\n     */\n    labelMaxWidth?: CSSProperties['maxWidth'];\n    /**\n     * Handler that is called when avatar is pressed.\n     */\n    onPress?: () => void;\n    /**\n     * Size of the Avatar\n     */\n    size?: AvatarSize;\n    /**\n     * Path to the image to show as avatar.\n     */\n    src?: string;\n    /**\n     * CSS styles for the element.\n     */\n    style?: CSSProperties;\n    /**\n     * Text to show as avatar when image src is not provided, f.e. user initials.\n     */\n    text?: string;\n}\n\nconst labelSize: Record<AvatarSize, LabelProps['size']> = {\n    [Size.xs]: Size.sm,\n    [Size.sm]: Size.md,\n    [Size.md]: Size.lg,\n    [Size.lg]: Size.lg\n};\nconst descriptionSize: Record<AvatarSize, LabelProps['size']> = {\n    [Size.xs]: Size.xs,\n    [Size.sm]: Size.xs,\n    [Size.md]: Size.sm,\n    [Size.lg]: Size.sm\n};\nconst iconSize: Record<AvatarSize, IconSize> = {\n    [Size.xs]: IconSize.XS,\n    [Size.sm]: IconSize.SM,\n    [Size.md]: IconSize.MD,\n    [Size.lg]: IconSize.LG\n};\n\nexport function Avatar(props: AvatarProps) {\n    const {\n        alt,\n        className,\n        description,\n        iconName = iconNames.GhostFilled,\n        isDisabled,\n        isInteractive,\n        label,\n        labelMaxWidth,\n        onPress,\n        ref,\n        size = Size.md,\n        src,\n        style,\n        text\n    } = props;\n    const hasImage = !!src;\n    let image: ReactNode;\n\n    if (hasImage) {\n        image = <img alt={alt} className=\"avatar__image\" src={src} title={alt} />;\n    } else if (text) {\n        image = (\n            <span className=\"avatar__image\" title={alt}>\n                {text}\n            </span>\n        );\n    } else {\n        image = (\n            <span className=\"avatar__image\" title={alt}>\n                <Icon className=\"avatar__icon\" name={iconName} size={iconSize[size]} />\n            </span>\n        );\n    }\n\n    if (isInteractive && !isDisabled) {\n        image = (\n            <TooltipTrigger>\n                <FocusRing focusRingClass=\"avatar__trigger-element--focused\">\n                    <TriggerElement\n                        className=\"avatar__trigger-element\"\n                        onPress={onPress}\n                        role={onPress ? 'button' : undefined}>\n                        {image}\n                        {<span className=\"avatar__scrim\" />}\n                    </TriggerElement>\n                </FocusRing>\n                <Tooltip type={TooltipType.Plain}>{alt}</Tooltip>\n            </TooltipTrigger>\n        );\n    }\n\n    return (\n        <div\n            className={classNames(`avatar avatar--${size}`, className, {\n                'avatar--disabled': isDisabled,\n                'avatar--interactive': isInteractive,\n                'avatar--pressable': !!onPress\n            })}\n            ref={ref}\n            style={style}>\n            {image}\n            {(!!label || !!description) && (\n                <div className=\"avatar__label-wrapper\" style={{maxWidth: labelMaxWidth}}>\n                    {label && (\n                        <Label className=\"avatar__label\" size={labelSize[size]}>\n                            {label}\n                        </Label>\n                    )}\n                    {description && (\n                        <Label className=\"avatar__description\" size={descriptionSize[size]}>\n                            {description}\n                        </Label>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n}\n"]}