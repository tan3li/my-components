{"version":3,"file":"tag.js","sourceRoot":"","sources":["../../../../src/components/navigation/tag/tag.tsx"],"names":[],"mappings":"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","sourcesContent":["import {AriaRole, ReactNode, RefAttributes, useRef} from 'react';\nimport {Icon, IconName, iconNames, IconSize} from '../../media/index.js';\nimport {classNames} from '../../../utils/classnames.js';\nimport {Size} from '../../../constants/index.js';\nimport {Label} from '../../text/index.js';\nimport {ButtonStyle, ButtonVariant, IconButton, IconButtonProps, TriggerElement} from '../../action/index.js';\nimport {useTranslateCommon} from '../../../hooks/translations/usetranslatecommon.js';\nimport {Tooltip, TooltipTrigger, TooltipType} from '../../feedback/index.js';\nimport {useIsTextTruncated} from '../../../hooks/useistexttruncated.js';\nimport {isString} from '../../../utils/stringhelper.js';\n\nexport const enum TagStyle {\n    Fill = 'fill',\n    Outline = 'outline'\n}\n\nexport interface TagProps extends RefAttributes<HTMLSpanElement> {\n    /**\n     * Tag content.\n     */\n    children: ReactNode;\n    /**\n     * CSS class for the element.\n     */\n    className?: string;\n    /**\n     * Icon for the content.\n     */\n    iconName?: IconName;\n    /**\n     * Whether tag is disabled.\n     */\n    isDisabled?: boolean;\n    /**\n     * Content press callback. Makes the element interactive.\n     */\n    onPress?: () => void;\n    /**\n     * Remove callback. If given, remove button will be displayed with this handler attached to it.\n     */\n    onRemove?: () => void;\n    /**\n     * Props for remove button. If contains onPress, it will override given onRemove callback.\n     */\n    removeButtonProps?: Partial<IconButtonProps>;\n    /**\n     * The ARIA role of the element.\n     */\n    role?: AriaRole;\n    /**\n     * Size of the element.\n     */\n    size?: Size.md | Size.sm | Size.xs;\n    /**\n     * Style of the Tag.\n     */\n    style?: TagStyle;\n    /**\n     * The ARIA role of the trigger element.\n     */\n    triggerRole?: AriaRole;\n}\n\nexport function Tag({\n    children,\n    className,\n    iconName,\n    isDisabled,\n    onPress,\n    onRemove,\n    ref,\n    removeButtonProps,\n    role,\n    size = Size.md,\n    style = TagStyle.Outline,\n    triggerRole\n}: TagProps) {\n    const labelRef = useRef<HTMLSpanElement>(null);\n    const isTruncated = useIsTextTruncated({ref: labelRef});\n    const translateCommon = useTranslateCommon();\n    const isPressable = !!onPress && !isDisabled;\n    const isInteractive = isTruncated || isPressable;\n\n    return (\n        <span\n            className={classNames(`tag tag--${size} ${style}-tag`, className, {\n                'tag--interactive': isInteractive,\n                'tag--pressable': isPressable,\n                'tag--disabled': isDisabled\n            })}\n            ref={ref}\n            role={role}>\n            <TooltipTrigger isDisabled={!isTruncated}>\n                <TriggerElement\n                    className=\"tag__content\"\n                    excludeFromTabOrder={!isInteractive}\n                    onPress={onPress}\n                    role={triggerRole}>\n                    {iconName && <Icon className=\"tag__icon\" name={iconName} size={IconSize.SM} />}\n                    <Label className=\"tag__label\" ref={labelRef} size={size === Size.xs ? Size.sm : size}>\n                        {children}\n                    </Label>\n                </TriggerElement>\n                <Tooltip type={TooltipType.Plain}>{children}</Tooltip>\n            </TooltipTrigger>\n            {onRemove && (\n                <IconButton\n                    aria-label={`${isString(children) ? children : ''} ${translateCommon('remove')}`}\n                    className=\"tag__remove-button\"\n                    iconName={iconNames.Close}\n                    isDisabled={isDisabled}\n                    onPress={onRemove}\n                    size={size === Size.xs ? Size.sm : size}\n                    style={ButtonStyle.Plain}\n                    variant={ButtonVariant.Neutral}\n                    {...removeButtonProps}\n                />\n            )}\n        </span>\n    );\n}\n"]}