{"version":3,"file":"steps.js","sourceRoot":"","sources":["../../../../src/components/navigation/steps/steps.tsx"],"names":[],"mappings":";;AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,8BAA8B,CAAC;AACxD,OAAO,EAAC,WAAW,EAAC,MAAM,mCAAmC,CAAC;AAC9D,OAAO,EAAC,QAAQ,EAAE,YAAY,EAA8B,MAAM,OAAO,CAAC;AAE1E,OAAO,EAAC,SAAS,EAAC,MAAM,iCAAiC,CAAC;AAyB1D,MAAM,UAAU,KAAK,CAAC,EAOT;QANT,UAAU,gBAAA,EACV,SAAS,eAAA,EACT,QAAQ,cAAA,EACR,mBAAoC,EAApC,WAAW,mBAAG,WAAW,CAAC,UAAU,KAAA,EACpC,GAAG,SAAA,EACH,qBAA+B,EAA/B,aAAa,mBAAG,SAAS,CAAC,KAAK,KAAA;IAE/B,IAAM,cAAc,GAAG,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,UAAC,KAAK,EAAE,KAAK;QACvD,OAAA,YAAY,CAAC,KAAK,EAAE;YAChB,SAAS,EAAE,WAAW,KAAK,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK;YACnF,KAAK,OAAA;YACL,QAAQ,EAAE,UAAU,KAAK,KAAK;YAC9B,WAAW,aAAA;YACX,aAAa,EAAE,KAAK,KAAK,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,aAAa;SACvF,CAAC;IANF,CAME,CACL,CAAC;IAEF,OAAO,CACH,uBAAK,SAAS,EAAE,UAAU,CAAC,uBAAgB,WAAW,CAAE,EAAE,SAAS,CAAC,EAAE,GAAG,EAAE,GAAG,gBACzE,cAAc,IACb,CACT,CAAC;AACN,CAAC","sourcesContent":["import {classNames} from '../../../utils/classnames.js';\nimport {Orientation} from '../../../constants/orientation.js';\nimport {Children, cloneElement, ReactElement, RefAttributes} from 'react';\nimport {StepItemProps} from './stepitem.js';\nimport {Alignment} from '../../../constants/alignment.js';\n\nexport interface StepsProps extends RefAttributes<HTMLDivElement> {\n    /**\n     * Index of the currently selected step.\n     */\n    activeStep?: string | number;\n    /**\n     * The CSS className for the element.\n     */\n    className?: string;\n    /**\n     * The children of the component.\n     */\n    children: Array<ReactElement<StepItemProps>>;\n    /**\n     * The orientation of the element.\n     */\n    orientation?: Orientation;\n    /**\n     * Alignment of the step item content.\n     */\n    stepAlignment?: Alignment.start | Alignment.center;\n}\n\nexport function Steps({\n    activeStep,\n    className,\n    children,\n    orientation = Orientation.horizontal,\n    ref,\n    stepAlignment = Alignment.start\n}: StepsProps) {\n    const mappedChildren = Children.map(children, (child, index) =>\n        cloneElement(child, {\n            alignment: orientation === Orientation.horizontal ? stepAlignment : Alignment.start,\n            index,\n            isActive: activeStep === index,\n            orientation,\n            progressValue: index === children.length - 1 ? undefined : child.props.progressValue\n        })\n    );\n\n    return (\n        <div className={classNames(`steps steps--${orientation}`, className)} ref={ref}>\n            {mappedChildren}\n        </div>\n    );\n}\n"]}