{"version":3,"file":"sidenav.js","sourceRoot":"","sources":["../../../../src/components/navigation/sidenav/sidenav.tsx"],"names":[],"mappings":"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","sourcesContent":["import {classNames} from '../../../utils/classnames.js';\nimport {ReactNode, RefAttributes, useEffect, useId, useMemo, useState} from 'react';\nimport {Key} from 'react-aria-components';\nimport {IconButton} from '../../action/iconbutton/iconbutton.js';\nimport {iconNames} from '../../media/icon/icons.js';\nimport {useTranslateCommon} from '../../../hooks/translations/usetranslatecommon.js';\nimport {ButtonStyle} from '../../action/button/button.js';\nimport {ButtonVariant} from '../../action/constants/buttonvariant.js';\nimport {Size} from '../../../constants/size.js';\nimport {SideNavItem} from './sidenavitem.js';\nimport {NavItem, NavItemType} from './navitem.js';\nimport {isFunction, safeCall} from '../../../utils/functionhelper.js';\nimport {TooltipTrigger} from '../../feedback/tooltip/tooltiptrigger.js';\nimport {Tooltip, TooltipType} from '../../feedback/tooltip/tooltip.js';\nimport {Alignment} from '../../../constants/alignment.js';\nimport {Divider} from '../../datadisplay/divider/divider.js';\nimport {Position} from '../../../constants/position.js';\nimport {getInvertedIconName} from '../../../utils/getinvertediconname';\nimport {NavItemBadge} from './navitembadge.js';\n\nexport const enum SideNavMode {\n    Default = 'default',\n    Inverted = 'inverted'\n}\n\nexport interface SideNavProps extends RefAttributes<HTMLDivElement> {\n    ['aria-label']: string;\n    /**\n     * Whether the side nav can be collapsed. Items should have icon when this is set to true.\n     */\n    canShrink?: boolean;\n    /**\n     * Set of expanded item keys.\n     */\n    expandedKeys?: Set<Key>;\n    /**\n     * The header of the side nav.\n     */\n    header?: ReactNode | ((isExpanded: boolean) => ReactNode);\n    /**\n     * Whether the side nav is expanded.\n     */\n    isExpanded?: boolean;\n    /**\n     * The items to display in the side nav.\n     */\n    items: SideNavItem[];\n    /**\n     * The mode of the side nav.\n     */\n    mode?: SideNavMode;\n    /**\n     * Handler that is called when items are expanded or collapsed.\n     */\n    onExpandedKeysChange?: (keys: Set<Key>) => void;\n    /**\n     * Callback that is called when the side nav is toggled.\n     */\n    toggleCallback?: (isExpanded: boolean) => void;\n}\n\nfunction containsExpandableItems(items: SideNavItem[]) {\n    for (let i = 0, len = items.length; i < len; i++) {\n        const item = items[i];\n        const {items: subItems, isHeading} = item;\n\n        if (subItems && (!isHeading || (isHeading && containsExpandableItems(subItems)))) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function SideNav({\n    canShrink = true,\n    expandedKeys: propsExpandedKeys,\n    header,\n    isExpanded = true,\n    items,\n    mode = SideNavMode.Default,\n    onExpandedKeysChange,\n    ref,\n    toggleCallback,\n    ...props\n}: SideNavProps) {\n    const domIdPrefix = useId();\n    const [isSideNavExpanded, setIsSideNavExpanded] = useState(canShrink ? isExpanded : true);\n    const translateCommon = useTranslateCommon();\n    const [expandedKeys, setExpandedKeys] = useState<Set<Key>>(propsExpandedKeys ?? new Set());\n    const toggleItems = () => {\n        setIsSideNavExpanded(!isSideNavExpanded);\n        safeCall(toggleCallback, !isSideNavExpanded);\n    };\n    const getDomId = (id: Key) => `${domIdPrefix}${id}`;\n    const hasExpandableItems = useMemo(() => containsExpandableItems(items), [items]);\n\n    const isItemOrChildrenActive = (sideNavItem: SideNavItem) => {\n        if (sideNavItem.isActive) {\n            return true;\n        }\n        const sideNavItemChildren = sideNavItem.items;\n\n        if (sideNavItemChildren) {\n            for (let i = 0, len = sideNavItemChildren.length; i < len; i++) {\n                if (isItemOrChildrenActive(sideNavItemChildren[i])) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    };\n\n    const renderItem = (item: SideNavItem, level: number) => {\n        const {onPress, id, isHeading, badge, label, icon} = item;\n        const hasChildren = !!item.items;\n        const showExpanderPlaceholder = hasExpandableItems && !hasChildren && !!badge;\n        const isItemExpanded = expandedKeys.has(id);\n        let type: NavItemType | undefined;\n\n        if (isHeading) {\n            type = NavItemType.GroupHeading;\n        } else if (level === 0) {\n            type = NavItemType.Main;\n        } else {\n            type = NavItemType.Indented;\n        }\n\n        if (!isSideNavExpanded && (isHeading || level > 0)) {\n            return null;\n        }\n\n        // Showing the upper level item as active if any of its children is active. Currently, cannot open sub levels\n        // when displaying only IconButtons.\n        const isActive = isItemOrChildrenActive(item);\n\n        if (isSideNavExpanded) {\n            return (\n                <NavItem\n                    domId={isHeading ? getDomId(id) : undefined}\n                    inverted={mode === SideNavMode.Inverted}\n                    isActive={isActive}\n                    isExpanded={isItemExpanded}\n                    item={item}\n                    level={level}\n                    showExpanderPlaceholder={showExpanderPlaceholder}\n                    type={type}\n                />\n            );\n        }\n\n        return (\n            <TooltipTrigger>\n                <div className=\"side-nav__icon-button-wrapper\">\n                    <IconButton\n                        aria-current={isActive ? 'page' : undefined}\n                        aria-label={label}\n                        className=\"side-nav__icon-button\"\n                        iconName={getInvertedIconName(icon, isActive)!}\n                        inverted={mode === SideNavMode.Inverted}\n                        onPress={() => onPress?.(id)}\n                        size={Size.sm}\n                        style={isActive ? ButtonStyle.Fill : ButtonStyle.Plain}\n                        variant={isActive ? ButtonVariant.Accent : ButtonVariant.Neutral}\n                    />\n                    {badge && <NavItemBadge {...badge} />}\n                </div>\n                <Tooltip position={Position.Right} type={TooltipType.Plain}>\n                    {label}\n                </Tooltip>\n            </TooltipTrigger>\n        );\n    };\n\n    const expandCallback = (id: Key) => {\n        const newExpandedKeys = new Set(expandedKeys);\n\n        if (expandedKeys.has(id)) {\n            newExpandedKeys.delete(id);\n        } else {\n            newExpandedKeys.add(id);\n        }\n\n        setExpandedKeys(newExpandedKeys);\n        onExpandedKeysChange?.(newExpandedKeys);\n    };\n\n    const renderItems = (itemArr: SideNavItem[], level: number) => {\n        const itemNodes: ReactNode[] = [];\n\n        for (let i = 0, len = itemArr.length; i < len; i++) {\n            const item = itemArr[i];\n            const subItems = item.items;\n            const itemToRender = {\n                ...item,\n                onPress: isSideNavExpanded && subItems ? expandCallback : item.onPress\n            };\n\n            if (subItems) {\n                if (item.isHeading) {\n                    itemNodes.push(\n                        <li className=\"side-nav__nav-list-item\" key={item.id}>\n                            {renderItem(item, level)}\n                            <ul\n                                aria-labelledby={getDomId(item.id)}\n                                className=\"side-nav__nav-list side-nav__nav-section\">\n                                {renderItems(subItems, level)}\n                            </ul>\n                        </li>\n                    );\n                } else {\n                    itemNodes.push(\n                        <li className=\"side-nav__nav-list-item\" key={item.id}>\n                            {renderItem(itemToRender, level)}\n                            {expandedKeys.has(item.id) && (\n                                <ul className=\"side-nav__nav-list side-nav__sub-nav-list\">\n                                    {renderItems(subItems, level + 1)}\n                                </ul>\n                            )}\n                        </li>\n                    );\n                }\n            } else {\n                itemNodes.push(\n                    <li className=\"side-nav__nav-list-item\" key={item.id}>\n                        {renderItem(item, level)}\n                    </li>\n                );\n            }\n        }\n\n        return itemNodes;\n    };\n\n    useEffect(() => {\n        setExpandedKeys(propsExpandedKeys ?? new Set());\n    }, [propsExpandedKeys]);\n\n    useEffect(() => {\n        setIsSideNavExpanded(canShrink ? isExpanded : true);\n    }, [isExpanded]);\n\n    return (\n        <div\n            className={classNames(`side-nav side-nav--mode-${mode}`, {'side-nav--expanded': isSideNavExpanded})}\n            ref={ref}>\n            {(canShrink || header) && (\n                <div className=\"side-nav__header\">\n                    {isFunction(header) ? header(isSideNavExpanded) : header}\n                    {canShrink && (\n                        <IconButton\n                            aria-expanded={isSideNavExpanded}\n                            aria-label={translateCommon(isSideNavExpanded ? 'collapse' : 'expand')}\n                            className=\"side-nav__toggle\"\n                            iconName={iconNames.Menu}\n                            inverted={mode === SideNavMode.Inverted}\n                            onPress={toggleItems}\n                            size={isSideNavExpanded ? Size.md : Size.sm}\n                            style={ButtonStyle.Plain}\n                            variant={ButtonVariant.Neutral}\n                        />\n                    )}\n                    <Divider alignment={Alignment.center} className=\"side-nav__divider\" size={Size.sm} />\n                </div>\n            )}\n            <nav aria-label={props['aria-label']} className=\"side-nav__content\">\n                <ul className=\"side-nav__nav-list\">{renderItems(items, 0)}</ul>\n            </nav>\n        </div>\n    );\n}\n"]}