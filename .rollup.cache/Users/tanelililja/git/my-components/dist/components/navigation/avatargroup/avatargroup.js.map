{"version":3,"file":"avatargroup.js","sourceRoot":"","sources":["../../../../src/components/navigation/avatargroup/avatargroup.tsx"],"names":[],"mappings":"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","sourcesContent":["import {AvatarProps} from '../avatar/index.js';\nimport {Children, cloneElement, ReactElement, ReactNode, RefAttributes} from 'react';\nimport {classNames} from '../../../utils/classnames.js';\nimport {Menu, MenuItem} from '../../action/index.js';\nimport {Label} from '../../text/index.js';\nimport {Size} from '../../../constants/index.js';\nimport {Button} from 'react-aria-components';\n\nexport const enum AvatarGroupLayout {\n    Grid = 'grid',\n    Stack = 'stack'\n}\n\nexport interface AvatarGroupProps extends RefAttributes<HTMLDivElement> {\n    /**\n     * Avatar element or list of Avatar elements.\n     */\n    children: ReactNode;\n    /**\n     * CSS class name for the element.\n     */\n    className?: string;\n    /**\n     * Avatars can be displayed with stack or grid layout.\n     */\n    layout?: AvatarGroupLayout;\n    /**\n     * Max visible avatar count. Applied only for the grid layout.\n     */\n    maxVisibleCount?: number;\n    /**\n     * Size of the avatars.\n     */\n    size?: Size.sm | Size.md | Size.lg;\n}\n\nconst STACK_MAX_VISIBLE_COUNT = 5;\nconst GRID_MAX_VISIBLE_COUNT = 10;\n\nexport function AvatarGroup({\n    children: propsChildren,\n    className,\n    layout = AvatarGroupLayout.Stack,\n    maxVisibleCount,\n    ref,\n    size\n}: AvatarGroupProps) {\n    const children = Children.toArray(propsChildren);\n    const childCount = children.length;\n    const hasStackLayout = layout === AvatarGroupLayout.Stack;\n    const maxCount = hasStackLayout ? STACK_MAX_VISIBLE_COUNT : (maxVisibleCount ?? GRID_MAX_VISIBLE_COUNT);\n    const content: ReactNode[] = children.slice(0, maxCount).map((child, i) =>\n        cloneElement(child as ReactElement<AvatarProps>, {\n            // always ignore label and description\n            description: undefined,\n            isInteractive: true,\n            label: undefined,\n            size,\n            style: hasStackLayout ? {zIndex: maxCount - i} : undefined\n        })\n    );\n\n    if (childCount > maxCount) {\n        const menuItems: MenuItem[] = children.slice(maxCount, childCount).map((child, i) => {\n            const avatarElement = child as ReactElement<AvatarProps>;\n            const item: MenuItem = {\n                id: i,\n                name: avatarElement.props.alt,\n                props: {\n                    onAction: avatarElement.props.onPress,\n                    prefix: cloneElement(avatarElement, {\n                        // always ignore label and description\n                        description: undefined,\n                        isInteractive: false,\n                        label: undefined,\n                        onPress: undefined,\n                        size: Size.xs\n                    })\n                }\n            };\n\n            return item;\n        });\n\n        content.push(\n            <Menu items={menuItems} key=\"more\">\n                <Button\n                    className={`avatar-group__more-button avatar-group__more-button--${size}`}\n                    style={hasStackLayout ? {zIndex: 0} : undefined}>\n                    <Label size={size === Size.lg ? Size.sm : Size.xs}>{`+${childCount - maxCount}`}</Label>\n                </Button>\n            </Menu>\n        );\n    }\n\n    return (\n        <div className={classNames(`avatar-group avatar-group--${layout} avatar-group--${size}`, className)} ref={ref}>\n            {content}\n        </div>\n    );\n}\n"]}