{"version":3,"file":"link.js","sourceRoot":"","sources":["../../../../src/components/navigation/link/link.tsx"],"names":[],"mappings":";;AAAA,OAAO,EACH,MAAM,IAAI,eAAe,EAEzB,IAAI,IAAI,aAAa,EAExB,MAAM,uBAAuB,CAAC;AAC/B,OAAO,EAAC,UAAU,EAAC,MAAM,8BAA8B,CAAC;AAIxD,MAAM,CAAN,IAAkB,QAIjB;AAJD,WAAkB,QAAQ;IACtB,6BAAiB,CAAA;IACjB,wDAAwD;IACxD,yBAAa,CAAA;AACjB,CAAC,EAJiB,QAAQ,KAAR,QAAQ,QAIzB;AAkCD,MAAM,UAAU,IAAI,CAAC,EAA4E;;IAA3E,IAAA,SAAS,eAAA,EAAE,SAAS,eAAA,EAAE,GAAG,SAAA,EAAE,YAAoB,EAApB,IAAI,mBAAG,QAAQ,CAAC,IAAI,KAAA,EAAE,IAAI,UAAA,EAAK,KAAK,cAAhE,iDAAiE,CAAD;IACjF,IAAM,YAAY,GAAG,UAAU,CAAC,MAAM,EAAE,SAAS,YAAG,GAAC,gBAAS,IAAI,CAAE,IAAG,IAAI,MAAE,CAAC;IAE9E,IAAI,IAAI,KAAK,QAAQ,CAAC,MAAM,EAAE;QAC1B,OAAO,CACH,KAAC,eAAe,eACR,KAAK,IACT,SAAS,EAAE,YAAY,kBACT,SAAS,EACvB,GAAG,EAAE,GAA6B,IACpC,CACL,CAAC;KACL;IAED,OAAO,CACH,KAAC,aAAa,eACN,KAAK,IACT,SAAS,EAAE,YAAY,kBACT,SAAS,EACvB,GAAG,EAAE,GAA6B,IACpC,CACL,CAAC;AACN,CAAC","sourcesContent":["import {\n    Button as ReactAriaButton,\n    ButtonProps,\n    Link as ReactAriaLink,\n    LinkProps as ReactAriaLinkProps\n} from 'react-aria-components';\nimport {classNames} from '../../../utils/classnames.js';\nimport {Size} from '../../../constants/index.js';\nimport {CSSProperties, ReactNode, Ref, RefAttributes} from 'react';\n\nexport const enum LinkRole {\n    Button = 'button',\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    Link = 'link'\n}\n\nexport interface LinkProps\n    extends Omit<ReactAriaLinkProps, 'children' | 'className' | 'style'>,\n        Omit<ButtonProps, 'children' | 'className' | 'style'>,\n        RefAttributes<HTMLAnchorElement | HTMLButtonElement> {\n    /**\n     * Children for the element.\n     */\n    children?: ReactNode;\n    /**\n     * The CSS className for the element.\n     */\n    className?: string;\n    /**\n     * Whether link has been visited by the user.\n     * Determined by browser history for href-links if not given.\n     */\n    isVisited?: boolean;\n    /**\n     * Link can act as a link or button. Default: link.\n     */\n    role?: LinkRole;\n    /**\n     * Size of the element.\n     * If not provided, style of the surrounding text is used.\n     */\n    size?: Size.sm | Size.md | Size.lg;\n    /**\n     * CSS styles for the element.\n     */\n    style?: CSSProperties;\n}\n\nexport function Link({className, isVisited, ref, role = LinkRole.Link, size, ...props}: LinkProps) {\n    const cssClassName = classNames('link', className, {[`link--${size}`]: size});\n\n    if (role === LinkRole.Button) {\n        return (\n            <ReactAriaButton\n                {...props}\n                className={cssClassName}\n                data-visited={isVisited}\n                ref={ref as Ref<HTMLButtonElement>}\n            />\n        );\n    }\n\n    return (\n        <ReactAriaLink\n            {...props}\n            className={cssClassName}\n            data-visited={isVisited}\n            ref={ref as Ref<HTMLAnchorElement>}\n        />\n    );\n}\n"]}