{"version":3,"file":"phonenumberfield.js","sourceRoot":"","sources":["../../../../src/components/inputs/phonenumberfield/phonenumberfield.tsx"],"names":[],"mappings":"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","sourcesContent":["import {TDataState} from '../../../constants/datastate.js';\nimport {Key, RefAttributes, useCallback, useMemo} from 'react';\nimport {Size} from '../../../constants/size.js';\nimport {Select} from '../select/select.js';\nimport {SelectItem} from '../select/selectitem.js';\nimport {TextField} from '../textfield/textfield.js';\nimport codes from 'country-calling-code';\n\nfunction getCountryCallingCodeItems(favoriteItems?: string[]): SelectItem[] {\n    const items: SelectItem[] = [];\n\n    for (const code of codes) {\n        const {country, countryCodes, isoCode2} = code;\n\n        for (const countryCode of countryCodes) {\n            if (items.findIndex((item) => item.value === `${isoCode2}|+${countryCode}`) === -1) {\n                items.push({\n                    text: `${country} +${countryCode}`,\n                    value: `${isoCode2}|+${countryCode}`\n                });\n            }\n        }\n    }\n\n    if (!favoriteItems) {\n        return items;\n    }\n    const favoriteItemsArr: SelectItem[] = [];\n\n    for (const favoriteItem of favoriteItems) {\n        for (let i = 0; i < items.length; i++) {\n            const item = items[i];\n            const itemValue = item.value as string;\n\n            if (itemValue.split('|')[0].startsWith(favoriteItem)) {\n                favoriteItemsArr.push(item);\n                items.splice(i, 1);\n                break;\n            }\n        }\n    }\n\n    return favoriteItemsArr.concat(items);\n}\n\nexport interface PhoneNumberFieldProps extends RefAttributes<HTMLDivElement> {\n    /**\n     * Handler that is called with object containing selection state value and changeParams when the element's\n     * selection state changes.\n     */\n    changeCallback: (args: {[key: string]: any; value: string}) => void;\n    /**\n     * Object which is provided with element's selection state value property in changeCallback.\n     */\n    changeParams?: {[key: string]: unknown};\n    /**\n     * Map that contains model property states with messages.\n     */\n    dataState?: Map<TDataState, string> | null;\n    /**\n     * Array of favorite country codes in ISO CODE2 format.\n     */\n    favoriteCountryCodes?: string[];\n    /**\n     * Whether the field is disabled.\n     */\n    isDisabled?: boolean;\n    /**\n     * Whether the field is read only.\n     */\n    isReadOnly?: boolean;\n    /**\n     * Whether the field is required.\n     */\n    isRequired?: boolean;\n    /**\n     * Whether to show skeleton instead of an actual element.\n     */\n    isSkeleton?: boolean;\n    /**\n     * Label of the phone number TextField.\n     */\n    label: string;\n    /**\n     * Placeholder text when there's no value.\n     */\n    placeholder?: string;\n    /**\n     * Label of the prefix Select.\n     */\n    prefixLabel: string;\n    /**\n     * Value of the phone number containing prefix (country calling code) and phone number.\n     */\n    value?: string;\n}\n\nexport function PhoneNumberField({\n    changeCallback,\n    changeParams = {},\n    dataState,\n    favoriteCountryCodes,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    isSkeleton,\n    label,\n    prefixLabel,\n    ref,\n    value = ''\n}: PhoneNumberFieldProps) {\n    const items = useMemo(() => getCountryCallingCodeItems(favoriteCountryCodes), [favoriteCountryCodes]);\n    const {prefix, text, phoneNumberValue, val} = useMemo(() => {\n        let pref = '',\n            selectText = '',\n            selectValue = '',\n            phoneNumberVal = value;\n\n        for (const item of items) {\n            const itemValue = item.value as string;\n            const countryCallingCode = itemValue.split('|')[1];\n\n            if (value.startsWith(countryCallingCode)) {\n                selectValue = itemValue;\n                pref = countryCallingCode;\n                selectText = item.text;\n                phoneNumberVal = value.slice(countryCallingCode.length);\n                break;\n            }\n        }\n\n        return {prefix: pref, text: selectText, phoneNumberValue: phoneNumberVal, val: selectValue};\n    }, [items, value]);\n    const onPrefixChange = useCallback(\n        (changedValue: Key | null) => {\n            changeCallback({\n                ...changeParams,\n                value: `${(changedValue as string).split('|')[1]}${phoneNumberValue}`\n            });\n        },\n        [changeParams, phoneNumberValue]\n    );\n    const onPhoneNumberChange = useCallback(\n        (args: {value: string}) => {\n            changeCallback({\n                ...args,\n                value: prefix + args.value\n            });\n        },\n        [prefix]\n    );\n\n    return (\n        <div className=\"phone-number-field\" ref={ref}>\n            <Select\n                dataState={dataState}\n                isDisabled={isDisabled}\n                isReadOnly={isReadOnly}\n                isRequired={isRequired}\n                isSkeleton={isSkeleton}\n                items={items}\n                label={prefixLabel}\n                onSelectionChange={onPrefixChange}\n                text={text}\n                value={val}\n            />\n            <TextField\n                changeCallback={onPhoneNumberChange}\n                changeParams={changeParams}\n                dataState={dataState}\n                isDisabled={isDisabled}\n                isReadOnly={isReadOnly}\n                isRequired={isRequired}\n                isSkeleton={isSkeleton}\n                label={label}\n                size={Size.md}\n                type=\"tel\"\n                value={phoneNumberValue}\n            />\n        </div>\n    );\n}\n"]}