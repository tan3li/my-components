{"version":3,"file":"slider.js","sourceRoot":"","sources":["../../../../src/components/inputs/slider/slider.tsx"],"names":[],"mappings":";;AAAA,OAAO,EACH,MAAM,IAAI,eAAe,EACzB,YAAY,EAGZ,WAAW,EACX,WAAW,EACd,MAAM,uBAAuB,CAAC;AAC/B,OAAO,EAAC,SAAS,EAAC,MAAM,iCAAiC,CAAC;AAC1D,OAAO,EAAC,QAAQ,EAAC,MAAM,gCAAgC,CAAC;AACxD,OAAO,EAAC,IAAI,EAAC,MAAM,4BAA4B,CAAC;AAChD,OAAO,EAAC,QAAQ,EAAE,eAAe,EAAC,MAAM,iCAAiC,CAAC;AAC1E,OAAO,EAAC,KAAK,EAAC,MAAM,2BAA2B,CAAC;AAChD,OAAO,EAAC,SAAS,EAAC,MAAM,2BAA2B,CAAC;AACpD,OAAO,EAA0D,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAC,MAAM,OAAO,CAAC;AAC3G,OAAO,EAAC,QAAQ,EAAC,MAAM,kCAAkC,CAAC;AAC1D,OAAO,EAAC,OAAO,EAAE,WAAW,EAAC,MAAM,mCAAmC,CAAC;AACvE,OAAO,EAAC,cAAc,EAAC,MAAM,0CAA0C,CAAC;AACxE,OAAO,EAAwB,uBAAuB,EAAC,MAAM,2CAA2C,CAAC;AACzG,OAAO,EAAC,UAAU,EAAC,MAAM,8BAA8B,CAAC;AACxD,OAAO,EAAC,OAAO,EAAC,MAAM,gCAAgC,CAAC;AAEvD,OAAO,EAAC,gBAAgB,EAAC,MAAM,wCAAwC,CAAC;AACxE,OAAO,EAAC,sBAAsB,EAAC,MAAM,6BAA6B,CAAC;AACnE,OAAO,EAAC,SAAS,EAAC,MAAM,6BAA6B,CAAC;AACtD,OAAO,EAAC,KAAK,EAAC,MAAM,YAAY,CAAC;AACjC,OAAO,EAAC,aAAa,EAAC,MAAM,0CAA0C,CAAC;AAEvE,IAAM,iBAAiB,GAAG,GAAG,CAAC;AAC9B,IAAM,oBAAoB,GAAG,EAAE,CAAC;AAChC,IAAM,iBAAiB,GAAG,CAAC,CAAC;AAC5B,IAAM,wBAAwB,GAAG,EAAE,CAAC;AA+EpC,MAAM,UAAU,MAAM,CAAsB,EAqB3B;IApBb,IAAA,cAAc,oBAAA,EACd,YAAY,kBAAA,EACZ,SAAS,eAAA,EACT,QAAQ,cAAA,EACR,UAAU,gBAAA,EACV,UAAU,gBAAA,EACV,KAAK,WAAA,EACL,qBAA4B,EAA5B,aAAa,mBAAG,QAAQ,CAAC,GAAG,KAAA,EAC5B,gBAA4B,EAA5B,QAAQ,mBAAG,iBAAiB,KAAA,EAC5B,mBAAkC,EAAlC,WAAW,mBAAG,oBAAoB,KAAA,EAClC,gBAA4B,EAA5B,QAAQ,mBAAG,iBAAiB,KAAA,EAC5B,QAAQ,cAAA,EACR,QAAQ,cAAA,EACR,gBAAgB,sBAAA,EAChB,mBAAmB,yBAAA,EACnB,uBAA8B,EAA9B,eAAe,mBAAG,QAAQ,CAAC,GAAG,KAAA,EAC9B,KAAK,WAAA,EACL,wBAA+C,EAA/C,gBAAgB,mBAAG,sBAAsB,CAAC,KAAK,KAAA,EAC/C,2BAA8C,EAA9C,mBAAmB,mBAAG,wBAAwB,KAAA,EAC3C,KAAK,cApBgC,kSAqB3C,CADW;IAEF,IAAA,KAAoE,QAAQ,CAAC;QAC/E,YAAY,EAAE,CAAC,CAAC;QAChB,YAAY,EAAE,EAAE;KACnB,CAAC,EAHK,6BAA6B,QAAA,EAAE,gCAAgC,QAGpE,CAAC;IAEG,IAAA,KAAgD,QAAQ,CAAC,KAAK,CAAC,EAA9D,mBAAmB,QAAA,EAAE,sBAAsB,QAAmB,CAAC;IAChE,IAAA,KAA8D,QAAQ,CAAC,KAAK,CAAC,EAA5E,0BAA0B,QAAA,EAAE,6BAA6B,QAAmB,CAAC;IAC9E,IAAA,KAAgC,QAAQ,CAAC,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,CAAC,CAAC,EAAnD,WAAW,QAAA,EAAE,cAAc,QAAwB,CAAC;IAE3D,IAAM,cAAc,GAAG,uBAAuB,CAA+B,YAAY,EAAE,cAAc,CAAC,CAAC;IAC3G,IAAM,WAAW,GAAG,KAAK,CAAC,KAAK,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;IAE7D,IAAM,mBAAmB,GAAG,MAAM,CAAiB,IAAI,CAAC,CAAC;IACzD,IAAM,kBAAkB,GAAG,MAAM,CAAiB,IAAI,CAAC,CAAC;IACxD,IAAM,cAAc,GAAG,MAAM,CAAiB,IAAI,CAAC,CAAC;IAEpD,IAAM,aAAa,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;IAC3C,IAAM,aAAa,GACf,gBAAgB,KAAK,sBAAsB,CAAC,SAAS;QACrD,CAAC,aAAa,KAAK,QAAQ,CAAC,IAAI,IAAI,gBAAgB,KAAK,sBAAsB,CAAC,KAAK,CAAC,CAAC;IAE3F,SAAS,CAAC;QACN,cAAc,CAAC,KAAK,CAAC,CAAC;IAC1B,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IAEZ,IAAM,kCAAkC,GAAG;QACvC,gCAAgC,CAAC;YAC7B,YAAY,EAAE,CAAC,CAAC;YAChB,YAAY,EAAE,EAAE;SACnB,CAAC,CAAC;IACP,CAAC,CAAC;IAEF,IAAM,wBAAwB,GAAG,UAAC,UAAkB;QAChD,mEAAmE;QACnE,OAAA,IAAI,CAAC,GAAG,CAAC,QAAS,EAAE,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,GAAG,WAAW,CAAC,CAAC;IAAjE,CAAiE,CAAC;IAEtE,IAAM,uBAAuB,GAAG,UAAC,UAAkB;QAC/C,kEAAkE;QAClE,OAAA,IAAI,CAAC,GAAG,CAAC,QAAS,EAAE,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,GAAG,WAAW,CAAC,CAAC;IAAjE,CAAiE,CAAC;IAEtE,IAAM,qBAAqB,GAAG,UAAC,MAAwB,EAAE,YAAoB;QACzE,IAAM,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QAEvC,IAAI,QAAQ,IAAI,WAAW,EAAE;YACzB,OAAO,MAAM,CAAC;SACjB;QAED,IAAI,YAAY,KAAK,CAAC,EAAE;YACpB,IAAM,UAAU,GAAG,uBAAuB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YAEtD,OAAO,CAAC,UAAU,EAAE,UAAU,GAAG,WAAW,CAAC,CAAC;SACjD;QAED,IAAM,WAAW,GAAG,wBAAwB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAExD,OAAO,CAAC,WAAW,GAAG,WAAW,EAAE,WAAW,CAAC,CAAC;IACpD,CAAC,CAAC;IAEF,IAAM,wBAAwB,GAAG,UAAC,QAAmC,EAAE,WAAqB;QACxF,cAAc,CAAC,QAAQ,CAAC,CAAC;QACzB,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAE7B,IAAI,WAAW,EAAE;YACb,WAAW,CAAC,QAAQ,CAAC,CAAC;SACzB;IACL,CAAC,CAAC;IAEF,IAAM,wBAAwB,GAAG,UAAC,QAAmC;;QACjE,IAAI,GAAG,GAAG,QAAQ,CAAC;QAEnB,IAAM,wBAAwB,GAAG,MAAA,kBAAkB,CAAC,OAAO,0CAAE,YAAY,CAAC,cAAc,CAAC,CAAC;QAC1F,IAAM,yBAAyB,GAAG,MAAA,mBAAmB,CAAC,OAAO,0CAAE,YAAY,CAAC,cAAc,CAAC,CAAC;QAE5F,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,wBAAwB,IAAI,yBAAyB,CAAC,EAAE;YAC9E,IAAM,UAAU,GAAqB,aAAa,CAAC,CAAC,mBAAK,WAAW,QAAE,CAAC,CAAC,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;YACnG,IAAM,iBAAiB,GAAG,wBAAwB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAE3D,UAAU,CAAC,iBAAiB,CAAC,GAAG,QAAQ,CAAC,iBAAiB,CAAC,CAAC;YAE5D,GAAG,GAAG,qBAAqB,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC;SAC9D;QAED,wBAAwB,CAAC,GAAG,CAAC,CAAC;IAClC,CAAC,CAAC;IAEF,IAAM,sBAAsB,GAAG,UAC3B,KAAa,EACb,UAAyC,EACzC,iBAA0B,EAC1B,WAAqB;QAErB,gCAAgC,CAAC;YAC7B,YAAY,EAAE,KAAK;YACnB,YAAY,EAAE,UAAU,CAAC,KAAK;SACjC,CAAC,CAAC;QAEH,IAAI,CAAC,iBAAiB,EAAE;YACpB,OAAO;SACV;QAED,IAAM,QAAQ,GAAG,CAAC,UAAU,CAAC,KAAK,CAAC;QAEnC,IAAI,aAAa,EAAE;YACf,IAAM,QAAQ,qBAAyB,WAAW,OAAC,CAAC;YAEpD,QAAQ,CAAC,KAAK,CAAC,GAAG,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC;YAEvG,wBAAwB,CAAC,qBAAqB,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE,WAAW,CAAC,CAAC;SACjF;aAAM;YACH,IAAM,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,QAAQ,CAAC,CAAC;YAExE,wBAAwB,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;SACzD;IACL,CAAC,CAAC;IAEF,IAAM,gBAAgB,GAAG,UAAC,KAAa,EAAE,KAAsC;QAC3E,IAAI,KAAK,CAAC,GAAG,KAAK,gBAAgB,CAAC,KAAK,EAAE;YACtC,sBAAsB,CAAC,KAAK,EAAE,EAAC,KAAK,EAAE,KAAK,CAAC,aAAa,CAAC,KAAK,EAAC,EAAE,IAAI,CAAC,CAAC;YAExE,kCAAkC,EAAE,CAAC;SACxC;IACL,CAAC,CAAC;IAEF,uEAAuE;IACvE,IAAM,mBAAmB,GAAG,UAAC,KAAkB,EAAE,KAAa;QAC1D,IAAM,kBAAkB,GAAG,KAAK,CAAC,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAEhE,OAAO;YACH,MAAM,EAAE,kBAAkB,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK;SACnE,CAAC;IACN,CAAC,CAAC;IAEF,IAAM,iCAAiC,GAAG,UAAC,KAAkB;QACzD,IAAI,QAAQ,KAAK,KAAK,EAAE;YACpB,OAAO,EAAE,CAAC;SACb;QAEM,IAAA,MAAM,GAAI,KAAK,OAAT,CAAU;QAEvB,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACnB,OAAO;gBACH,IAAI,EAAE,UAAG,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,GAAG,GAAG,MAAG;gBAC1C,KAAK,EAAE,UAAG,CAAC,KAAK,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,MAAG;aAC3F,CAAC;SACL;QAED,OAAO,EAAC,KAAK,EAAE,UAAG,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,GAAG,GAAG,MAAG,EAAC,CAAC;IACzD,CAAC,CAAC;IAEF,IAAM,aAAa,GAAG,UAAC,KAAkB;QACrC,IAAI,cAAc,GAAW,EAAE,CAAC;QAEhC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,GAAG,EAAE,KAAK;YAC5B,IAAM,GAAG,GAAG,KAAK,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;YAEzC,IAAI,KAAK,KAAK,CAAC,EAAE;gBACb,cAAc,IAAI,GAAG,CAAC;aACzB;iBAAM;gBACH,cAAc,IAAI,aAAM,GAAG,CAAE,CAAC;aACjC;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,cAAc,CAAC;IAC1B,CAAC,CAAC;IAEF,IAAM,kBAAkB,GAAG,UAAC,YAAoB,EAAE,KAAmC;QACjF,gCAAgC,CAAC;YAC7B,YAAY,cAAA;YACZ,YAAY,EAAE,KAAK,CAAC,MAAM,CAAC,KAAK;SACnC,CAAC,CAAC;IACP,CAAC,CAAC;IAEF,IAAM,gBAAgB,GAAG,UAAC,KAAkB;QACjC,IAAA,MAAM,GAAI,KAAK,OAAT,CAAU;QACvB,IAAM,UAAU,GAAG,mBAAmB,aAAnB,mBAAmB,cAAnB,mBAAmB,GAAI,EAAE,CAAC;QACtC,IAAA,YAAY,GAAkB,6BAA6B,aAA/C,EAAE,YAAY,GAAI,6BAA6B,aAAjC,CAAkC;QAEnE,OAAO,MAAM,CAAC,GAAG,CAAC,UAAC,CAAC,EAAE,KAAa,IAAK,OAAA,CACpC,KAAC,SAAS,kBACM,UAAU,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,EAC/E,cAAc,EAAE,UAAC,UAAyC;gBACtD,sBAAsB,CAAC,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;gBACtD,kCAAkC,EAAE,CAAC;YACzC,CAAC,EACD,SAAS,EAAE,UAAU,CAAC,oBAAoB,EAAE,EAAC,iCAAiC,EAAE,KAAK,KAAK,CAAC,EAAC,CAAC,EAC7F,YAAY,EAAE,IAAI,EAClB,UAAU,EAAE,UAAU,EAEtB,QAAQ,EAAE,UAAC,GAAW,IAAK,OAAA,sBAAsB,CAAC,KAAK,EAAE,EAAC,KAAK,EAAE,GAAG,EAAC,EAAE,CAAC,aAAa,CAAC,EAA3D,CAA2D,EACtF,OAAO,EAAE,UAAC,KAAiB,IAAK,OAAA,kBAAkB,CAAC,KAAK,EAAE,KAAqC,CAAC,EAAhE,CAAgE,EAChG,OAAO,EAAE,UAAC,KAAsC,IAAK,OAAA,gBAAgB,CAAC,KAAK,EAAE,KAAK,CAAC,EAA9B,CAA8B,EACnF,IAAI,EAAE,IAAI,CAAC,EAAE,EACb,KAAK,EAAE,EAAC,KAAK,EAAE,mBAAmB,EAAC,EACnC,SAAS,EAAE,SAAS,CAAC,MAAM,EAC3B,IAAI,EAAE,SAAS,CAAC,MAAM,EACtB,KAAK,EACD,YAAY,KAAK,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CACpC,KAAK,CAAC,iBAAiB,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CACvE,IAXA,KAAK,CAaZ,CACL,EAxBuC,CAwBvC,CAAC,CAAC;IACP,CAAC,CAAC;IAEF,IAAM,WAAW,GAAG;QAChB,IAAI,gBAAgB,KAAK,sBAAsB,CAAC,SAAS,EAAE;YACvD,OAAO,CACH,KAAC,YAAY,cACR,UAAC,EAA0B;wBAAzB,KAAK,WAAA;oBAAyB,OAAA,CAC7B,uBAAK,SAAS,EAAC,+BAA+B,gBAAE,gBAAgB,CAAC,KAAK,CAAC,IAAO,CACjF;gBAFgC,CAEhC,GACU,CAClB,CAAC;SACL;QAED,OAAO,CACH,KAAC,YAAY,aAAC,SAAS,EAAC,qBAAqB,gBACxC,UAAC,EAAO;oBAAN,KAAK,WAAA;gBAAM,OAAA,KAAC,KAAK,aAAC,IAAI,EAAE,IAAI,CAAC,EAAE,gBAAG,aAAa,CAAC,KAAK,CAAC,IAAS;YAApD,CAAoD,IACvD,CAClB,CAAC;IACN,CAAC,CAAC;IAEF,IAAI,UAAU,EAAE;QACZ,OAAO,CACH,KAAC,aAAa,IACV,SAAS,EAAC,iBAAiB,EAC3B,WAAW,EAAE,CAAC,CAAC,QAAQ,EACvB,QAAQ,EAAE,CAAC,CAAC,KAAK,EACjB,eAAe,EAAE,EAAE,EACnB,IAAI,EAAE,IAAI,CAAC,EAAE,GACf,CACL,CAAC;KACL;IAED,OAAO,CACH,MAAC,eAAe,eACR,KAAK,IACT,SAAS,EAAE,UAAU,CAAC,QAAQ,EAAE,SAAS,CAAC,EAC1C,UAAU,EAAE,UAAU,EACtB,QAAQ,EAAE,QAAQ,EAClB,QAAQ,EAAE,QAAQ,EAClB,QAAQ,EAAE,wBAAwB,EAClC,WAAW,EAAE,WAAW,EACxB,WAAW,EAAC,YAAY,EACxB,KAAK,EAAE,WAAW,iBACjB,aAAa,KAAK,QAAQ,CAAC,GAAG,IAAI,CAC/B,wBAAK,SAAS,EAAC,qBAAqB,iBAChC,KAAC,KAAK,aAAC,SAAS,EAAC,eAAe,EAAC,IAAI,EAAE,IAAI,CAAC,EAAE,gBAC1C,2BAAS,KAAK,GAAU,IACpB,EACP,gBAAgB,KAAK,sBAAsB,CAAC,KAAK,IAAI,WAAW,EAAE,KACjE,CACT,EACD,wBAAK,SAAS,EAAC,iBAAiB,iBAC3B,aAAa,KAAK,QAAQ,CAAC,IAAI,IAAI,CAChC,KAAC,KAAK,aAAC,SAAS,EAAC,eAAe,EAAC,IAAI,EAAE,IAAI,CAAC,EAAE,gBAC1C,2BAAS,KAAK,GAAU,IACpB,CACX,EACD,uBAAK,SAAS,EAAC,uBAAuB,gBAClC,KAAC,WAAW,aACR,SAAS,EAAC,uBAAuB,EACjC,aAAa,EAAE,sBAAsB,EACrC,GAAG,EAAE,cAAc,gBAClB,UAAC,EAAO;oCAAN,KAAK,WAAA;gCAAM,OAAA,CACV,wBAAK,SAAS,EAAC,yBAAyB,iBACpC,cAAK,SAAS,EAAC,eAAe,GAAG,EACjC,cAAK,SAAS,EAAC,oBAAoB,EAAC,KAAK,EAAE,iCAAiC,CAAC,KAAK,CAAC,GAAI,EACtF,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,UAAC,CAAC,EAAE,KAAK,IAAK,OAAA,CAC5B,MAAC,cAAc,aACX,MAAM,EACF,mBAAmB;gDACnB,0BAA0B;gDAC1B,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAC,EAAE,EAAE,CAAC,IAAK,OAAA,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,EAAxB,CAAwB,CAAC,iBAG1D,KAAC,WAAW,aACR,SAAS,EAAC,qBAAqB,EAC/B,KAAK,EAAE,KAAK,EAEZ,aAAa,EAAE,6BAA6B,EAC5C,aAAa,EAAE,6BAA6B,EAC5C,GAAG,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,mBAAmB,EAC3D,KAAK,EAAE,mBAAmB,CAAC,KAAK,EAAE,KAAK,CAAC,gBACxC,cAAK,SAAS,EAAC,kCAAkC,GAAG,KAL/C,KAAK,CAMA,EACb,gBAAgB,KAAK,sBAAsB,CAAC,OAAO,IAAI,CACpD,KAAC,OAAO,aACJ,QAAQ,EAAE,eAAe,EACzB,UAAU,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,mBAAmB,EAClE,IAAI,EAAE,WAAW,CAAC,KAAK,gBACvB,KAAC,KAAK,aAAC,IAAI,EAAE,IAAI,CAAC,EAAE,gBAChB,2BAAS,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,GAAU,IACzC,IACF,CACb,MApBI,KAAK,CAqBG,CACpB,EA7B+B,CA6B/B,CAAC,KACA,CACT;4BAnCa,CAmCb,IACS,IACZ,EACL,aAAa,IAAI,WAAW,EAAE,KAC7B,EACL,QAAQ,IAAI,CACT,KAAC,QAAQ,aAAC,QAAQ,EAAE,gBAAgB,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,gBAC3F,QAAQ,IACF,CACd,KACa,CACrB,CAAC;AACN,CAAC","sourcesContent":["import {\n    Slider as ReactAriaSlider,\n    SliderOutput,\n    SliderProps as ReactAriaSliderProps,\n    SliderRenderProps,\n    SliderThumb,\n    SliderTrack\n} from 'react-aria-components';\nimport {Alignment} from '../../../constants/alignment.js';\nimport {Position} from '../../../constants/position.js';\nimport {Size} from '../../../constants/size.js';\nimport {HelpText, HelpTextVariant} from '../../text/helptext/helptext.js';\nimport {Label} from '../../text/label/label.js';\nimport {TextField} from '../textfield/textfield.js';\nimport {CSSProperties, FocusEvent, KeyboardEvent, RefAttributes, useEffect, useRef, useState} from 'react';\nimport {safeCall} from '../../../utils/functionhelper.js';\nimport {Tooltip, TooltipType} from '../../feedback/tooltip/tooltip.js';\nimport {TooltipTrigger} from '../../feedback/tooltip/tooltiptrigger.js';\nimport {AnyObject, ChangeArgs, useChangeParamsCallback} from '../../../hooks/usechangeparamscallback.js';\nimport {classNames} from '../../../utils/classnames.js';\nimport {isArray} from '../../../utils/objecthelper.js';\nimport {SliderState} from 'react-stately';\nimport {KeyboardEventKey} from '../../../constants/keyboardeventkey.js';\nimport {SliderValueDisplayMode} from './slidervaluedisplaymode.js';\nimport {InputType} from '../../../constants/index.js';\nimport {chain} from 'react-aria';\nimport {SkeletonField} from '../../feedback/skeleton/skeletonfield.js';\n\nconst DEFAULT_MAX_VALUE = 100;\nconst DEFAULT_MIN_DISTANCE = 10;\nconst DEFAULT_MIN_VALUE = 0;\nconst DEFAULT_TEXT_FIELD_WIDTH = 60;\n\nexport interface SliderProps<P extends AnyObject>\n    extends Omit<ReactAriaSliderProps, 'defaultValue' | 'orientation'>,\n        RefAttributes<HTMLDivElement> {\n    /**\n     * Handler that is called with object containing selection state value and changeParams when the element's selection state changes.\n     */\n    changeCallback?: (args: ChangeArgs<P, number | [number, number]>) => void;\n    /**\n     * Object which is provided with element's selection state value property in changeCallback.\n     */\n    changeParams?: P;\n    /**\n     * Additional class names to be applied to the Slider\n     */\n    className?: string;\n    /**\n     * Additional help text to provide more information.\n     */\n    helpText?: string;\n    /**\n     * Whether the element is disabled.\n     */\n    isDisabled?: boolean;\n    /**\n     * Whether to show skeleton instead of an actual element.\n     */\n    isSkeleton?: boolean;\n    /**\n     * Label of the element.\n     */\n    label?: string;\n    /**\n     * Position of the label.\n     */\n    labelPosition?: Position.Top | Position.Left;\n    /**\n     * Maximum value of the slider.\n     */\n    maxValue?: number;\n    /**\n     * Minimum distance between two thumbs.\n     */\n    minDistance?: number;\n    /**\n     * Minimum value of the slider.\n     */\n    minValue?: number;\n    /**\n     * Whether to show the progress fill of the slider. Fill is visible on default.\n     */\n    showFill?: boolean;\n    /**\n     * Whether to show the help text icon.\n     */\n    showHelpTextIcon?: boolean;\n    /**\n     * Aria labels for the text fields.\n     */\n    textFieldAriaLabels?: string[];\n    /**\n     * Position of the tooltip.\n     */\n    tooltipPosition?: Position;\n    /**\n     * Value of the slider.\n     */\n    value: number | [number, number];\n    /**\n     * Value display mode.\n     */\n    valueDisplayMode?: SliderValueDisplayMode;\n    /**\n     * Width of the value text field.\n     */\n    valueTextFieldWidth?: CSSProperties['width'];\n}\n\nexport function Slider<P extends AnyObject>({\n    changeCallback,\n    changeParams,\n    className,\n    helpText,\n    isDisabled,\n    isSkeleton,\n    label,\n    labelPosition = Position.Top,\n    maxValue = DEFAULT_MAX_VALUE,\n    minDistance = DEFAULT_MIN_DISTANCE,\n    minValue = DEFAULT_MIN_VALUE,\n    onChange,\n    showFill,\n    showHelpTextIcon,\n    textFieldAriaLabels,\n    tooltipPosition = Position.Top,\n    value,\n    valueDisplayMode = SliderValueDisplayMode.Label,\n    valueTextFieldWidth = DEFAULT_TEXT_FIELD_WIDTH,\n    ...props\n}: SliderProps<P>) {\n    const [focusedTextFieldValueAndIndex, setFocusedTextFieldValueAndIndex] = useState({\n        focusedIndex: -1,\n        focusedValue: ''\n    });\n\n    const [hasSliderTrackHover, setHasSliderTrackHover] = useState(false);\n    const [hasSliderThumbHoverOrFocus, setHasSliderThumbHoverOrFocus] = useState(false);\n    const [sliderValue, setSliderValue] = useState(value ?? 0);\n\n    const changeParamsCb = useChangeParamsCallback<P, number | [number, number]>(changeParams, changeCallback);\n    const onChangeEnd = chain(props.onChangeEnd, changeParamsCb);\n\n    const higherValueThumbRef = useRef<HTMLDivElement>(null);\n    const lowerValueThumbRef = useRef<HTMLDivElement>(null);\n    const sliderTrackRef = useRef<HTMLDivElement>(null);\n\n    const isRangeSlider = isArray(sliderValue);\n    const hasValueRight =\n        valueDisplayMode === SliderValueDisplayMode.TextField ||\n        (labelPosition === Position.Left && valueDisplayMode === SliderValueDisplayMode.Label);\n\n    useEffect(() => {\n        setSliderValue(value);\n    }, [value]);\n\n    const resetFocusedTextFieldValueAndIndex = () => {\n        setFocusedTextFieldValueAndIndex({\n            focusedIndex: -1,\n            focusedValue: ''\n        });\n    };\n\n    const validateHigherValueInput = (inputValue: number) =>\n        // Higher value must be between maxValue and minValue + minDistance\n        Math.min(maxValue!, Math.max(inputValue, minValue + minDistance));\n\n    const validateLowerValueInput = (inputValue: number) =>\n        // Lower value must be between minValue and maxValue - minDistance\n        Math.max(minValue!, Math.min(inputValue, maxValue - minDistance));\n\n    const validateNewValueRange = (values: [number, number], changedIndex: number): [number, number] => {\n        const distance = values[1] - values[0];\n\n        if (distance >= minDistance) {\n            return values;\n        }\n\n        if (changedIndex === 0) {\n            const lowerValue = validateLowerValueInput(values[0]);\n\n            return [lowerValue, lowerValue + minDistance];\n        }\n\n        const higherValue = validateHigherValueInput(values[1]);\n\n        return [higherValue - minDistance, higherValue];\n    };\n\n    const setValueAndTriggerChange = (newValue: number | [number, number], isChangeEnd?: boolean) => {\n        setSliderValue(newValue);\n        safeCall(onChange, newValue);\n\n        if (isChangeEnd) {\n            onChangeEnd(newValue);\n        }\n    };\n\n    const onSliderThumbValueChange = (newValue: number | [number, number]) => {\n        let val = newValue;\n\n        const isLowerValueThumbFocused = lowerValueThumbRef.current?.hasAttribute('data-focused');\n        const isHigherValueThumbFocused = higherValueThumbRef.current?.hasAttribute('data-focused');\n\n        if (isArray(newValue) && (isLowerValueThumbFocused || isHigherValueThumbFocused)) {\n            const valueRange: [number, number] = isRangeSlider ? [...sliderValue] : [sliderValue, sliderValue];\n            const changedValueIndex = isLowerValueThumbFocused ? 0 : 1;\n\n            valueRange[changedValueIndex] = newValue[changedValueIndex];\n\n            val = validateNewValueRange(valueRange, changedValueIndex);\n        }\n\n        setValueAndTriggerChange(val);\n    };\n\n    const onTextFieldValueChange = (\n        index: number,\n        changeArgs: ChangeArgs<AnyObject, string>,\n        shouldUpdateValue: boolean,\n        isChangeEnd?: boolean\n    ) => {\n        setFocusedTextFieldValueAndIndex({\n            focusedIndex: index,\n            focusedValue: changeArgs.value\n        });\n\n        if (!shouldUpdateValue) {\n            return;\n        }\n\n        const newValue = +changeArgs.value;\n\n        if (isRangeSlider) {\n            const newRange: [number, number] = [...sliderValue];\n\n            newRange[index] = index === 0 ? validateLowerValueInput(newValue) : validateHigherValueInput(newValue);\n\n            setValueAndTriggerChange(validateNewValueRange(newRange, index), isChangeEnd);\n        } else {\n            const validatedValue = Math.min(Math.max(newValue, minValue), maxValue);\n\n            setValueAndTriggerChange(validatedValue, isChangeEnd);\n        }\n    };\n\n    const onTextFieldKeyUp = (index: number, event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === KeyboardEventKey.Enter) {\n            onTextFieldValueChange(index, {value: event.currentTarget.value}, true);\n\n            resetFocusedTextFieldValueAndIndex();\n        }\n    };\n\n    // To make sure user does not get stuck when thumbs are over each other\n    const getThumbZIndexStyle = (state: SliderState, index: number) => {\n        const isThumbOverHalfway = state.getThumbPercent(index) > 1 / 2;\n\n        return {\n            zIndex: isThumbOverHalfway ? state.values.length - index : index\n        };\n    };\n\n    const getTrackFillWidthAndPositionStyle = (state: SliderState) => {\n        if (showFill === false) {\n            return {};\n        }\n\n        const {values} = state;\n\n        if (values.length > 1) {\n            return {\n                left: `${state.getThumbPercent(0) * 100}%`,\n                width: `${(state.getThumbPercent(values.length - 1) - state.getThumbPercent(0)) * 100}%`\n            };\n        }\n\n        return {width: `${state.getThumbPercent(0) * 100}%`};\n    };\n\n    const getValueLabel = (state: SliderState) => {\n        let valueLabelText: string = '';\n\n        state.values.forEach((val, index) => {\n            const txt = state.getFormattedValue(val);\n\n            if (index === 0) {\n                valueLabelText += txt;\n            } else {\n                valueLabelText += ` - ${txt}`;\n            }\n        });\n\n        return valueLabelText;\n    };\n\n    const onTextFieldFocused = (focusedIndex: number, event: FocusEvent<HTMLInputElement>) => {\n        setFocusedTextFieldValueAndIndex({\n            focusedIndex,\n            focusedValue: event.target.value\n        });\n    };\n\n    const renderTextFields = (state: SliderState) => {\n        const {values} = state;\n        const ariaLabels = textFieldAriaLabels ?? [];\n        const {focusedIndex, focusedValue} = focusedTextFieldValueAndIndex;\n\n        return values.map((_, index: number) => (\n            <TextField\n                aria-label={ariaLabels.length > index ? ariaLabels[index] : props['aria-label']}\n                changeCallback={(changeArgs: ChangeArgs<AnyObject, string>) => {\n                    onTextFieldValueChange(index, changeArgs, true, true);\n                    resetFocusedTextFieldValueAndIndex();\n                }}\n                className={classNames('slider__text-field', {'slider__second-text-input-label': index !== 0})}\n                isControlled={true}\n                isDisabled={isDisabled}\n                key={index}\n                onChange={(val: string) => onTextFieldValueChange(index, {value: val}, !isRangeSlider)}\n                onFocus={(event: FocusEvent) => onTextFieldFocused(index, event as FocusEvent<HTMLInputElement>)}\n                onKeyUp={(event: KeyboardEvent<HTMLInputElement>) => onTextFieldKeyUp(index, event)}\n                size={Size.xs}\n                style={{width: valueTextFieldWidth}}\n                textAlign={Alignment.center}\n                type={InputType.number}\n                value={\n                    focusedIndex === index ? focusedValue : (\n                        state.getFormattedValue(state.getThumbValue(index)).replace(',', '')\n                    )\n                }\n            />\n        ));\n    };\n\n    const renderValue = () => {\n        if (valueDisplayMode === SliderValueDisplayMode.TextField) {\n            return (\n                <SliderOutput>\n                    {({state}: SliderRenderProps) => (\n                        <div className=\"slider__value_label_container\">{renderTextFields(state)}</div>\n                    )}\n                </SliderOutput>\n            );\n        }\n\n        return (\n            <SliderOutput className=\"slider__value-label\">\n                {({state}) => <Label size={Size.md}>{getValueLabel(state)}</Label>}\n            </SliderOutput>\n        );\n    };\n\n    if (isSkeleton) {\n        return (\n            <SkeletonField\n                className=\"skeleton-slider\"\n                hasHelpText={!!helpText}\n                hasLabel={!!label}\n                inputRectHeight={20}\n                size={Size.md}\n            />\n        );\n    }\n\n    return (\n        <ReactAriaSlider\n            {...props}\n            className={classNames('slider', className)}\n            isDisabled={isDisabled}\n            maxValue={maxValue}\n            minValue={minValue}\n            onChange={onSliderThumbValueChange}\n            onChangeEnd={onChangeEnd}\n            orientation=\"horizontal\"\n            value={sliderValue}>\n            {labelPosition === Position.Top && (\n                <div className=\"slider__top-content\">\n                    <Label className=\"slider__label\" size={Size.md}>\n                        <strong>{label}</strong>\n                    </Label>\n                    {valueDisplayMode === SliderValueDisplayMode.Label && renderValue()}\n                </div>\n            )}\n            <div className=\"slider__content\">\n                {labelPosition === Position.Left && (\n                    <Label className=\"slider__label\" size={Size.md}>\n                        <strong>{label}</strong>\n                    </Label>\n                )}\n                <div className=\"slider__track-wrapper\">\n                    <SliderTrack\n                        className=\"slider__track-content\"\n                        onHoverChange={setHasSliderTrackHover}\n                        ref={sliderTrackRef}>\n                        {({state}) => (\n                            <div className=\"slider__track-container\">\n                                <div className=\"slider__track\" />\n                                <div className=\"slider__track-fill\" style={getTrackFillWidthAndPositionStyle(state)} />\n                                {state.values.map((_, index) => (\n                                    <TooltipTrigger\n                                        isOpen={\n                                            hasSliderTrackHover ||\n                                            hasSliderThumbHoverOrFocus ||\n                                            state.values.some((__, i) => state.isThumbDragging(i))\n                                        }\n                                        key={index}>\n                                        <SliderThumb\n                                            className=\"slider__track-thumb\"\n                                            index={index}\n                                            key={index}\n                                            onFocusChange={setHasSliderThumbHoverOrFocus}\n                                            onHoverChange={setHasSliderThumbHoverOrFocus}\n                                            ref={index === 0 ? lowerValueThumbRef : higherValueThumbRef}\n                                            style={getThumbZIndexStyle(state, index)}>\n                                            <div className=\"slider__track-thumb-inner-circle\" />\n                                        </SliderThumb>\n                                        {valueDisplayMode === SliderValueDisplayMode.Tooltip && (\n                                            <Tooltip\n                                                position={tooltipPosition}\n                                                triggerRef={index === 0 ? lowerValueThumbRef : higherValueThumbRef}\n                                                type={TooltipType.Plain}>\n                                                <Label size={Size.sm}>\n                                                    <strong>{state.getThumbValue(index)}</strong>\n                                                </Label>\n                                            </Tooltip>\n                                        )}\n                                    </TooltipTrigger>\n                                ))}\n                            </div>\n                        )}\n                    </SliderTrack>\n                </div>\n                {hasValueRight && renderValue()}\n            </div>\n            {helpText && (\n                <HelpText showIcon={showHelpTextIcon} variant={isDisabled ? HelpTextVariant.Disabled : undefined}>\n                    {helpText}\n                </HelpText>\n            )}\n        </ReactAriaSlider>\n    );\n}\n"]}