{"version":3,"file":"usetimeitems.js","sourceRoot":"","sources":["../../../../src/components/inputs/timepicker/usetimeitems.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,OAAO,EAAC,MAAM,OAAO,CAAC;AAC9B,OAAO,EAAC,aAAa,EAAC,MAAM,8BAA8B,CAAC;AAG3D,OAAO,EAAC,GAAG,EAAC,MAAM,oBAAoB,CAAC;AAEvC,MAAM,CAAC,IAAM,0BAA0B,GAAG,EAAE,CAAC;AAE7C,MAAM,UAAU,YAAY,CAAC,aAAuC,EAAE,YAA+C;IACjH,IAAM,UAAU,GAAG,aAAa,EAAE,CAAC;IAEnC,OAAO,OAAO,CAAC;QACX,IAAM,KAAK,GAA8B,EAAE,CAAC;QAC5C,IAAM,SAAS,GACX,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,QAAQ,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC9G,IAAI,IAAI,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC;QAE7B,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE;YACtC,IAAI,UAAU,GAAG,EAAE,CAAC;YAEpB,IAAI,YAAY,EAAE;gBACd,IAAM,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBACpD,IAAM,eAAe,GAAG,QAAQ,CAAC,OAAO,EAAE,CAAC;gBAC3C,IAAM,iBAAiB,GAAG,QAAQ,CAAC,SAAS,EAAE,CAAC;gBAE/C,IAAI,eAAe,IAAI,CAAC,EAAE;oBACtB,UAAU,GAAG,UAAG,eAAe,OAAI,CAAC;iBACvC;qBAAM;oBACH,UAAU,GAAG,UAAG,iBAAiB,SAAM,CAAC;iBAC3C;gBAED,UAAU,GAAG,YAAK,UAAU,MAAG,CAAC;aACnC;YAED,KAAK,CAAC,IAAI,CAAC;gBACP,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC;gBACzC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,UAAU;aACvC,CAAC,CAAC;YACH,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,0BAA0B,EAAE,SAAS,CAAC,CAAC;SAC1D;QAED,OAAO,KAAK,CAAC;IACjB,CAAC,EAAE,CAAC,UAAU,EAAE,YAAY,EAAE,aAAa,CAAC,CAAC,CAAC;AAClD,CAAC","sourcesContent":["import {useMemo} from 'react';\nimport {useCultureDay} from '../../../hooks/usecultureday';\nimport {SelectItem} from '../select';\nimport {CalendarDateTime} from '@internationalized/date';\nimport {day} from '../../../utils/day';\n\nexport const TIME_ITEM_INTERVAL_MINUTES = 15;\n\nexport function useTimeItems(selectedValue?: CalendarDateTime | null, relatedValue?: CalendarDateTime | string | null) {\n    const cultureDay = useCultureDay();\n\n    return useMemo(() => {\n        const items: Array<SelectItem<string>> = [];\n        const startTime =\n            relatedValue ? cultureDay(relatedValue.toString()) : cultureDay(selectedValue?.toString()).startOf('day');\n        let time = startTime.clone();\n\n        while (time.diff(startTime, 'days') <= 0) {\n            let textSuffix = '';\n\n            if (relatedValue) {\n                const duration = day.duration(time.diff(startTime));\n                const durationAsHours = duration.asHours();\n                const durationAsMinutes = duration.asMinutes();\n\n                if (durationAsHours >= 1) {\n                    textSuffix = `${durationAsHours} h`;\n                } else {\n                    textSuffix = `${durationAsMinutes} min`;\n                }\n\n                textSuffix = ` (${textSuffix})`;\n            }\n\n            items.push({\n                value: time.format('YYYY-MM-DDTHH:mm:ss'),\n                text: time.format('LT') + textSuffix\n            });\n            time = time.add(TIME_ITEM_INTERVAL_MINUTES, 'minutes');\n        }\n\n        return items;\n    }, [cultureDay, relatedValue, selectedValue]);\n}\n"]}