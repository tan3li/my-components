{"version":3,"file":"timepicker.js","sourceRoot":"","sources":["../../../../src/components/inputs/timepicker/timepicker.tsx"],"names":[],"mappings":"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","sourcesContent":["import {Group, LabelContext, Popover, Provider, TextContext, TimeFieldProps} from 'react-aria-components';\nimport {useFocusRing, useTimeField} from 'react-aria';\nimport {classNames} from '../../../utils/classnames';\nimport {Size} from '../../../constants';\nimport {AnyObject, ChangeArgs} from '../../../hooks/usechangeparamscallback';\nimport {TDataState} from '../../../constants/datastate';\nimport {ReactNode, RefAttributes, useCallback, useEffect, useMemo, useRef, useState} from 'react';\nimport {LABEL_SIZE_LG_CSS_CLASS, LABEL_SIZE_MD_CSS_CLASS, TooltipContent} from '../../text';\nimport {Field} from '../common/field/field';\nimport {useDataState} from '../../../hooks/usedatastate';\nimport {getDateTimeValue} from './getdatetimevalue.js';\nimport {Icon, iconNames, IconSize} from '../../media';\nimport {useTranslateCommon} from '../../../hooks/translations/usetranslatecommon';\nimport {useLocales} from '../../../contexts';\nimport {useTimeFieldState} from 'react-stately';\nimport {TimeSegment} from './timesegment';\nimport {useResizeObserver} from '@react-aria/utils';\nimport {useSelect} from 'downshift';\nimport {TIME_ITEM_INTERVAL_MINUTES, useTimeItems} from './usetimeitems';\nimport {SelectOption} from '../select/selectoption';\nimport {\n    CalendarDateTime,\n    now,\n    parseDateTime,\n    Time,\n    toCalendarDateTime,\n    today,\n    ZonedDateTime\n} from '@internationalized/date';\nimport {safeCall} from '../../../utils/functionhelper';\nimport {MINUTES_IN_HOUR} from '../../../constants/time';\nimport {getIndexWithPropertyValue} from '../../../utils/collectionhelper';\nimport {VALUE} from '../../../constants/common';\nimport {useFieldHelpText} from '../../../hooks/usefieldhelptext.js';\nimport {ClearButton} from '../../action/index.js';\nimport {isUndefined} from '../../../utils/objecthelper.js';\nimport {useNonModalPopoverInModalFix} from '../../../hooks/usenonmodalpopoverinmodalfix.js';\nimport {SkeletonField} from '../../feedback/skeleton/skeletonfield.js';\n\nexport interface TimePickerProps<P extends AnyObject>\n    extends Omit<TimeFieldProps<CalendarDateTime>, 'value' | 'defaultValue' | 'minValue' | 'maxValue'>,\n        RefAttributes<HTMLDivElement> {\n    /**\n     * Handler that is called with object containing selection state value and changeParams when the element's selection state changes.\n     */\n    changeCallback?: (args: ChangeArgs<P, string | null>) => void;\n    /**\n     * Object which is provided with element's selection state value property in changeCallback.\n     */\n    changeParams?: P;\n    /**\n     * Map that contains model property states with messages.\n     */\n    dataState?: Map<TDataState, string> | null;\n    /**\n     * Additional help text to provide more information.\n     */\n    helpText?: ReactNode;\n    /**\n     * Additional help text to provide more information on successful action.\n     */\n    helpTextSuccess?: ReactNode;\n    /**\n     * Whether the field is required.\n     */\n    isRequired?: boolean;\n    /**\n     * Whether to show skeleton instead of an actual element.\n     */\n    isSkeleton?: boolean;\n    /**\n     * Label of the element.\n     */\n    label?: string;\n    /**\n     * Change callback\n     */\n    onChange?: (dateTime: CalendarDateTime | null) => void;\n    /**\n     * Date-time value related to selected value which will create a duration between them.\n     */\n    relatedValue?: CalendarDateTime | string | null;\n    /**\n     * Whether to show clear button when has selected date. True by default.\n     */\n    showClearButton?: boolean;\n    /**\n     * Whether to show icon for help text.\n     */\n    showHelpTextIcon?: boolean;\n    /**\n     * Size of the element.\n     */\n    size?: Size.xs | Size.sm | Size.md;\n    /**\n     * Tooltip content.\n     */\n    tooltipContent?: TooltipContent;\n    /**\n     * Selected time. Can be provided as ISO 8601 date-time string (YYYY-MM-DDT:HH:mm) or CalendarDateTime object.\n     */\n    value?: CalendarDateTime | string | null;\n}\n\nfunction getNearestTimeItemValue(time: CalendarDateTime | ZonedDateTime): string {\n    const nearestIntervalMinute = Math.round(time.minute / TIME_ITEM_INTERVAL_MINUTES) * TIME_ITEM_INTERVAL_MINUTES;\n    const hour = time.hour + (nearestIntervalMinute >= MINUTES_IN_HOUR ? 1 : 0);\n    const minute = nearestIntervalMinute >= MINUTES_IN_HOUR ? 0 : nearestIntervalMinute;\n\n    return new CalendarDateTime(time.year, time.month, time.day, hour, minute, 0).toString();\n}\n\nexport function TimePicker<P extends AnyObject>({\n    changeCallback,\n    changeParams,\n    className,\n    dataState,\n    helpText,\n    helpTextSuccess,\n    isReadOnly: propsIsReadOnly,\n    isSkeleton,\n    label,\n    ref,\n    relatedValue,\n    showClearButton = true,\n    showHelpTextIcon,\n    size = Size.md,\n    tooltipContent,\n    value,\n    ...props\n}: TimePickerProps<P>) {\n    const {cultureLocale, timeZone} = useLocales();\n    const {isDisabled, isInvalid, isRequired} = props;\n    const {hasError, isReadOnly, errorMessage} = useDataState(dataState, isInvalid, propsIsReadOnly);\n    const [selectedValue, setSelectedValue] = useState(getDateTimeValue(value));\n    const [isOpen, setIsOpen] = useState(false);\n    const inputRef = useRef<HTMLDivElement>(null);\n    const groupRef = useRef<HTMLDivElement>(null);\n    const presetMenuRef = useRef<HTMLDivElement>(null);\n    const toggleBtnRef = useRef<HTMLButtonElement>(null);\n    const popoverRef = useRef<HTMLDivElement>(null);\n    const firstSpinBtnRef = useRef<HTMLDivElement>(null);\n    const translateCommon = useTranslateCommon();\n\n    const onInnerChange = (time: CalendarDateTime | Time | null) => {\n        let dateTime: CalendarDateTime | null;\n\n        if (time instanceof Time) {\n            dateTime = toCalendarDateTime(selectedValue ?? getDateTimeValue(relatedValue) ?? today(timeZone), time);\n        } else {\n            dateTime = time;\n        }\n        setSelectedValue(dateTime);\n    };\n\n    const onChange = (dateTime: CalendarDateTime | null) => {\n        if (!isUndefined(value) && dateTime?.toString() === getDateTimeValue(value)?.toString()) {\n            return;\n        }\n        safeCall(props.onChange, dateTime);\n        safeCall(changeCallback, {...changeParams, value: dateTime ? dateTime.toString() : null} as ChangeArgs<\n            P,\n            string | null\n        >);\n    };\n\n    // Time field hooks\n    const timeFieldHookProps = {\n        ...props,\n        label,\n        onBlur: () => {\n            onChange(selectedValue);\n        },\n        onChange: onInnerChange,\n        isInvalid: hasError,\n        isReadOnly,\n        value: selectedValue\n    };\n    const state = useTimeFieldState({\n        ...timeFieldHookProps,\n        locale: cultureLocale\n    });\n    const {fieldProps, labelProps} = useTimeField(timeFieldHookProps, state, inputRef);\n    const {fieldProps: fieldProps2, helpTextProps} = useFieldHelpText({\n        dataState,\n        helpText,\n        helpTextSuccess,\n        isInvalid\n    });\n\n    // To match popover width to group element width.\n    const [groupWidth, setGroupWidth] = useState<string | null>(null);\n    const onResize = useCallback(() => {\n        if (groupRef.current) {\n            setGroupWidth(`${groupRef.current.offsetWidth}px`);\n        }\n    }, []);\n\n    useResizeObserver({\n        ref: groupRef,\n        onResize\n    });\n\n    // Preset dropdown\n    const timeItems = useTimeItems(selectedValue, relatedValue);\n    const selectedItem = useMemo(() => (selectedValue ? {value: selectedValue.toString()} : null), [selectedValue]);\n    const defaultHighlightedIndex = getIndexWithPropertyValue(\n        VALUE,\n        getNearestTimeItemValue(selectedValue ?? now(timeZone)),\n        timeItems\n    );\n    const {getItemProps, getToggleButtonProps, getMenuProps, highlightedIndex} = useSelect({\n        defaultHighlightedIndex,\n        isOpen,\n        items: timeItems,\n        selectedItem,\n        onIsOpenChange: ({isOpen: newIsOpen}) => {\n            if (isReadOnly) {\n                return;\n            }\n\n            setIsOpen(newIsOpen);\n        },\n        onSelectedItemChange: ({selectedItem: newSelectedItem, type}) => {\n            // Downshift triggers selection for highlighted item on click outside dropdown, we don't want this.\n            if (newSelectedItem && type !== useSelect.stateChangeTypes.ToggleButtonBlur) {\n                const dateTime = parseDateTime(newSelectedItem.value);\n\n                onInnerChange(dateTime);\n                onChange(dateTime);\n            }\n        }\n    });\n    const toggleButtonFocusRing = useFocusRing({within: true, isTextInput: false});\n    const toggleBtnProps = getToggleButtonProps(\n        {\n            ...toggleButtonFocusRing.focusProps,\n            disabled: !!isDisabled || isReadOnly,\n            ref: toggleBtnRef\n        },\n        {suppressRefError: true}\n    );\n    const menuProps = getMenuProps({ref: presetMenuRef}, {suppressRefError: true});\n\n    useNonModalPopoverInModalFix(isOpen, toggleBtnRef, popoverRef);\n\n    useEffect(() => {\n        setSelectedValue(getDateTimeValue(value));\n    }, [value]);\n\n    useEffect(() => {\n        if (isOpen) {\n            const presetMenu = presetMenuRef.current;\n\n            if (presetMenu) {\n                const dataValue = getNearestTimeItemValue(selectedValue ?? now(timeZone));\n                const selectedElement = presetMenu.querySelector(`.select-option[data-value=\"${dataValue}\"]`);\n\n                if (selectedElement instanceof HTMLElement) {\n                    presetMenu.scrollTop = selectedElement.offsetTop - presetMenu.offsetHeight / 2;\n                }\n            }\n        }\n    }, [isOpen]);\n\n    if (isSkeleton) {\n        const hasAnyHelpText = !!errorMessage || !!helpTextSuccess || !!helpText;\n\n        return (\n            <SkeletonField\n                className=\"skeleton-timepicker\"\n                hasHelpText={hasAnyHelpText}\n                hasLabel={!!label}\n                size={size}\n            />\n        );\n    }\n\n    return (\n        <Provider\n            values={[\n                [LabelContext, {...labelProps}],\n                [TextContext, {slots: {description: helpTextProps}}]\n            ]}>\n            <div className={classNames('timepicker', className)} ref={ref}>\n                <Field\n                    dataState={dataState}\n                    helpText={helpText}\n                    helpTextSuccess={helpTextSuccess}\n                    isDisabled={isDisabled}\n                    isInvalid={hasError}\n                    isRequired={isRequired}\n                    label={label}\n                    showHelpTextIcon={showHelpTextIcon}\n                    size={size === Size.xs ? Size.sm : Size.md}\n                    tooltipContent={tooltipContent}>\n                    <Group\n                        className={`timepicker__controls timepicker__controls--${size}`}\n                        isDisabled={isDisabled}\n                        isInvalid={hasError}\n                        ref={groupRef}>\n                        <div {...fieldProps} {...fieldProps2} className=\"timepicker__input\" ref={inputRef}>\n                            {state.segments.map((segment, i) => (\n                                <TimeSegment\n                                    className={size === Size.xs ? LABEL_SIZE_MD_CSS_CLASS : LABEL_SIZE_LG_CSS_CLASS}\n                                    key={i}\n                                    ref={i === 0 ? firstSpinBtnRef : undefined}\n                                    segment={segment}\n                                    state={state}\n                                />\n                            ))}\n                        </div>\n                        <div className=\"timepicker__buttons\">\n                            {showClearButton && !isDisabled && !isReadOnly && selectedValue && (\n                                <ClearButton\n                                    className=\"timepicker__clear-button\"\n                                    onPress={() => {\n                                        setSelectedValue(null);\n                                        onChange(null);\n                                        firstSpinBtnRef.current?.focus();\n                                    }}\n                                    slot={null}\n                                />\n                            )}\n                            <button\n                                {...toggleBtnProps}\n                                aria-label={translateCommon('toggleMenu')}\n                                className=\"timepicker__button\"\n                                data-disabled={toggleBtnProps.disabled || undefined}\n                                data-focus-visible={toggleButtonFocusRing.isFocusVisible || undefined}\n                                data-focused={toggleButtonFocusRing.isFocused || undefined}>\n                                <Icon name={iconNames.Schedule} size={IconSize.MD} />\n                            </button>\n                        </div>\n                    </Group>\n                </Field>\n                <Popover\n                    className=\"timepicker__popover\"\n                    isNonModal={true}\n                    isOpen={isOpen}\n                    maxHeight={280}\n                    placement=\"bottom start\"\n                    ref={popoverRef}\n                    style={groupWidth ? {width: groupWidth} : undefined}\n                    triggerRef={groupRef}>\n                    <div {...menuProps} className=\"timepicker__menu\">\n                        {timeItems.map((item, index) => {\n                            const itemValue = item.value;\n                            const isSelected = selectedItem?.value === itemValue;\n\n                            return (\n                                <SelectOption\n                                    getItemProps={getItemProps}\n                                    isFocused={highlightedIndex === index}\n                                    isSelected={isSelected}\n                                    item={item}\n                                    itemIndex={index}\n                                    key={itemValue}\n                                    level={0}\n                                    size={size}\n                                    useDataValue={true}\n                                />\n                            );\n                        })}\n                    </div>\n                </Popover>\n            </div>\n        </Provider>\n    );\n}\n"]}