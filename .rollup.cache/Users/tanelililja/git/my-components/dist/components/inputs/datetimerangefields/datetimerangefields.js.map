{"version":3,"file":"datetimerangefields.js","sourceRoot":"","sources":["../../../../src/components/inputs/datetimerangefields/datetimerangefields.tsx"],"names":[],"mappings":"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","sourcesContent":["import {DatePicker, DatePickerProps} from '../datepicker';\nimport {Size} from '../../../constants';\nimport {ReactNode, RefAttributes, useEffect, useState} from 'react';\nimport {TimePicker, TimePickerProps} from '../timepicker';\nimport {RangeValue} from '@react-types/shared';\nimport {DateValue} from 'react-aria';\nimport {getDateTimeRangeValue} from './getdatetimerangevalue';\nimport {CalendarDateTime, isSameDay, toCalendarDate, toCalendarDateTime, toTime} from '@internationalized/date';\nimport {ChangeArgs, AnyObject} from '../../../hooks/usechangeparamscallback';\nimport {classNames} from '../../../utils/classnames';\nimport {safeCall} from '../../../utils/functionhelper';\nimport {useTranslateValidation} from '../../../hooks/translations/usetranslatevalidation';\n\nexport const enum DateTimeFieldType {\n    EndDate,\n    EndTime,\n    StartDate,\n    StartTime\n}\n\nexport interface DateField<P extends AnyObject> extends DatePickerProps<P> {\n    type: DateTimeFieldType.StartDate | DateTimeFieldType.EndDate;\n}\n\nexport interface TimeField<P extends AnyObject> extends TimePickerProps<P> {\n    type: DateTimeFieldType.StartTime | DateTimeFieldType.EndTime;\n}\n\nexport type DateTimeField<P extends AnyObject> = DateField<P> | TimeField<P>;\n\nexport interface DateTimeRangeFieldsProps<P extends AnyObject> extends RefAttributes<HTMLDivElement> {\n    /**\n     * Handler that is called with object containing selection state value and changeParams when the element's selection state changes.\n     */\n    changeCallback?: (args: ChangeArgs<P, RangeValue<string | null> | null>) => void;\n    /**\n     * Object which is provided with element's selection state value property in changeCallback.\n     */\n    changeParams?: P;\n    /**\n     * CSS class for the element.\n     */\n    className?: string;\n    /**\n     * Fields to render. Fields will rendered on 2 rows, 2 items per row in given order.\n     */\n    fields: Array<DateTimeField<P>>;\n    /**\n     * Selected value change callback.\n     */\n    onChange?: (value: RangeValue<CalendarDateTime | null> | null) => void;\n    /**\n     * Size of the fields.\n     */\n    size?: Size.xs | Size.sm | Size.md;\n    /**\n     * Current range containing start and end.\n     * Can be provided as ISO 8601 date-time strings without timezone (YYYY-MM-DDT:HH:mm) or CalendarDateTime objects.\n     */\n    value?: RangeValue<CalendarDateTime | string | null> | null;\n}\n\nfunction useDateTimeValidation(value: RangeValue<CalendarDateTime | null> | null) {\n    const translateValidation = useTranslateValidation();\n    const {start, end} = value ?? {};\n    let field = DateTimeFieldType.EndDate,\n        isInvalid = false,\n        errorMessage = '';\n\n    if (start && end && end.compare(start) < 0) {\n        isInvalid = true;\n        errorMessage = translateValidation('endAfterStart');\n\n        if (isSameDay(start, end)) {\n            field = DateTimeFieldType.EndTime;\n        }\n    }\n\n    return {\n        errorMessage,\n        field,\n        isInvalid\n    };\n}\n\n// eslint-disable-next-line complexity\nexport function DateTimeRangeFields<P extends AnyObject>({\n    className,\n    changeCallback,\n    changeParams,\n    fields,\n    ref,\n    size = Size.md,\n    value,\n    ...props\n}: DateTimeRangeFieldsProps<P>) {\n    const [selectedValue, setSelectedValue] = useState(getDateTimeRangeValue(value));\n    const dateTimeValidation = useDateTimeValidation(selectedValue);\n    const hasTimesOnly =\n        fields.filter(({type}) => type === DateTimeFieldType.EndDate || type === DateTimeFieldType.StartDate).length ===\n        0;\n\n    const onChange = (newValue: RangeValue<CalendarDateTime | null>) => {\n        const newValueToSet = newValue.start === null && newValue.end === null ? null : newValue;\n\n        setSelectedValue(newValueToSet);\n        safeCall(props.onChange, newValueToSet);\n        safeCall(changeCallback, {\n            ...changeParams,\n            value:\n                newValueToSet ?\n                    {\n                        start: newValueToSet.start?.toString() ?? null,\n                        end: newValueToSet.end?.toString() ?? null\n                    }\n                :   null\n        } as ChangeArgs<P, RangeValue<string | null> | null>);\n    };\n\n    const onStartDateChange = (date: DateValue | null) => {\n        const {start, end} = selectedValue ?? {};\n        const endTime = end ? toTime(end) : undefined;\n        const newStart = date ? toCalendarDateTime(date, start ? toTime(start) : endTime) : null;\n        let newEnd = end ?? null;\n\n        // If end is before selected start date, change it to same.\n        if (newStart && end && end.compare(newStart) < 0) {\n            newEnd = newStart.copy();\n        }\n\n        onChange({\n            start: newStart,\n            end: newEnd\n        });\n    };\n    const onEndDateChange = (date: DateValue | null) => {\n        const {start, end} = selectedValue ?? {};\n        const startTime = start ? toTime(start) : undefined;\n        const newEnd = date ? toCalendarDateTime(date, end ? toTime(end) : startTime) : null;\n        let newStart = start ?? null;\n\n        // If start is after selected end date, change it to same.\n        if (newEnd && start && start.compare(newEnd) > 0) {\n            newStart = newEnd.copy();\n        }\n\n        onChange({\n            start: newStart,\n            end: newEnd\n        });\n    };\n\n    const onStartTimeChange = (dateTime: CalendarDateTime | null) => {\n        const {end} = selectedValue ?? {};\n        let newEnd = end ?? null;\n\n        // If end is before selected start date, change it to same.\n        if (dateTime && end && end.compare(dateTime) < 0) {\n            newEnd = dateTime.copy();\n        }\n\n        onChange({\n            start: dateTime,\n            end: newEnd\n        });\n    };\n    const onEndTimeChange = (dateTime: CalendarDateTime | null) => {\n        const {start} = selectedValue ?? {};\n        let newStart = start ?? null;\n\n        // If start is after selected end date, change it to same.\n        if (dateTime && start && start.compare(dateTime) > 0) {\n            newStart = dateTime.copy();\n        }\n\n        onChange({\n            start: newStart,\n            end: dateTime\n        });\n    };\n\n    useEffect(() => {\n        setSelectedValue(getDateTimeRangeValue(value));\n    }, [value]);\n\n    const pickerRows: ReactNode[][] = [];\n\n    for (let i = 0, len = fields.length; i < len; i++) {\n        const {type, ...fieldProps} = fields[i];\n        let pickers = pickerRows[pickerRows.length - 1],\n            isInvalid: boolean | undefined,\n            errorMessage: string | undefined;\n\n        if (dateTimeValidation.field === type) {\n            isInvalid = dateTimeValidation.isInvalid;\n            errorMessage = dateTimeValidation.errorMessage;\n        }\n\n        if (!pickers || pickers.length === 2) {\n            pickers = [];\n            pickerRows.push(pickers);\n        }\n\n        if (type === DateTimeFieldType.StartDate || type === DateTimeFieldType.EndDate) {\n            const isStart = type === DateTimeFieldType.StartDate;\n            const dateTime = isStart ? selectedValue?.start : selectedValue?.end;\n\n            pickers.push(\n                <DatePicker\n                    {...(fieldProps as DatePickerProps<P>)}\n                    helpText={errorMessage}\n                    isInvalid={isInvalid}\n                    key={type}\n                    onChange={isStart ? onStartDateChange : onEndDateChange}\n                    relatedValue={isStart ? selectedValue?.end : selectedValue?.start}\n                    size={size}\n                    value={dateTime ? toCalendarDate(dateTime).toString() : null}\n                />\n            );\n        } else if (type === DateTimeFieldType.StartTime || type === DateTimeFieldType.EndTime) {\n            const isStart = type === DateTimeFieldType.StartTime;\n            const dateTime = isStart ? selectedValue?.start : selectedValue?.end;\n            let relatedValue: CalendarDateTime | null | undefined;\n\n            if (\n                !isStart &&\n                selectedValue?.start &&\n                (!dateTime || hasTimesOnly || isSameDay(selectedValue?.start, dateTime))\n            ) {\n                relatedValue = selectedValue?.start;\n            }\n\n            pickers.push(\n                <TimePicker\n                    {...(fieldProps as TimePickerProps<P>)}\n                    helpText={errorMessage}\n                    isInvalid={isInvalid}\n                    key={type}\n                    onChange={isStart ? onStartTimeChange : onEndTimeChange}\n                    relatedValue={relatedValue}\n                    size={size}\n                    value={dateTime ? dateTime.toString() : null}\n                />\n            );\n        }\n    }\n\n    return (\n        <div className={classNames('datetime-range-fields', className)} ref={ref}>\n            {pickerRows.map((pickers, i) => (\n                <div className=\"datetime-range-fields__row\" key={i}>\n                    {pickers}\n                </div>\n            ))}\n        </div>\n    );\n}\n"]}