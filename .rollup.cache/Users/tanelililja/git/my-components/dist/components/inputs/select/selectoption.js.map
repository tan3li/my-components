{"version":3,"file":"selectoption.js","sourceRoot":"","sources":["../../../../src/components/inputs/select/selectoption.tsx"],"names":[],"mappings":"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","sourcesContent":["import {classNames} from '../../../utils/classnames.js';\nimport {HTMLAttributes, memo, ReactNode, RefAttributes, useEffect, useImperativeHandle, useRef, useState} from 'react';\nimport {Orientation, Position, Size} from '../../../constants/index.js';\nimport {Tooltip, TooltipTrigger, TooltipType} from '../../feedback/index.js';\nimport {useFocusable} from 'react-aria';\nimport {SelectItemBase} from './selectitem.js';\nimport {InteractionSource} from '../../../constants/interactionsource.js';\nimport {SelectOptionContentProps} from './selectoptioncontentprops.js';\nimport {SelectOptionContent} from './selectoptioncontent.js';\nimport {isFunction} from '../../../utils/functionhelper.js';\nimport {UseComboboxReturnValue, UseSelectReturnValue} from 'downshift';\nimport {useIsTextTruncated} from '../../../hooks/useistexttruncated.js';\n\ninterface SelectOptionInnerProps extends HTMLAttributes<HTMLDivElement>, RefAttributes<HTMLDivElement> {\n    children: ReactNode;\n    isDisabled?: boolean;\n    isFocused?: boolean;\n    isKeyboardFocused?: boolean;\n    isReadOnly?: boolean;\n    isSelected?: boolean;\n    size?: Size.xs | Size.sm | Size.md;\n}\n\nfunction SelectOptionInner({\n    children,\n    className,\n    isDisabled,\n    isFocused,\n    isKeyboardFocused,\n    isReadOnly,\n    isSelected,\n    ref: outerRef,\n    size = Size.md,\n    ...props\n}: SelectOptionInnerProps) {\n    const ref = useRef<HTMLDivElement>(null);\n    const {focusableProps} = useFocusable(props, ref);\n\n    useImperativeHandle(outerRef, () => ref.current!, []);\n\n    return (\n        <div\n            {...focusableProps}\n            {...props}\n            aria-disabled={isReadOnly ? true : props['aria-disabled']}\n            className={classNames(`select-option select-option--${size}`, className)}\n            data-disabled={!!isDisabled || undefined}\n            data-focused={!!isFocused || undefined}\n            data-keyboard-focused={!!isKeyboardFocused || undefined}\n            data-readonly={!!isReadOnly || undefined}\n            data-selected={!!isSelected || undefined}\n            ref={ref}\n            tabIndex={undefined}>\n            {children}\n        </div>\n    );\n}\n\nexport interface SelectOptionProps<TItem extends SelectItemBase<TItem>> {\n    disabledKeys?: Array<TItem['value']>;\n    getItemProps:\n        | UseComboboxReturnValue<SelectItemBase<TItem>>['getItemProps']\n        | UseSelectReturnValue<SelectItemBase<TItem>>['getItemProps'];\n    highlightSource?: InteractionSource;\n    isFocused?: boolean;\n    isSelected?: boolean;\n    item: TItem;\n    itemClassName?: string | ((item: TItem) => string);\n    itemIndex: number;\n    level: number;\n    renderItemContent?: (props: SelectOptionContentProps<TItem>) => ReactNode;\n    size: Size.md | Size.sm | Size.xs;\n    useDataValue?: boolean;\n}\n\nfunction SelectOption<TItem extends SelectItemBase<TItem>>({\n    disabledKeys,\n    getItemProps,\n    highlightSource,\n    isFocused,\n    isSelected,\n    item,\n    itemClassName,\n    itemIndex,\n    level,\n    renderItemContent,\n    size,\n    useDataValue\n}: SelectOptionProps<TItem>) {\n    const ref = useRef<HTMLDivElement>(null);\n    const labelRef = useRef<HTMLDivElement>(null);\n    const descriptionRef = useRef<HTMLDivElement>(null);\n    const isLabelTruncated = useIsTextTruncated({overflowDirection: Orientation.vertical, ref: labelRef});\n    const isDescriptionTruncated = useIsTextTruncated({overflowDirection: Orientation.vertical, ref: descriptionRef});\n    const [isTooltipOpen, setIsTooltipOpen] = useState(false);\n    const tooltipContent: ReactNode[] = [];\n    const itemValue = item.value;\n    const isItemReadOnly = item.isReadOnly;\n    const isItemDisabled = !!disabledKeys?.includes(itemValue);\n    const isItemKeyboardFocused = isFocused && highlightSource === InteractionSource.Keyboard;\n    const optionContentProps: SelectOptionContentProps<TItem> = {\n        isDisabled: isItemDisabled,\n        isReadOnly: isItemReadOnly,\n        item,\n        labelRef,\n        descriptionRef,\n        level,\n        size\n    };\n\n    if (item.tooltip) {\n        tooltipContent.push(<div key=\"item-tt\">{item.tooltip.content}</div>);\n    }\n    if (isLabelTruncated) {\n        if (tooltipContent.length > 0) {\n            tooltipContent.push(<br key=\"br1\" />);\n        }\n        tooltipContent.push(<div key=\"text\">{labelRef.current?.textContent}</div>);\n    }\n    if (isDescriptionTruncated) {\n        if (tooltipContent.length > 0) {\n            tooltipContent.push(<br key=\"br2\" />);\n        }\n        tooltipContent.push(<div key=\"desc\">{descriptionRef.current?.textContent}</div>);\n    }\n\n    let content: ReactNode;\n\n    if (renderItemContent) {\n        content = renderItemContent(optionContentProps);\n    } else {\n        content = <SelectOptionContent {...optionContentProps} />;\n    }\n\n    const hasTooltipContent = tooltipContent.length > 0;\n\n    useEffect(() => {\n        setIsTooltipOpen(hasTooltipContent ? !!isItemKeyboardFocused : false);\n    }, [isItemKeyboardFocused]);\n\n    return (\n        <TooltipTrigger isDisabled={!hasTooltipContent} isOpen={isTooltipOpen} onOpenChange={setIsTooltipOpen}>\n            <SelectOptionInner\n                {...getItemProps({item, index: itemIndex, ref})}\n                className={classNames(isFunction(itemClassName) ? itemClassName(item) : itemClassName, {\n                    'select-option--action': !!item.action\n                })}\n                data-value={useDataValue ? itemValue : undefined}\n                isDisabled={isItemDisabled}\n                isFocused={isFocused}\n                isKeyboardFocused={isItemKeyboardFocused}\n                isReadOnly={isItemReadOnly}\n                isSelected={isSelected}\n                size={size}>\n                {content}\n            </SelectOptionInner>\n            <Tooltip position={Position.Right} triggerRef={ref} type={TooltipType.Plain}>\n                {tooltipContent}\n            </Tooltip>\n        </TooltipTrigger>\n    );\n}\n\nconst MemoizedSelectOption = memo(SelectOption) as typeof SelectOption;\n\nexport {MemoizedSelectOption as SelectOption};\n"]}