{"version":3,"file":"calendargrid.js","sourceRoot":"","sources":["../../../../src/components/inputs/calendar/calendargrid.tsx"],"names":[],"mappings":"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","sourcesContent":["import {ReactNode} from 'react';\nimport {AriaCalendarGridProps, DateValue, useCalendarGrid} from 'react-aria';\nimport {useLanguageDay} from '../../../hooks/uselanguageday.js';\nimport {useTranslateDatePeriod} from '../../../hooks/translations/usetranslatedateperiod.js';\nimport {CalendarState} from 'react-stately';\nimport {CalendarCell, CalendarCellProps} from './calendarcell.js';\nimport {CalendarHeaderCell} from './calendarheadercell.js';\nimport {classNames} from '../../../utils/classnames.js';\nimport {CalendarDate, isSameDay} from '@internationalized/date';\nimport {useCultureDay} from '../../../hooks/usecultureday.js';\nimport {getDateValue} from './getdatevalue';\nimport {CalendarWeekNumberCell} from './calendarweeknumbercell.js';\n\nexport interface CalendarGridProps extends AriaCalendarGridProps {\n    highlightSelectedWeek?: boolean;\n    relatedValue?: DateValue | string | null;\n    renderCellContent?: CalendarCellProps['renderContent'];\n    showWeekNumbers?: boolean;\n    state: CalendarState;\n}\n\nconst VISIBLE_WEEKS_IN_MONTH = 6;\n\nexport function CalendarGrid({\n    highlightSelectedWeek,\n    relatedValue,\n    renderCellContent,\n    showWeekNumbers,\n    state,\n    ...props\n}: CalendarGridProps) {\n    const {gridProps, headerProps} = useCalendarGrid(props, state);\n    const languageDay = useLanguageDay();\n    const cultureDay = useCultureDay();\n    const translateDatePeriod = useTranslateDatePeriod();\n\n    const renderHeaderCells = () => {\n        const cells: ReactNode[] = [\n            ...state.getDatesInWeek(0).map((date, i) => {\n                const weekDay = languageDay(date?.toString()).format('dd');\n\n                return <CalendarHeaderCell key={i}>{weekDay}</CalendarHeaderCell>;\n            })\n        ];\n\n        if (showWeekNumbers) {\n            cells.unshift(<CalendarHeaderCell aria-label={translateDatePeriod('weekShort')} key=\"week\" />);\n        }\n\n        return cells;\n    };\n\n    const renderBodyCells = (weekDates: Array<CalendarDate | null>) => {\n        const cells: ReactNode[] = [];\n\n        weekDates.forEach((date, i) => {\n            if (date) {\n                if (i === 0 && showWeekNumbers) {\n                    const weekNumber = cultureDay(date.toString()).week();\n\n                    cells.push(<CalendarWeekNumberCell key=\"week\">{weekNumber}</CalendarWeekNumberCell>);\n                }\n\n                const selectedValue = state.value;\n                const relatedSelectedValue = relatedValue ? getDateValue(relatedValue) : null;\n                const hasRange =\n                    !!relatedSelectedValue && !!selectedValue && !isSameDay(selectedValue, relatedSelectedValue);\n                const isInRange =\n                    hasRange &&\n                    cultureDay(date.toString()).isBetween(\n                        relatedSelectedValue.toString(),\n                        selectedValue.toString(),\n                        'day',\n                        '[]'\n                    );\n                const isSelectedAsRelatedValue = !!relatedSelectedValue && isSameDay(relatedSelectedValue, date);\n                let isStartOfRange = false,\n                    isEndOfRange = false;\n\n                if (hasRange && isInRange) {\n                    const startDateOfRange =\n                        selectedValue?.compare(relatedSelectedValue) > 0 ? relatedSelectedValue : selectedValue;\n                    const endDateOfRange = startDateOfRange === selectedValue ? relatedSelectedValue : selectedValue;\n\n                    isStartOfRange = isSameDay(startDateOfRange, date);\n                    isEndOfRange = !isStartOfRange && isSameDay(endDateOfRange, date);\n                }\n\n                cells.push(\n                    <CalendarCell\n                        date={date}\n                        isSelectedAsRelatedValue={isSelectedAsRelatedValue}\n                        key={i}\n                        rangeInfo={{isInRange, isStartOfRange, isEndOfRange}}\n                        renderContent={renderCellContent}\n                        state={state}\n                    />\n                );\n            } else {\n                cells.push(<td className=\"calendar-grid__cell\" key={i} />);\n            }\n        });\n\n        return cells;\n    };\n\n    return (\n        <table {...gridProps} className=\"calendar-grid\">\n            <thead {...headerProps} className=\"calendar-grid__header\">\n                <tr className=\"calendar-grid__header-row\">{renderHeaderCells()}</tr>\n            </thead>\n            <tbody className=\"calendar-grid__body\">\n                {[...new Array(VISIBLE_WEEKS_IN_MONTH).keys()].map((weekIndex) => {\n                    const weekDates = state.getDatesInWeek(weekIndex);\n                    const firstDateOfWeek = weekDates[0]?.toString();\n                    const selectedDate = state.value?.toString();\n                    const isHighlighted =\n                        highlightSelectedWeek &&\n                        firstDateOfWeek &&\n                        selectedDate &&\n                        cultureDay(firstDateOfWeek).week() === cultureDay(selectedDate).week();\n\n                    return (\n                        <tr\n                            className={classNames('calendar-grid__row', {\n                                'calendar-grid__row--highlight': isHighlighted\n                            })}\n                            key={weekIndex}>\n                            {renderBodyCells(weekDates)}\n                        </tr>\n                    );\n                })}\n            </tbody>\n        </table>\n    );\n}\n"]}