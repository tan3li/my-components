{"version":3,"file":"inlinetextfield.js","sourceRoot":"","sources":["../../../../src/components/inputs/textfield/inlinetextfield.tsx"],"names":[],"mappings":"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","sourcesContent":["import {AnyObject} from '../../../hooks/usechangeparamscallback.js';\nimport {TextField, TextFieldProps} from './textfield.js';\nimport {useDataState} from '../../../hooks/usedatastate.js';\nimport {useEffect, useImperativeHandle, useRef, useState} from 'react';\nimport {useTranslateCommon} from '../../../hooks/translations/usetranslatecommon.js';\nimport {Tooltip, TooltipTrigger, TooltipType} from '../../feedback/index.js';\nimport {Position, Size} from '../../../constants/index.js';\nimport {iconNames} from '../../media/index.js';\nimport {classNames} from '../../../utils/classnames.js';\nimport {chain} from 'react-aria';\n\nexport interface InlineTextFieldProps<P extends AnyObject>\n    extends Omit<TextFieldProps<P>, 'helpText' | 'helpTextSuccess' | 'showHelpTextIcon'> {\n    /**\n     * Function that is called when input value changes. Should return error message if given value is invalid.\n     * Message will be shown in tooltip when field has focus.\n     */\n    validate?: (value: string) => string | null | undefined;\n}\n\nexport function InlineTextField<P extends AnyObject>({\n    dataState,\n    ref: outerRef,\n    size = Size.xs,\n    validate,\n    value,\n    ...props\n}: InlineTextFieldProps<P>) {\n    const {hasError, errorMessage, isReadOnly} = useDataState(dataState, props.isInvalid, props.isReadOnly);\n    const [stateValue, setStateValue] = useState(value);\n    const [isFocused, setIsFocused] = useState(false);\n    const [validationState, setValidationState] = useState({isInvalid: hasError, errorText: errorMessage});\n    const {isInvalid, errorText} = validationState;\n    const ref = useRef<HTMLDivElement>(null);\n    const translateCommon = useTranslateCommon();\n\n    useImperativeHandle(outerRef, () => ref.current!, []);\n\n    const onChange = (newValue: string) => {\n        const validationErrorMsg = validate?.(newValue) ?? '';\n\n        setStateValue(newValue);\n        setValidationState({isInvalid: !!validationErrorMsg, errorText: validationErrorMsg});\n        props.onChange?.(newValue);\n    };\n\n    useEffect(() => {\n        setStateValue(value);\n    }, [value]);\n\n    useEffect(() => {\n        setValidationState({isInvalid: hasError, errorText: errorMessage});\n    }, [hasError, errorMessage]);\n\n    return (\n        <TooltipTrigger isOpen={isInvalid && isFocused}>\n            <TextField\n                {...props}\n                className={classNames(props.className, 'inline-text-field')}\n                helpText={errorText}\n                isInvalid={isInvalid}\n                isPlain={true}\n                isReadOnly={isReadOnly}\n                onChange={onChange}\n                onFocusChange={chain(setIsFocused, props.onFocusChange)}\n                ref={ref}\n                size={size}\n                value={stateValue}\n            />\n            <Tooltip\n                className=\"inline-text-field__error-tooltip\"\n                headerIconName={iconNames.EmergencyHomeFilled}\n                headerText={translateCommon('error')}\n                offset={2}\n                position={Position.Left}\n                triggerRef={ref}\n                type={TooltipType.Rich}>\n                {errorText}\n            </Tooltip>\n        </TooltipTrigger>\n    );\n}\n"]}