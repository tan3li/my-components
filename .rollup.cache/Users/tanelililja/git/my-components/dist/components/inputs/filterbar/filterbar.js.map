{"version":3,"file":"filterbar.js","sourceRoot":"","sources":["../../../../src/components/inputs/filterbar/filterbar.tsx"],"names":[],"mappings":"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","sourcesContent":["import {ReactNode, RefAttributes, useCallback, useRef, useState} from 'react';\nimport {classNames} from '../../../utils/classnames.js';\nimport {Size} from '../../../constants/index.js';\nimport {Button, ButtonStyle, ButtonVariant, IconButton} from '../../action/index.js';\nimport {useTranslateCommon} from '../../../hooks/translations/usetranslatecommon.js';\nimport {Icon, iconNames, IconSize} from '../../media/index.js';\nimport {useResizeObserver} from '@react-aria/utils';\n\nexport const enum FilterBarStyle {\n    Card = 'card',\n    Plain = 'plain'\n}\n\nexport interface FilterBarProps extends RefAttributes<HTMLDivElement> {\n    /**\n     * Number of active, visible and non-visible, filters.\n     */\n    activeFiltersCount?: number;\n    /**\n     * Visible filters to render.\n     */\n    children?: ReactNode;\n    /**\n     * CSS class name for the element.\n     */\n    className?: string;\n    /**\n     * Number of active non-visible filters.\n     */\n    nonVisibleActiveFiltersCount?: number;\n    /**\n     * Callback for the \"Clear all\" action.\n     */\n    onClearAll?: () => void;\n    /**\n     * Callback for the \"Filters\" action.\n     */\n    onPressFilters?: () => void;\n    /**\n     * Display style for the element.\n     */\n    style?: FilterBarStyle;\n}\n\nexport function FilterBar({\n    activeFiltersCount,\n    className,\n    children,\n    nonVisibleActiveFiltersCount,\n    onClearAll,\n    onPressFilters,\n    ref,\n    style = FilterBarStyle.Card\n}: FilterBarProps) {\n    const translateCommon = useTranslateCommon();\n    const filterAreaRef = useRef<HTMLDivElement>(null);\n    const [isScrollable, setIsScrollable] = useState(false);\n    const [scrollParams, setScrollParams] = useState({scrollLeft: 0, scrollWidth: 0, offsetWidth: 0});\n    const actionSize = style === FilterBarStyle.Card ? Size.md : Size.sm;\n\n    const scrollFilterArea = (direction: number) => {\n        const filterAreaEl = filterAreaRef.current;\n\n        if (filterAreaEl) {\n            const scrollableWidth = scrollParams.scrollWidth - scrollParams.offsetWidth;\n            const newScrollLeft = Math.min(\n                filterAreaEl.scrollLeft + direction * scrollParams.offsetWidth,\n                scrollableWidth\n            );\n\n            filterAreaEl.scrollLeft = newScrollLeft;\n            setScrollParams({...scrollParams, scrollLeft: newScrollLeft});\n        }\n    };\n\n    const onResize = useCallback(() => {\n        const filterAreaEl = filterAreaRef.current;\n\n        if (filterAreaEl) {\n            const currScrollWidth = filterAreaEl.scrollWidth;\n            const currScrollLeft = filterAreaEl.scrollLeft;\n            const currOffsetWidth = filterAreaEl.offsetWidth;\n\n            setIsScrollable(currOffsetWidth < currScrollWidth);\n            setScrollParams({scrollWidth: currScrollWidth, scrollLeft: currScrollLeft, offsetWidth: currOffsetWidth});\n        }\n    }, [filterAreaRef]);\n\n    useResizeObserver({ref: filterAreaRef, onResize});\n\n    return (\n        <div className={classNames(`filter-bar filter-bar--${style}`, className)} ref={ref}>\n            <div className=\"filter-bar__filters-wrapper\">\n                {isScrollable && scrollParams.scrollLeft > 0 && (\n                    <IconButton\n                        aria-label={translateCommon('scrollLeft')}\n                        className=\"filter-bar__scroll-btn filter-bar__scroll-btn--left\"\n                        iconName={iconNames.ChevronLeft}\n                        onPress={() => {\n                            scrollFilterArea(-1);\n                        }}\n                        style={ButtonStyle.Fill}\n                        variant={ButtonVariant.Neutral}\n                    />\n                )}\n                <div className=\"filter-bar__filters\" ref={filterAreaRef}>\n                    {children}\n                </div>\n                {isScrollable && scrollParams.scrollLeft < scrollParams.scrollWidth - scrollParams.offsetWidth && (\n                    <IconButton\n                        aria-label={translateCommon('scrollRight')}\n                        className=\"filter-bar__scroll-btn filter-bar__scroll-btn--right\"\n                        iconName={iconNames.ChevronRight}\n                        onPress={() => {\n                            scrollFilterArea(1);\n                        }}\n                        style={ButtonStyle.Fill}\n                        variant={ButtonVariant.Neutral}\n                    />\n                )}\n            </div>\n            <div className=\"filter-bar__actions\">\n                <Button\n                    className=\"filters-button\"\n                    onPress={onPressFilters}\n                    size={actionSize}\n                    startIconName={iconNames.Tune}\n                    style={ButtonStyle.Plain}\n                    variant={ButtonVariant.Neutral}>\n                    {!!nonVisibleActiveFiltersCount && (\n                        <Icon\n                            ariaLabel={translateCommon('additionalFilters', {count: nonVisibleActiveFiltersCount})}\n                            className=\"filters-button__icon\"\n                            name={iconNames.StatusLightFilled}\n                            size={IconSize.SM}\n                        />\n                    )}\n                    <strong>\n                        {translateCommon('filters')}\n                        {!!activeFiltersCount && ` (${activeFiltersCount})`}\n                    </strong>\n                </Button>\n                <Button\n                    isDisabled={!activeFiltersCount}\n                    onPress={onClearAll}\n                    size={actionSize}\n                    style={ButtonStyle.Plain}\n                    variant={ButtonVariant.Danger}>\n                    {translateCommon('clearAll')}\n                </Button>\n            </div>\n        </div>\n    );\n}\n"]}