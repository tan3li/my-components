{"version":3,"file":"filterbutton.js","sourceRoot":"","sources":["../../../../src/components/inputs/filterselect/filterbutton.tsx"],"names":[],"mappings":"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","sourcesContent":["import {ReactNode, RefAttributes} from 'react';\nimport {classNames} from '../../../utils/classnames.js';\nimport {ClearButton, ClearButtonProps} from '../../action/index.js';\nimport {Button, ButtonProps} from 'react-aria-components';\nimport {KeyboardEventKey, Size} from '../../../constants/index.js';\nimport {HelpText, HelpTextVariant, Label, LabelProps} from '../../text/index.js';\nimport {Icon, IconName, iconNames} from '../../media/index.js';\nimport {useFieldHelpText} from '../../../hooks/usefieldhelptext.js';\nimport {SkeletonField} from '../../feedback/skeleton/skeletonfield.js';\n\nexport interface FilterButtonProps extends RefAttributes<HTMLDivElement> {\n    /**\n     * Label for the element.\n     */\n    children: ReactNode;\n    /**\n     * CSS class name for the element.\n     */\n    className?: string;\n    /**\n     * Props for clear button.\n     */\n    clearButtonProps?: ClearButtonProps & RefAttributes<HTMLButtonElement>;\n    /**\n     * Help text\n     */\n    helpText?: string;\n    /**\n     * Whether element is active, i.e. it's filtering something.\n     */\n    isActive?: boolean;\n    /**\n     * Whether element is disabled.\n     */\n    isDisabled?: boolean;\n    /**\n     * Whether element is focusable.\n     */\n    isFocusable?: boolean;\n    /**\n     * Whether related popover element is open.\n     */\n    isOpen?: boolean;\n    /**\n     * Whether to show skeleton instead of an actual element.\n     */\n    isSkeleton?: boolean;\n    /**\n     * Hidden label for the element.\n     */\n    label: string;\n    /**\n     * Props for hidden label.\n     */\n    labelProps?: Partial<LabelProps>;\n    /**\n     * Callback for open state change.\n     */\n    onOpenChange?: (isOpen: boolean) => void;\n    /**\n     * Whether to show clear button when isActive = true.\n     */\n    showClearButton?: boolean;\n    /**\n     * Whether to show icon for help text.\n     */\n    showHelpTextIcon?: boolean;\n    /**\n     * Size of the element.\n     */\n    size?: Size.md | Size.sm | Size.xs;\n    /**\n     * Icon that will be rendered at the start of toggle button.\n     */\n    startIconName?: IconName;\n    /**\n     * Props for toggle button.\n     */\n    toggleButtonProps?: ButtonProps & RefAttributes<HTMLButtonElement>;\n}\n\nexport function FilterButton({\n    children,\n    className,\n    clearButtonProps,\n    helpText,\n    isActive,\n    isDisabled,\n    isFocusable = true,\n    isOpen,\n    isSkeleton,\n    label,\n    labelProps,\n    onOpenChange,\n    ref,\n    showClearButton,\n    showHelpTextIcon,\n    size = Size.md,\n    startIconName,\n    toggleButtonProps\n}: FilterButtonProps) {\n    const isClearable = showClearButton && isActive;\n    const {fieldProps, helpTextProps} = useFieldHelpText({helpText});\n\n    if (isSkeleton) {\n        return <SkeletonField className=\"skeleton-filter-button\" hasHelpText={!!helpText} size={size} />;\n    }\n\n    return (\n        <div\n            className={classNames(`filter-button filter-button--${size}`, className)}\n            data-clearable={!!isClearable || undefined}\n            ref={ref}>\n            <Label {...labelProps} className=\"visually-hidden\" size={Size.lg}>\n                {label}\n            </Label>\n            <div className={classNames('filter-toggle-button-wrapper', className)}>\n                <Button\n                    {...fieldProps}\n                    {...toggleButtonProps}\n                    className={`filter-toggle-button filter-toggle-button--${size}`}\n                    data-active={!!isActive || undefined}\n                    data-focusable={!!isFocusable || undefined}\n                    excludeFromTabOrder={!isFocusable}\n                    isDisabled={isDisabled}\n                    onKeyDown={(e) => {\n                        const eventKey = e.key;\n\n                        if (eventKey === KeyboardEventKey.ArrowDown) {\n                            e.preventDefault();\n                            onOpenChange?.(true);\n                        } else if (eventKey === KeyboardEventKey.Escape) {\n                            onOpenChange?.(false);\n                        }\n\n                        toggleButtonProps?.onKeyDown?.(e);\n                    }}\n                    onPress={(e) => {\n                        onOpenChange?.(!isOpen);\n                        toggleButtonProps?.onPress?.(e);\n                    }}\n                    preventFocusOnPress={!isFocusable}>\n                    <span className=\"filter-toggle-button__content\">\n                        {startIconName && (\n                            <Icon ariaHidden={true} className=\"filter-toggle-button__start-icon\" name={startIconName} />\n                        )}\n                        <Label className=\"filter-toggle-button__label\" size={size === Size.xs ? Size.md : Size.lg}>\n                            {children}\n                        </Label>\n                        {isFocusable && (\n                            <Icon\n                                className={classNames(\n                                    `filter-toggle-button__expand-icon filter-toggle-button__expand-icon--${size}`,\n                                    {\n                                        'filter-toggle-button__expand-icon--disabled': isDisabled\n                                    }\n                                )}\n                                name={isOpen ? iconNames.ExpandLessFilled : iconNames.ExpandMoreFilled}\n                            />\n                        )}\n                    </span>\n                </Button>\n                {isClearable && (\n                    <ClearButton\n                        className={`filter-clear-button filter-clear-button--${size}`}\n                        isDisabled={isDisabled}\n                        {...clearButtonProps}\n                    />\n                )}\n            </div>\n            {helpText && (\n                <HelpText\n                    {...helpTextProps}\n                    showIcon={showHelpTextIcon}\n                    variant={isDisabled ? HelpTextVariant.Disabled : HelpTextVariant.Neutral}>\n                    {helpText}\n                </HelpText>\n            )}\n        </div>\n    );\n}\n"]}