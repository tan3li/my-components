{"version":3,"file":"filterselect.js","sourceRoot":"","sources":["../../../../src/components/inputs/filterselect/filterselect.tsx"],"names":[],"mappings":"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","sourcesContent":["import {FilterButton} from './filterbutton.js';\nimport {CSSProperties, ReactNode, RefAttributes, useEffect, useRef, useState} from 'react';\nimport {Size} from '../../../constants/index.js';\nimport {AnyObject} from '../../../hooks/usechangeparamscallback.js';\nimport {InputChangeTriggerAction, SelectChangeItem, SelectItemBase} from '../select/index.js';\nimport {useCombobox} from 'downshift';\nimport {Dialog, Popover} from 'react-aria-components';\nimport {SearchField} from '../searchfield/index.js';\nimport {useTranslateCommon} from '../../../hooks/translations/usetranslatecommon.js';\nimport {renderSelectItems} from '../select/renderselectitems.js';\nimport {createFlatSelectItemList} from '../select/createflatselectitemlist.js';\nimport {safeCall} from '../../../utils/functionhelper.js';\nimport {filterItems} from '../select/filteritems.js';\nimport {useFilter} from 'react-aria';\nimport {SelectOptionsEmptyState} from '../select/selectoptionsemptystate.js';\nimport {LoadingItem} from '../select/loadingitem.js';\nimport {BottomLoader} from '../select/bottomloader.js';\nimport {useScrollToSelectedOption} from '../select/usescrolltoselectedoption.js';\nimport {classNames} from '../../../utils/classnames.js';\nimport {IconName} from '../../media/index.js';\nimport {SelectOptionContentProps} from '../select/selectoptioncontentprops.js';\nimport {useSelectItemHighlight} from '../select/useselectitemhighlight.js';\nimport {useSelectOptionCountAnnouncement} from '../select/useselectoptioncountannouncement.js';\n\nexport interface FilterSelectProps<P extends AnyObject, TItem extends SelectItemBase<TItem>>\n    extends RefAttributes<HTMLDivElement> {\n    /**\n     * Handler that is called with object containing selection state value and changeParams when the element's\n     * selection state changes.\n     */\n    changeCallback?: (args: P & SelectChangeItem<TItem>) => void;\n    /**\n     * Object which is provided with element's selection state value property in changeCallback.\n     */\n    changeParams?: P;\n    /**\n     * CSS class name for the element.\n     */\n    className?: string;\n    /**\n     * The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.\n     */\n    disabledKeys?: Array<TItem['value']>;\n    /**\n     * Set of item keys whose children should be visible.\n     */\n    expandedKeys?: Set<TItem['value']>;\n    /**\n     * Help text\n     */\n    helpText?: string;\n    /**\n     * Whether selected value can be cleared. True by default.\n     */\n    isClearable?: boolean;\n    /**\n     * Whether element is disabled.\n     */\n    isDisabled?: boolean;\n    /**\n     * Whether loading item should be displayed among options.\n     */\n    isLoading?: boolean;\n    /**\n     * Whether menu can be opened for selection.\n     */\n    isSelectable?: boolean;\n    /**\n     * Whether to show skeleton instead of an actual element.\n     */\n    isSkeleton?: boolean;\n    /**\n     * Custom CSS class name for item.\n     */\n    itemClassName?: string | ((item: TItem) => string);\n    /**\n     * List of items to show.\n     */\n    items: TItem[];\n    /**\n     * Label for the element.\n     */\n    label: string;\n    /**\n     * Width for the menu.\n     */\n    menuWidth?: CSSProperties['width'];\n    /**\n     * Handler that is called when bottom loader is reached.\n     */\n    onBottomLoaderVisible?: (entry: IntersectionObserverEntry) => void;\n    /**\n     * Handler that is called when something is typed to input field. Local search will not be used if this is set.\n     */\n    onInputChange?: (value: string, inputChangeTrigger: InputChangeTriggerAction) => void;\n    /**\n     * Custom renderer for item content.\n     */\n    renderItemContent?: (props: SelectOptionContentProps<TItem>) => ReactNode;\n    /**\n     * Placeholder to show in search field.\n     */\n    searchPlaceholder?: string;\n    /**\n     * Whether to show icon for help text.\n     */\n    showHelpTextIcon?: boolean;\n    /**\n     * Size of the element.\n     */\n    size?: Size.md | Size.sm | Size.xs;\n    /**\n     * Icon that will be rendered at the start of toggle button.\n     */\n    startIconName?: IconName;\n    /**\n     * Text to show when popover is closed and isSearchable.\n     */\n    text?: string;\n    /**\n     * Selected value/key.\n     */\n    value?: TItem['value'] | null;\n}\n\nexport function FilterSelect<P extends AnyObject, TItem extends SelectItemBase<TItem>>({\n    changeCallback,\n    changeParams,\n    className,\n    disabledKeys,\n    expandedKeys,\n    helpText,\n    isClearable = true,\n    isDisabled,\n    isLoading,\n    isSelectable = true,\n    isSkeleton,\n    itemClassName,\n    items,\n    label,\n    menuWidth,\n    onBottomLoaderVisible,\n    onInputChange: propsOnInputChange,\n    ref,\n    renderItemContent,\n    searchPlaceholder,\n    showHelpTextIcon,\n    size = Size.md,\n    startIconName,\n    text,\n    value\n}: FilterSelectProps<P, TItem>) {\n    const translateCommon = useTranslateCommon();\n    const localFilter = useFilter({sensitivity: 'base'});\n    const triggerRef = useRef<HTMLButtonElement>(null);\n    const menuRef = useRef<HTMLDivElement>(null);\n    const [selectedItem, setSelectedItem] = useState<TItem | null>(\n        value && text ? ({value, text} as unknown as TItem) : null\n    );\n    const [inputValue, setInputValue] = useState('');\n    const [isOpen, setIsOpen] = useState(false);\n    const {highlightedIndex, onHighlightedIndexChange, highlightSource} = useSelectItemHighlight();\n    const [filteredItems, setFilteredItems] = useState<TItem[] | null>(null);\n    const itemsToRender = (filteredItems ?? items).slice();\n    const flatItems = createFlatSelectItemList(itemsToRender, false, expandedKeys);\n\n    const onInputChange = (val: string) => {\n        setInputValue(val);\n        safeCall(propsOnInputChange, val, InputChangeTriggerAction.Input);\n\n        if (!propsOnInputChange) {\n            setFilteredItems(val ? filterItems(items, val, localFilter) : null);\n        }\n    };\n\n    const onSelectionChange = (newSelectedItem: TItem | null) => {\n        setSelectedItem(newSelectedItem);\n\n        if (newSelectedItem) {\n            safeCall(changeCallback, {...changeParams, ...newSelectedItem} as P & SelectChangeItem<TItem>);\n        } else {\n            safeCall(changeCallback, {...changeParams, value: null} as P & SelectChangeItem<TItem>);\n        }\n    };\n\n    useScrollToSelectedOption({isLoading, isOpen, menuRef});\n\n    useEffect(() => {\n        if (selectedItem?.value !== (value ?? undefined) || selectedItem?.text !== text) {\n            setSelectedItem(value && text ? ({value, text} as unknown as TItem) : null);\n        }\n    }, [value, text]);\n\n    useSelectOptionCountAnnouncement({isOpen, itemCount: itemsToRender.length});\n\n    const {\n        getToggleButtonProps,\n        getLabelProps,\n        getMenuProps,\n        getInputProps,\n        getItemProps,\n        openMenu,\n        closeMenu,\n        selectItem\n    } = useCombobox({\n        highlightedIndex,\n        selectedItem,\n        inputValue,\n        isOpen,\n        items: flatItems,\n        itemToString: (item) => (item ? item.text : ''),\n        isItemDisabled: (item) => (item ? !!disabledKeys?.includes(item.value) : false),\n        onHighlightedIndexChange,\n        onSelectedItemChange: ({selectedItem: newSelectedItem}) => {\n            onSelectionChange(newSelectedItem ?? null);\n        },\n        onIsOpenChange: ({isOpen: newIsOpen}) => {\n            if (!isSelectable) {\n                return;\n            }\n\n            if (newIsOpen) {\n                // Clear filtering on open\n                safeCall(propsOnInputChange, '', InputChangeTriggerAction.Focus);\n                setInputValue('');\n                setFilteredItems(null);\n            }\n\n            setIsOpen(newIsOpen);\n        },\n        stateReducer: (state, actionAndChanges) => {\n            const {changes, type} = actionAndChanges;\n\n            // eslint-disable-next-line sonarjs/no-small-switch\n            switch (type) {\n                case useCombobox.stateChangeTypes.InputBlur:\n                    // Keep the current state on input blur (out-click, Tab etc.)\n                    return {\n                        ...changes,\n                        selectedItem: state.selectedItem,\n                        inputValue: state.inputValue,\n                        highlightedIndex: state.highlightedIndex,\n                        isOpen: true\n                    };\n                default:\n                    return changes;\n            }\n        }\n    });\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {onClick, onPress, ...toggleButtonProps} = getToggleButtonProps();\n    const inputProps = getInputProps({}, {suppressRefError: true});\n    const menuProps = getMenuProps({ref: menuRef}, {suppressRefError: true});\n    const labelProps = getLabelProps();\n\n    return (\n        <>\n            <FilterButton\n                className={classNames('filter-select', className)}\n                clearButtonProps={{onPress: () => selectItem(null)}}\n                helpText={helpText}\n                isActive={!!selectedItem}\n                isDisabled={isDisabled}\n                isFocusable={isSelectable}\n                isOpen={isOpen}\n                isSkeleton={isSkeleton}\n                label={label}\n                labelProps={{...labelProps, htmlFor: [labelProps.htmlFor, toggleButtonProps.id].join(' ')}}\n                onOpenChange={(newIsOpen) => (newIsOpen ? openMenu() : closeMenu())}\n                ref={ref}\n                showClearButton={isClearable}\n                showHelpTextIcon={showHelpTextIcon}\n                size={size}\n                startIconName={startIconName}\n                toggleButtonProps={{\n                    ...toggleButtonProps,\n                    ref: triggerRef\n                }}>\n                <>\n                    {label}\n                    {selectedItem && `: ${selectedItem.text}`}\n                </>\n            </FilterButton>\n            <Popover\n                className=\"filter-select__popover\"\n                isOpen={isOpen}\n                maxHeight={375}\n                onOpenChange={closeMenu}\n                placement=\"bottom start\"\n                shouldFlip={true}\n                style={{width: menuWidth ?? '250px'}}\n                triggerRef={triggerRef}>\n                <Dialog aria-label={label} className=\"filter-select__dialog\">\n                    <div className=\"filter-select__menu\">\n                        <div className=\"filter-select__menu-header\">\n                            <SearchField\n                                {...inputProps}\n                                aria-label={translateCommon('search')}\n                                autoFocus={true}\n                                onChange={onInputChange}\n                                placeholder={searchPlaceholder ?? translateCommon('search')}\n                                size={size}\n                            />\n                        </div>\n                        <div {...menuProps} className=\"filter-select__menu-body\">\n                            {itemsToRender.length === 0 && !isLoading && (\n                                <SelectOptionsEmptyState key=\"empty\" size={size} />\n                            )}\n                            {renderSelectItems({\n                                createText: '',\n                                disabledKeys,\n                                expandedKeys,\n                                getItemProps,\n                                highlightedIndex,\n                                highlightSource,\n                                itemClassName,\n                                items: itemsToRender,\n                                renderItemContent,\n                                selectedItem,\n                                size\n                            })}\n                            {isLoading && <LoadingItem key=\"loading\" size={size} />}\n                            {onBottomLoaderVisible && <BottomLoader key=\"loader\" onVisible={onBottomLoaderVisible} />}\n                        </div>\n                    </div>\n                </Dialog>\n            </Popover>\n        </>\n    );\n}\n"]}