{"version":3,"file":"renderselectitems.js","sourceRoot":"","sources":["../../../../src/components/inputs/select/renderselectitems.tsx"],"names":[],"mappings":"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","sourcesContent":["import {ReactNode} from 'react';\nimport {Label} from '../../text/index.js';\nimport {Size} from '../../../constants/index.js';\nimport {Icon, iconNames} from '../../media/index.js';\nimport {SelectOption} from './selectoption.js';\nimport {isFunction} from '../../../utils/functionhelper.js';\nimport {SpecialSelectItemKey} from './specialselectitemkey.js';\nimport {Divider} from '../../datadisplay/index.js';\nimport {SelectItemBase} from './selectitem.js';\nimport {UseComboboxReturnValue, UseSelectReturnValue} from 'downshift';\nimport {SelectOptionContent} from './selectoptioncontent.js';\nimport {SelectOptionContentProps} from './selectoptioncontentprops.js';\nimport {InteractionSource} from '../../../constants/interactionsource.js';\n\nexport function renderSelectItems<TItem extends SelectItemBase<TItem>>({\n    createText,\n    disabledKeys,\n    expandedKeys,\n    getItemProps,\n    highlightedIndex,\n    highlightSource,\n    itemClassName,\n    items,\n    renderItemContent,\n    selectedItem,\n    size\n}: {\n    createText: string | ((text: string) => ReactNode);\n    disabledKeys?: Array<TItem['value']>;\n    expandedKeys?: Set<TItem['value']>;\n    getItemProps:\n        | UseComboboxReturnValue<SelectItemBase<TItem>>['getItemProps']\n        | UseSelectReturnValue<SelectItemBase<TItem>>['getItemProps'];\n    highlightedIndex: number;\n    highlightSource?: InteractionSource;\n    itemClassName?: string | ((item: TItem) => string);\n    items: TItem[];\n    renderItemContent?: (props: SelectOptionContentProps<TItem>) => ReactNode;\n    selectedItem?: TItem | null;\n    size: Size.md | Size.sm | Size.xs;\n}) {\n    let itemIndex = 0;\n\n    const renderItem = (item: TItem, level: number) => {\n        const itemValue = item.value;\n        const isSelected = itemValue === selectedItem?.value;\n\n        return (\n            <SelectOption\n                disabledKeys={disabledKeys}\n                getItemProps={getItemProps}\n                highlightSource={highlightSource}\n                isFocused={highlightedIndex === itemIndex}\n                isSelected={isSelected}\n                item={item}\n                itemClassName={itemClassName}\n                itemIndex={itemIndex}\n                key={itemValue}\n                level={level}\n                renderItemContent={renderItemContent}\n                size={size}\n            />\n        );\n    };\n\n    const renderItems = (itemArr: TItem[], level: number) => {\n        const itemNodes: ReactNode[] = [];\n\n        for (let i = 0, len = itemArr.length; i < len; i++) {\n            const item = itemArr[i];\n            const itemValue = item.value;\n            const itemText = item.text;\n            const subItems = item.items;\n            const {children, hasSeparator} = item;\n\n            if (subItems) {\n                if (level > 0) {\n                    throw new Error('Sub-items are only supported on root level.');\n                }\n                itemNodes.push(\n                    <section key={itemValue}>\n                        <header className=\"select-header\">\n                            <Label size={Size.sm}>{itemText}</Label>\n                        </header>\n                        {renderItems(subItems, level)}\n                    </section>\n                );\n            } else if (children) {\n                itemNodes.push(renderItem(item, level));\n                itemIndex++;\n                if (expandedKeys?.has(itemValue) !== false) {\n                    itemNodes.push(...renderItems(children, level + 1));\n                }\n            } else if (itemValue === SpecialSelectItemKey.CREATABLE) {\n                itemNodes.push(\n                    <SelectOption\n                        getItemProps={getItemProps}\n                        isFocused={highlightedIndex === itemIndex}\n                        item={item}\n                        itemIndex={itemIndex}\n                        key={itemValue}\n                        level={level}\n                        renderItemContent={(optionContentProps) => (\n                            <SelectOptionContent\n                                {...optionContentProps}\n                                bodyPrefix={\n                                    <Icon className=\"select-option__start-icon\" name={iconNames.AddCircleFilled} />\n                                }\n                                label={\n                                    <Label size={size === Size.xs ? Size.md : Size.lg}>\n                                        {isFunction(createText) ? createText(itemText) : createText}\n                                    </Label>\n                                }\n                            />\n                        )}\n                        size={size}\n                    />\n                );\n                itemIndex++;\n            } else {\n                itemNodes.push(renderItem(item, level));\n                itemIndex++;\n            }\n\n            if (hasSeparator) {\n                itemNodes.push(<Divider key={`${itemValue}--separator`} size={Size.sm} />);\n            }\n        }\n\n        return itemNodes;\n    };\n\n    return renderItems(items, 0);\n}\n"]}