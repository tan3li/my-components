{"version":3,"file":"textfieldvisibilitytoggle.js","sourceRoot":"","sources":["../../../../src/components/inputs/textfield/textfieldvisibilitytoggle.tsx"],"names":[],"mappings":";;AAAA,OAAO,EAAC,IAAI,EAAC,MAAM,0BAA0B,CAAC;AAC9C,OAAO,EAAC,SAAS,EAAC,MAAM,2BAA2B,CAAC;AACpD,OAAO,EAAC,KAAK,EAAC,MAAM,2BAA2B,CAAC;AAChD,OAAO,EAAC,IAAI,EAAC,MAAM,4BAA4B,CAAC;AAChD,OAAO,EAAgB,mBAAmB,EAAE,MAAM,EAAC,MAAM,OAAO,CAAC;AACjE,OAAO,EAAC,SAAS,EAAC,MAAM,YAAY,CAAC;AACrC,OAAO,EAAC,kBAAkB,EAAC,MAAM,mDAAmD,CAAC;AAOrF,MAAM,UAAU,yBAAyB,CAAC,EAAmE;QAAlE,SAAS,eAAA,EAAE,OAAO,aAAA,EAAO,QAAQ,SAAA;IACxE,IAAM,eAAe,GAAG,kBAAkB,EAAE,CAAC;IAC7C,IAAM,GAAG,GAAG,MAAM,CAAiB,IAAI,CAAC,CAAC;IAClC,IAAA,WAAW,GAAI,SAAS,CAC3B;QACI,OAAO,SAAA;QACP,WAAW,EAAE,KAAK;KACrB,EACD,GAAG,CACN,YANiB,CAMhB;IAEF,mBAAmB,CAAC,QAAQ,EAAE,cAAM,OAAA,GAAG,CAAC,OAAQ,EAAZ,CAAY,EAAE,EAAE,CAAC,CAAC;IAEtD,OAAO,CACH,0BAAS,WAAW,IAAE,SAAS,EAAC,oBAAoB,EAAC,GAAG,EAAE,GAAG,iBACzD,KAAC,IAAI,IAAC,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC,SAAS,CAAC,UAAU,GAAI,EAC1E,KAAC,KAAK,aAAC,IAAI,EAAE,IAAI,CAAC,EAAE,gBAAG,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,IAAS,KAC1E,CACT,CAAC;AACN,CAAC","sourcesContent":["import {Icon} from '../../media/icon/icon.js';\nimport {iconNames} from '../../media/icon/icons.js';\nimport {Label} from '../../text/label/label.js';\nimport {Size} from '../../../constants/size.js';\nimport {RefAttributes, useImperativeHandle, useRef} from 'react';\nimport {useButton} from 'react-aria';\nimport {useTranslateCommon} from '../../../hooks/translations/usetranslatecommon.js';\n\nexport interface TextFieldVisibilityToggleProps extends RefAttributes<HTMLDivElement> {\n    isVisible: boolean;\n    onPress: () => void;\n}\n\nexport function TextFieldVisibilityToggle({isVisible, onPress, ref: outerRef}: TextFieldVisibilityToggleProps) {\n    const translateCommon = useTranslateCommon();\n    const ref = useRef<HTMLDivElement>(null);\n    const {buttonProps} = useButton(\n        {\n            onPress,\n            elementType: 'div'\n        },\n        ref\n    );\n\n    useImperativeHandle(outerRef, () => ref.current!, []);\n\n    return (\n        <div {...buttonProps} className=\"text-field__action\" ref={ref}>\n            <Icon name={isVisible ? iconNames.VisibilityOff : iconNames.Visibility} />\n            <Label size={Size.lg}>{translateCommon(isVisible ? 'hide' : 'show')}</Label>\n        </div>\n    );\n}\n"]}