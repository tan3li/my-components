{"version":3,"file":"togglebutton.js","sourceRoot":"","sources":["../../../../src/components/inputs/togglebutton/togglebutton.tsx"],"names":[],"mappings":"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","sourcesContent":["import {ReactNode, RefAttributes} from 'react';\nimport {Radio, RadioGroup, RadioGroupProps} from 'react-aria-components';\nimport {AnyObject, ChangeArgs, useChangeParamsCallback} from '../../../hooks/usechangeparamscallback.js';\nimport {TDataState} from '../../../constants/datastate.js';\nimport {Size} from '../../../constants/index.js';\nimport {Label, TooltipContent} from '../../text/index.js';\nimport {classNames} from '../../../utils/classnames.js';\nimport {Field} from '../common/field/field.js';\nimport {chain} from 'react-aria';\nimport {useDataState} from '../../../hooks/usedatastate.js';\nimport {SkeletonField} from '../../feedback/skeleton/skeletonfield.js';\n\nexport interface ToggleButtonItem {\n    isDisabled?: boolean;\n    text: string;\n    value: string;\n}\n\nexport interface ToggleButtonProps<P extends AnyObject>\n    extends Omit<RadioGroupProps, 'children'>,\n        RefAttributes<HTMLDivElement> {\n    /**\n     * Handler that is called with object containing selection state value and changeParams when the element's selection state changes.\n     */\n    changeCallback?: (args: ChangeArgs<P, string>) => void;\n    /**\n     * Object which is provided with element's selection state value property in changeCallback.\n     */\n    changeParams?: P;\n    /**\n     * Map that contains model property states with messages.\n     */\n    dataState?: Map<TDataState, string> | null;\n    /**\n     * Help text to provide more information.\n     */\n    helpText?: ReactNode;\n    /**\n     * Help text to show in success style.\n     */\n    helpTextSuccess?: ReactNode;\n    /**\n     * Whether to show skeleton instead of an actual element.\n     */\n    isSkeleton?: boolean;\n    /**\n     * Selectable items.\n     */\n    items: ToggleButtonItem[];\n    /**\n     * Label for the element.\n     */\n    label: ReactNode;\n    /**\n     * Whether to show icon for help text.\n     */\n    showHelpTextIcon?: boolean;\n    /**\n     * Size of the element.\n     */\n    size?: Size.xs | Size.sm | Size.md;\n    /**\n     * Label tooltip content.\n     */\n    tooltipContent?: TooltipContent;\n}\n\nexport function ToggleButton<P extends AnyObject>({\n    changeCallback,\n    changeParams,\n    className,\n    dataState,\n    helpText,\n    helpTextSuccess,\n    isDisabled,\n    isInvalid,\n    isRequired,\n    isSkeleton,\n    items,\n    label,\n    onChange,\n    showHelpTextIcon,\n    size = Size.sm,\n    tooltipContent,\n    ...props\n}: ToggleButtonProps<P>) {\n    const changeParamsCb = useChangeParamsCallback(changeParams, changeCallback);\n    const {hasError, isReadOnly, errorMessage} = useDataState(dataState, isInvalid, props.isReadOnly);\n    const labelSize = size === Size.xs ? Size.sm : Size.md;\n\n    if (isSkeleton) {\n        const hasAnyHelpText = !!errorMessage || !!helpTextSuccess || !!helpText;\n\n        return (\n            <SkeletonField\n                className=\"skeleton-toggle-button\"\n                hasHelpText={hasAnyHelpText}\n                hasLabel={!!label}\n                size={size}\n            />\n        );\n    }\n\n    return (\n        <RadioGroup\n            {...props}\n            className={classNames(`toggle-button toggle-button--${size}`, className)}\n            isDisabled={isDisabled}\n            isInvalid={hasError}\n            isReadOnly={isReadOnly}\n            isRequired={isRequired}\n            onChange={chain(onChange, changeParamsCb)}>\n            <Field\n                dataState={dataState}\n                helpText={helpText}\n                helpTextSuccess={helpTextSuccess}\n                isDisabled={isDisabled}\n                isInvalid={isInvalid}\n                isRequired={isRequired}\n                label={label}\n                showHelpTextIcon={showHelpTextIcon}\n                size={labelSize}\n                tooltipContent={tooltipContent}>\n                <div className=\"toggle-button__options\">\n                    {items.map(({isDisabled: isItemDisabled, value, text}) => (\n                        <Radio className=\"toggle-button__option\" isDisabled={isItemDisabled} key={value} value={value}>\n                            <Label size={labelSize}>{text}</Label>\n                        </Radio>\n                    ))}\n                </div>\n            </Field>\n        </RadioGroup>\n    );\n}\n"]}