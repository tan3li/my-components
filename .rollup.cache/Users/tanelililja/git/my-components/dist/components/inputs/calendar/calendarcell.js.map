{"version":3,"file":"calendarcell.js","sourceRoot":"","sources":["../../../../src/components/inputs/calendar/calendarcell.tsx"],"names":[],"mappings":";;AACA,OAAO,EAAe,SAAS,EAAE,KAAK,EAAC,MAAM,yBAAyB,CAAC;AACvE,OAAO,EAAY,MAAM,EAAC,MAAM,OAAO,CAAC;AACxC,OAAO,EAAC,eAAe,EAAC,MAAM,YAAY,CAAC;AAC3C,OAAO,EAAC,UAAU,EAAC,MAAM,4BAA4B,CAAC;AACtD,OAAO,EAAC,UAAU,EAAkB,MAAM,4BAA4B,CAAC;AAqBvE,MAAM,UAAU,YAAY,CAAC,EAAoF;QAAnF,IAAI,UAAA,EAAE,wBAAwB,8BAAA,EAAE,SAAS,eAAA,EAAE,aAAa,mBAAA,EAAE,KAAK,WAAA;IACzF,IAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;IAClB,IAAA,QAAQ,GAAI,UAAU,EAAE,SAAhB,CAAiB;IAC1B,IAAA,KASF,eAAe,CAAC,EAAC,IAAI,MAAA,EAAC,EAAE,KAAK,EAAE,GAAG,CAAC,EARnC,SAAS,eAAA,EACT,WAAW,iBAAA,EACX,aAAa,mBAAA,EACb,UAAU,gBAAA,EACV,SAAS,eAAA,EACT,UAAU,gBAAA,EACV,qBAAqB,2BAAA,EACrB,aAAa,mBACsB,CAAC;IACxC,IAAM,OAAO,GAAG,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;IACjD,IAAM,eAAe,yBACd,WAAW,KACd,QAAQ,EAAE,aAAa,EACvB,UAAU,EAAE,UAAU,IAAI,qBAAqB,EAC/C,SAAS,WAAA,EACT,aAAa,EAAE,IAAI,EACnB,UAAU,EAAE,CAAC,CAAC,wBAAwB,IAAI,UAAU,EACpD,OAAO,SAAA,EACP,aAAa,eAAA,EACb,GAAG,KAAA,GACN,CAAC;IACI,IAAA,KAA4C,SAAS,aAAT,SAAS,cAAT,SAAS,GAAI,EAAE,EAA1D,SAAS,eAAA,EAAE,cAAc,oBAAA,EAAE,YAAY,kBAAmB,CAAC;IAClE,IAAI,OAAkB,CAAC;IAEvB,IAAI,aAAa,EAAE;QACf,OAAO,GAAG,aAAa,CAAC;YACpB,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE;YACrB,eAAe,iBAAA;SAClB,CAAC,CAAC;KACN;SAAM;QACH,OAAO,GAAG,KAAC,UAAU,eAAK,eAAe,EAAI,CAAC;KACjD;IAED,OAAO,CACH,wBACQ,SAAS,IACb,SAAS,EAAC,qBAAqB,mBAChB,CAAC,CAAC,SAAS,IAAI,SAAS,oBACvB,CAAC,CAAC,YAAY,IAAI,SAAS,sBACzB,CAAC,CAAC,cAAc,IAAI,SAAS,gBAC/C,uBAAK,SAAS,EAAC,6BAA6B,gBAAE,OAAO,IAAO,IAC3D,CACR,CAAC;AACN,CAAC","sourcesContent":["import {CalendarState} from 'react-stately';\nimport {CalendarDate, isSameDay, today} from '@internationalized/date';\nimport {ReactNode, useRef} from 'react';\nimport {useCalendarCell} from 'react-aria';\nimport {useLocales} from '../../../contexts/index.js';\nimport {DayOfMonth, DayOfMonthProps} from '../../datadisplay/index.js';\n\ninterface RenderContentProps {\n    date: string;\n    dayOfMonthProps: DayOfMonthProps;\n}\n\ninterface CalendarCellRangeInfo {\n    isEndOfRange?: boolean;\n    isInRange: boolean;\n    isStartOfRange?: boolean;\n}\n\nexport interface CalendarCellProps {\n    date: CalendarDate;\n    isSelectedAsRelatedValue?: boolean;\n    rangeInfo?: CalendarCellRangeInfo;\n    renderContent?: (props: RenderContentProps) => ReactNode;\n    state: CalendarState;\n}\n\nexport function CalendarCell({date, isSelectedAsRelatedValue, rangeInfo, renderContent, state}: CalendarCellProps) {\n    const ref = useRef(null);\n    const {timeZone} = useLocales();\n    const {\n        cellProps,\n        buttonProps,\n        formattedDate,\n        isSelected,\n        isFocused,\n        isDisabled,\n        isOutsideVisibleRange,\n        isUnavailable\n    } = useCalendarCell({date}, state, ref);\n    const isToday = isSameDay(date, today(timeZone));\n    const dayOfMonthProps = {\n        ...buttonProps,\n        children: formattedDate,\n        isDisabled: isDisabled || isOutsideVisibleRange,\n        isFocused,\n        isInteractive: true,\n        isSelected: !!isSelectedAsRelatedValue || isSelected,\n        isToday,\n        isUnavailable,\n        ref\n    };\n    const {isInRange, isStartOfRange, isEndOfRange} = rangeInfo ?? {};\n    let content: ReactNode;\n\n    if (renderContent) {\n        content = renderContent({\n            date: date.toString(),\n            dayOfMonthProps\n        });\n    } else {\n        content = <DayOfMonth {...dayOfMonthProps} />;\n    }\n\n    return (\n        <td\n            {...cellProps}\n            className=\"calendar-grid__cell\"\n            data-in-range={!!isInRange || undefined}\n            data-range-end={!!isEndOfRange || undefined}\n            data-range-start={!!isStartOfRange || undefined}>\n            <div className=\"calendar-grid__cell-content\">{content}</div>\n        </td>\n    );\n}\n"]}