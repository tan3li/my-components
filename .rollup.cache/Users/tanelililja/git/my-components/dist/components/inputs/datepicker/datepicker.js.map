{"version":3,"file":"datepicker.js","sourceRoot":"","sources":["../../../../src/components/inputs/datepicker/datepicker.tsx"],"names":[],"mappings":";;AAAA,OAAO,EACH,MAAM,EACN,SAAS,EACT,UAAU,IAAI,mBAAmB,EAEjC,WAAW,EAEX,MAAM,EACN,KAAK,EACL,OAAO,EACV,MAAM,uBAAuB,CAAC;AAC/B,OAAO,EAAC,IAAI,EAAC,MAAM,6BAA6B,CAAC;AACjD,OAAO,EAAC,KAAK,EAAC,MAAM,0BAA0B,CAAC;AAE/C,OAAO,EAA2B,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAC,MAAM,OAAO,CAAC;AAC5E,OAAO,EAAC,uBAAuB,EAAE,uBAAuB,EAAiB,MAAM,qBAAqB,CAAC;AACrG,OAAO,EAAC,YAAY,EAAC,MAAM,gCAAgC,CAAC;AAC5D,OAAO,EAAC,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAC,MAAM,sBAAsB,CAAC;AAC/D,OAAO,EAAC,UAAU,EAAC,MAAM,8BAA8B,CAAC;AACxD,OAAO,EAAC,QAAQ,EAAgB,MAAM,sBAAsB,CAAC;AAC7D,OAAO,EAAC,kBAAkB,EAAC,MAAM,mDAAmD,CAAC;AACrF,OAAO,EAAC,YAAY,EAAC,MAAM,6BAA6B,CAAC;AAEzD,OAAO,EAAC,QAAQ,EAAC,MAAM,kCAAkC,CAAC;AAC1D,OAAO,EAAC,UAAU,EAAC,MAAM,4BAA4B,CAAC;AACtD,OAAO,EAAC,YAAY,EAAC,MAAM,YAAY,CAAC;AACxC,OAAO,EAAC,cAAc,EAAC,MAAM,qBAAqB,CAAC;AACnD,OAAO,EAAC,WAAW,EAAC,MAAM,uBAAuB,CAAC;AAClD,OAAO,EAAC,WAAW,EAAC,MAAM,gCAAgC,CAAC;AAC3D,OAAO,EAAC,aAAa,EAAC,MAAM,0CAA0C,CAAC;AAkFvE,MAAM,UAAU,UAAU,CAAsB,EAqB3B;;IApBjB,IAAA,aAAa,mBAAA,EACb,cAAc,oBAAA,EACd,YAAY,kBAAA,EACZ,SAAS,eAAA,EACT,SAAS,eAAA,EACT,QAAQ,cAAA,EACR,eAAe,qBAAA,EACH,eAAe,gBAAA,EAC3B,UAAU,gBAAA,EACV,UAAU,gBAAA,EACV,KAAK,WAAA,EACL,QAAQ,cAAA,EACR,QAAQ,cAAA,EACR,YAAY,kBAAA,EACZ,uBAAsB,EAAtB,eAAe,mBAAG,IAAI,KAAA,EACtB,gBAAgB,sBAAA,EAChB,YAAc,EAAd,IAAI,mBAAG,IAAI,CAAC,EAAE,KAAA,EACd,cAAc,oBAAA,EACd,KAAK,WAAA,EACF,KAAK,cApBoC,iRAqB/C,CADW;IAED,IAAA,UAAU,GAAe,KAAK,WAApB,EAAE,SAAS,GAAI,KAAK,UAAT,CAAU;IAChC,IAAA,KAAoC,QAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,EAAhE,aAAa,QAAA,EAAE,gBAAgB,QAAiC,CAAC;IAClE,IAAA,KAAsC,QAAQ,CAAC,KAAK,CAAC,EAApD,cAAc,QAAA,EAAE,iBAAiB,QAAmB,CAAC;IACtD,IAAA,KAAuC,YAAY,CAAC,SAAS,EAAE,SAAS,EAAE,eAAe,CAAC,EAAzF,QAAQ,cAAA,EAAE,UAAU,gBAAA,EAAE,YAAY,kBAAuD,CAAC;IACjG,IAAM,eAAe,GAAG,kBAAkB,EAAE,CAAC;IACvC,IAAA,KAAkC,UAAU,EAAE,EAA7C,aAAa,mBAAA,EAAE,cAAc,oBAAgB,CAAC;IACrD,IAAM,eAAe,GAAG,MAAM,CAAiB,IAAI,CAAC,CAAC;IAErD,IAAM,QAAQ,GAAG,UAAC,IAAsB;;QACpC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,QAAQ,EAAE,OAAK,MAAA,YAAY,CAAC,KAAK,CAAC,0CAAE,QAAQ,EAAE,CAAA,EAAE;YAC7E,OAAO;SACV;QACD,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QAC/B,QAAQ,CAAC,cAAc,EAAE,sBAAI,YAAY,KAAE,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,IAAI,GAG9E,CAAC,CAAC;IACP,CAAC,CAAC;IAEF,SAAS,CAAC;QACN,gBAAgB,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;IAC1C,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IAEZ,IAAI,UAAU,EAAE;QACZ,IAAM,cAAc,GAAG,CAAC,CAAC,YAAY,IAAI,CAAC,CAAC,eAAe,IAAI,CAAC,CAAC,QAAQ,CAAC;QAEzE,OAAO,CACH,KAAC,aAAa,IACV,SAAS,EAAC,qBAAqB,EAC/B,WAAW,EAAE,cAAc,EAC3B,QAAQ,EAAE,CAAC,CAAC,KAAK,EACjB,IAAI,EAAE,IAAI,GACZ,CACL,CAAC;KACL;IAED,OAAO,CACH,MAAC,mBAAmB,eACZ,KAAK,IACT,SAAS,EAAE,UAAU,CAAC,YAAY,EAAE,SAAS,CAAC,EAC9C,SAAS,EAAE,QAAQ,EACnB,UAAU,EAAE,UAAU,EACtB,UAAU,EAAE,UAAU,EACtB,QAAQ,EAAE,MAAA,YAAY,CAAC,QAAQ,CAAC,mCAAI,SAAS,EAC7C,QAAQ,EAAE,MAAA,YAAY,CAAC,QAAQ,CAAC,mCAAI,SAAS,EAC7C,MAAM,EAAE;YACJ,QAAQ,CAAC,aAAa,CAAC,CAAC;QAC5B,CAAC,EACD,QAAQ,EAAE,UAAC,IAAI;YACX,gBAAgB,CAAC,IAAI,CAAC,CAAC;YAEvB,IAAI,cAAc,EAAE;gBAChB,QAAQ,CAAC,IAAI,CAAC,CAAC;aAClB;QACL,CAAC,EACD,YAAY,EAAE,iBAAiB,EAC/B,KAAK,EAAE,aAAa,iBACpB,KAAC,KAAK,aACF,SAAS,EAAE,SAAS,EACpB,QAAQ,EAAE,QAAQ,EAClB,eAAe,EAAE,eAAe,EAChC,UAAU,EAAE,UAAU,EACtB,SAAS,EAAE,QAAQ,EACnB,UAAU,EAAE,UAAU,EACtB,KAAK,EAAE,KAAK,EACZ,gBAAgB,EAAE,gBAAgB,EAClC,IAAI,EAAE,IAAI,KAAK,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,EAC1C,cAAc,EAAE,cAAc,gBAC9B,MAAC,KAAK,aAAC,SAAS,EAAE,qDAA8C,IAAI,CAAE,iBAClE,KAAC,YAAY,aAAC,MAAM,EAAE,aAAa,gBAC/B,KAAC,SAAS,aAAC,SAAS,EAAC,mBAAmB,gBACnC,UAAC,OAAO,IAAK,OAAA;gCACV,yFAAyF;gCACzF,KAAC,YAAY,aAAC,MAAM,EAAE,cAAc,gBAChC,uBACI,GAAG,EAAE,UAAC,IAAI;;4CACN,IAAI,IAAI,IAAI,CAAA,MAAA,IAAI,CAAC,UAAU,0CAAE,UAAU,MAAK,IAAI,EAAE;gDAC9C,eAAe,CAAC,OAAO,GAAG,IAAI,CAAC,UAA4B,CAAC;6CAC/D;wCACL,CAAC,gBACD,KAAC,WAAW,aACR,SAAS,EAAE,8BAAuB,IAAI,KAAK,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC,uBAAuB,CAAE,EACxG,OAAO,EAAE,OAAO,gBACf,OAAO,CAAC,aAAa,CAAC,CAAC;gDACpB,cAAc,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,EAAE,cAAc,CAAC;gDAC9D,CAAC,CAAG,OAAO,CAAC,IAAI,IACN,IACZ,IACK,CAClB,EAlBa,CAkBb,IACO,IACD,EACf,wBAAK,SAAS,EAAC,qBAAqB,iBAC/B,eAAe,IAAI,CAAC,UAAU,IAAI,CAAC,UAAU,IAAI,aAAa,IAAI,CAC/D,KAAC,WAAW,IACR,SAAS,EAAC,0BAA0B,EACpC,OAAO,EAAE;;wCACL,gBAAgB,CAAC,IAAI,CAAC,CAAC;wCACvB,QAAQ,CAAC,IAAI,CAAC,CAAC;wCACf,MAAA,eAAe,CAAC,OAAO,0CAAE,KAAK,EAAE,CAAC;oCACrC,CAAC,EACD,IAAI,EAAE,IAAI,GACZ,CACL,EACD,KAAC,MAAM,2BAAa,eAAe,CAAC,gBAAgB,CAAC,EAAE,SAAS,EAAC,oBAAoB,gBACjF,KAAC,IAAI,IAAC,IAAI,EAAE,SAAS,CAAC,QAAQ,EAAE,IAAI,EAAE,QAAQ,CAAC,EAAE,GAAI,IAChD,KACP,KACF,IACJ,EACR,KAAC,OAAO,aAAC,SAAS,EAAC,qBAAqB,EAAC,SAAS,EAAC,aAAa,gBAC5D,KAAC,MAAM,aAAC,SAAS,EAAC,oBAAoB,gBAClC,KAAC,QAAQ,eAAK,aAAa,IAAE,YAAY,EAAE,YAAY,IAAI,IACtD,IACH,KACQ,CACzB,CAAC;AACN,CAAC","sourcesContent":["import {\n    Button,\n    DateInput,\n    DatePicker as ReactAriaDatePicker,\n    DatePickerProps as ReactAriaDatePickerProps,\n    DateSegment,\n    DateValue,\n    Dialog,\n    Group,\n    Popover\n} from 'react-aria-components';\nimport {Size} from '../../../constants/index.js';\nimport {Field} from '../common/field/field.js';\nimport {TDataState} from '../../../constants/datastate.js';\nimport {ReactNode, RefAttributes, useEffect, useRef, useState} from 'react';\nimport {LABEL_SIZE_LG_CSS_CLASS, LABEL_SIZE_MD_CSS_CLASS, TooltipContent} from '../../text/index.js';\nimport {useDataState} from '../../../hooks/usedatastate.js';\nimport {Icon, iconNames, IconSize} from '../../media/index.js';\nimport {classNames} from '../../../utils/classnames.js';\nimport {Calendar, CalendarProps} from '../calendar/index.js';\nimport {useTranslateCommon} from '../../../hooks/translations/usetranslatecommon.js';\nimport {getDateValue} from '../calendar/getdatevalue.js';\nimport {ChangeArgs, AnyObject} from '../../../hooks/usechangeparamscallback.js';\nimport {safeCall} from '../../../utils/functionhelper.js';\nimport {useLocales} from '../../../contexts/index.js';\nimport {I18nProvider} from 'react-aria';\nimport {getPlaceholder} from './getplaceholder.js';\nimport {ClearButton} from '../../action/index.js';\nimport {isUndefined} from '../../../utils/objecthelper.js';\nimport {SkeletonField} from '../../feedback/skeleton/skeletonfield.js';\n\nexport interface DatePickerProps<P extends AnyObject>\n    extends Omit<ReactAriaDatePickerProps<DateValue>, 'value' | 'minValue' | 'maxValue' | 'defaultValue'>,\n        RefAttributes<HTMLDivElement> {\n    /**\n     * Props for Calendar component displayed inside popover.\n     */\n    calendarProps?: Omit<\n        CalendarProps,\n        'isDateUnavailable' | 'maxValue' | 'minValue' | 'onChange' | 'relatedValue' | 'value'\n    >;\n    /**\n     * Handler that is called with object containing selection state value and changeParams when the element's selection state changes.\n     */\n    changeCallback?: (args: ChangeArgs<P, string | null>) => void;\n    /**\n     * Object which is provided with element's selection state value property in changeCallback.\n     */\n    changeParams?: P;\n    /**\n     * Map that contains model property states with messages.\n     */\n    dataState?: Map<TDataState, string> | null;\n    /**\n     * Additional help text to provide more information.\n     */\n    helpText?: ReactNode;\n    /**\n     * Additional help text to provide more information on successful action.\n     */\n    helpTextSuccess?: ReactNode;\n    /**\n     * Whether the field is required.\n     */\n    isRequired?: boolean;\n    /**\n     * Whether to show skeleton instead of an actual element.\n     */\n    isSkeleton?: boolean;\n    /**\n     * Label of the element.\n     */\n    label?: string;\n    /**\n     * Maximum date user can select. Can be provided as ISO 8601 date string (YYYY-MM-DD) or DateValue object.\n     */\n    maxValue?: DateValue | string;\n    /**\n     * Minimum date user can select. Can be provided as ISO 8601 date string (YYYY-MM-DD) or DateValue object.\n     */\n    minValue?: DateValue | string;\n    /**\n     * Change callback\n     */\n    onChange?: (date: DateValue | null) => void;\n    /**\n     * Date related to selected value which will create a range between them.\n     */\n    relatedValue?: DateValue | string | null;\n    /**\n     * Whether to show clear button when has selected date. True by default.\n     */\n    showClearButton?: boolean;\n    /**\n     * Whether to show icon for help text.\n     */\n    showHelpTextIcon?: boolean;\n    /**\n     * Size of the element.\n     */\n    size?: Size.xs | Size.sm | Size.md;\n    /**\n     * Tooltip content.\n     */\n    tooltipContent?: TooltipContent;\n    /**\n     * Selected date. Can be provided as ISO 8601 date string (YYYY-MM-DD) or DateValue object.\n     */\n    value?: DateValue | string | null;\n}\n\nexport function DatePicker<P extends AnyObject>({\n    calendarProps,\n    changeCallback,\n    changeParams,\n    className,\n    dataState,\n    helpText,\n    helpTextSuccess,\n    isReadOnly: propsIsReadOnly,\n    isRequired,\n    isSkeleton,\n    label,\n    maxValue,\n    minValue,\n    relatedValue,\n    showClearButton = true,\n    showHelpTextIcon,\n    size = Size.md,\n    tooltipContent,\n    value,\n    ...props\n}: DatePickerProps<P>) {\n    const {isDisabled, isInvalid} = props;\n    const [selectedValue, setSelectedValue] = useState(getDateValue(value));\n    const [isCalendarOpen, setIsCalendarOpen] = useState(false);\n    const {hasError, isReadOnly, errorMessage} = useDataState(dataState, isInvalid, propsIsReadOnly);\n    const translateCommon = useTranslateCommon();\n    const {cultureLocale, languageLocale} = useLocales();\n    const firstSpinBtnRef = useRef<HTMLDivElement>(null);\n\n    const onChange = (date: DateValue | null) => {\n        if (!isUndefined(value) && date?.toString() === getDateValue(value)?.toString()) {\n            return;\n        }\n        safeCall(props.onChange, date);\n        safeCall(changeCallback, {...changeParams, value: date ? date.toString() : null} as ChangeArgs<\n            P,\n            string | null\n        >);\n    };\n\n    useEffect(() => {\n        setSelectedValue(getDateValue(value));\n    }, [value]);\n\n    if (isSkeleton) {\n        const hasAnyHelpText = !!errorMessage || !!helpTextSuccess || !!helpText;\n\n        return (\n            <SkeletonField\n                className=\"skeleton-datepicker\"\n                hasHelpText={hasAnyHelpText}\n                hasLabel={!!label}\n                size={size}\n            />\n        );\n    }\n\n    return (\n        <ReactAriaDatePicker\n            {...props}\n            className={classNames('datepicker', className)}\n            isInvalid={hasError}\n            isReadOnly={isReadOnly}\n            isRequired={isRequired}\n            maxValue={getDateValue(maxValue) ?? undefined}\n            minValue={getDateValue(minValue) ?? undefined}\n            onBlur={() => {\n                onChange(selectedValue);\n            }}\n            onChange={(date) => {\n                setSelectedValue(date);\n\n                if (isCalendarOpen) {\n                    onChange(date);\n                }\n            }}\n            onOpenChange={setIsCalendarOpen}\n            value={selectedValue}>\n            <Field\n                dataState={dataState}\n                helpText={helpText}\n                helpTextSuccess={helpTextSuccess}\n                isDisabled={isDisabled}\n                isInvalid={hasError}\n                isRequired={isRequired}\n                label={label}\n                showHelpTextIcon={showHelpTextIcon}\n                size={size === Size.xs ? Size.sm : Size.md}\n                tooltipContent={tooltipContent}>\n                <Group className={`datepicker__controls datepicker__controls--${size}`}>\n                    <I18nProvider locale={cultureLocale}>\n                        <DateInput className=\"datepicker__input\">\n                            {(segment) => (\n                                // Need to wrap DateSegment with div: https://github.com/adobe/react-spectrum/issues/3164\n                                <I18nProvider locale={languageLocale}>\n                                    <div\n                                        ref={(node) => {\n                                            if (node && node.parentNode?.firstChild === node) {\n                                                firstSpinBtnRef.current = node.firstChild as HTMLDivElement;\n                                            }\n                                        }}>\n                                        <DateSegment\n                                            className={`datepicker__segment ${size === Size.xs ? LABEL_SIZE_MD_CSS_CLASS : LABEL_SIZE_LG_CSS_CLASS}`}\n                                            segment={segment}>\n                                            {segment.isPlaceholder ?\n                                                getPlaceholder(segment.type, segment.text, languageLocale)\n                                            :   segment.text}\n                                        </DateSegment>\n                                    </div>\n                                </I18nProvider>\n                            )}\n                        </DateInput>\n                    </I18nProvider>\n                    <div className=\"datepicker__buttons\">\n                        {showClearButton && !isDisabled && !isReadOnly && selectedValue && (\n                            <ClearButton\n                                className=\"datepicker__clear-button\"\n                                onPress={() => {\n                                    setSelectedValue(null);\n                                    onChange(null);\n                                    firstSpinBtnRef.current?.focus();\n                                }}\n                                slot={null}\n                            />\n                        )}\n                        <Button aria-label={translateCommon('toggleCalendar')} className=\"datepicker__button\">\n                            <Icon name={iconNames.Calendar} size={IconSize.MD} />\n                        </Button>\n                    </div>\n                </Group>\n            </Field>\n            <Popover className=\"datepicker__popover\" placement=\"bottom left\">\n                <Dialog className=\"datepicker__dialog\">\n                    <Calendar {...calendarProps} relatedValue={relatedValue} />\n                </Dialog>\n            </Popover>\n        </ReactAriaDatePicker>\n    );\n}\n"]}