{"version":3,"file":"richtexteditorlinkdialog.js","sourceRoot":"","sources":["../../../../src/components/inputs/richtexteditor/richtexteditorlinkdialog.tsx"],"names":[],"mappings":"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","sourcesContent":["import {AlertModal} from '../../feedback/index.js';\nimport {Size} from '../../../constants/index.js';\nimport {TextField} from '../textfield/index.js';\nimport {ReactNode, useState} from 'react';\nimport {useCurrentEditor} from '@tiptap/react';\nimport {useTranslateCommon} from '../../../hooks/translations/usetranslatecommon.js';\nimport {safeCall} from '../../../utils/functionhelper.js';\nimport {DialogTrigger} from '../../action/popover/index.js';\n\ninterface RichTextEditorLinkDialogProps {\n    children: ReactNode;\n    onOpenChange?: (isOpen: boolean) => void;\n}\n\nexport function RichTextEditorLinkDialog({children, onOpenChange}: RichTextEditorLinkDialogProps) {\n    const {editor} = useCurrentEditor();\n    const [selectedLinkText, setSelectedLinkText] = useState('');\n    const [selectedLinkUrl, setSelectedLinkUrl] = useState('');\n    const translateCommon = useTranslateCommon();\n\n    if (!editor) {\n        return null;\n    }\n\n    return (\n        <DialogTrigger\n            onOpenChange={(isOpen) => {\n                if (isOpen) {\n                    const currentUrl = editor.getAttributes('link').href;\n\n                    if (currentUrl) {\n                        setSelectedLinkUrl(currentUrl);\n                        editor.commands.extendMarkRange('link');\n                    }\n\n                    const {view, state} = editor;\n                    const {from, to} = view.state.selection;\n                    const selectedText = state.doc.textBetween(from, to);\n\n                    if (selectedText !== currentUrl) {\n                        setSelectedLinkText(selectedText);\n                    }\n                } else {\n                    setSelectedLinkText('');\n                    setSelectedLinkUrl('');\n                    editor.chain().focus(editor.view.state.selection.to).run();\n                }\n\n                safeCall(onOpenChange, isOpen);\n            }}>\n            {children}\n            <AlertModal\n                primaryAction={{\n                    onPress: (closeCallback) => {\n                        let commands = editor.chain().focus().extendMarkRange('link');\n\n                        if (selectedLinkUrl) {\n                            commands = commands\n                                .deleteSelection()\n                                .setLink({href: selectedLinkUrl})\n                                .command(({tr}) => {\n                                    tr.insertText(selectedLinkText || selectedLinkUrl);\n\n                                    return true;\n                                });\n                        } else {\n                            commands = commands.unsetLink();\n                        }\n\n                        commands.run();\n                        closeCallback();\n                    },\n                    label: translateCommon('save')\n                }}\n                secondaryAction={{\n                    onPress: (closeCallback) => {\n                        closeCallback();\n                    },\n                    label: translateCommon('cancel')\n                }}\n                size={Size.sm}\n                title={translateCommon('addLink')}>\n                <div className=\"link-modal__body\">\n                    <TextField\n                        autoFocus={!selectedLinkText}\n                        label={translateCommon('textToDisplay')}\n                        onChange={setSelectedLinkText}\n                        placeholder={translateCommon('enterDisplayText')}\n                        value={selectedLinkText}\n                    />\n                    <TextField\n                        autoFocus={!!selectedLinkText}\n                        label=\"URL\"\n                        onChange={setSelectedLinkUrl}\n                        placeholder=\"https://example.com/\"\n                        value={selectedLinkUrl}\n                    />\n                </div>\n            </AlertModal>\n        </DialogTrigger>\n    );\n}\n"]}