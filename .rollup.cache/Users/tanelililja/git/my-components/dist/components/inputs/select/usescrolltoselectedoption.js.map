{"version":3,"file":"usescrolltoselectedoption.js","sourceRoot":"","sources":["../../../../src/components/inputs/select/usescrolltoselectedoption.ts"],"names":[],"mappings":"AAAA,OAAO,EAAY,SAAS,EAAC,MAAM,OAAO,CAAC;AAE3C,MAAM,UAAU,yBAAyB,CAAwB,EAQhE;QAPG,SAAS,eAAA,EACT,MAAM,YAAA,EACN,OAAO,aAAA;IAMP,SAAS,CAAC;QACN,IAAI,MAAM,IAAI,CAAC,SAAS,EAAE;YACtB,IAAM,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC;YAEpC,IAAI,WAAW,EAAE;gBACb,IAAM,eAAe,GAAG,WAAW,CAAC,aAAa,CAAC,+BAA+B,CAAC,CAAC;gBAEnF,IAAI,eAAe,YAAY,WAAW,EAAE;oBACxC,WAAW,CAAC,SAAS,GAAG,eAAe,CAAC,SAAS,GAAG,WAAW,CAAC,YAAY,GAAG,CAAC,CAAC;iBACpF;aACJ;SACJ;IACL,CAAC,EAAE,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC;AAC5B,CAAC","sourcesContent":["import {RefObject, useEffect} from 'react';\n\nexport function useScrollToSelectedOption<T extends HTMLElement>({\n    isLoading,\n    isOpen,\n    menuRef\n}: {\n    isLoading?: boolean;\n    isOpen?: boolean;\n    menuRef: RefObject<T | null>;\n}) {\n    useEffect(() => {\n        if (isOpen && !isLoading) {\n            const menuElement = menuRef.current;\n\n            if (menuElement) {\n                const selectedElement = menuElement.querySelector('.select-option[data-selected]');\n\n                if (selectedElement instanceof HTMLElement) {\n                    menuElement.scrollTop = selectedElement.offsetTop - menuElement.offsetHeight / 2;\n                }\n            }\n        }\n    }, [isOpen, isLoading]);\n}\n"]}