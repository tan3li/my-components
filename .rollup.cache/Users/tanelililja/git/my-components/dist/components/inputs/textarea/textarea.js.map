{"version":3,"file":"textarea.js","sourceRoot":"","sources":["../../../../src/components/inputs/textarea/textarea.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n    TextArea as ReactAriaTextArea,\n    TextField as ReactAriaTextField,\n    TextFieldProps as ReactAriaTextFieldProps\n} from 'react-aria-components';\nimport {classNames} from '../../../utils/classnames.js';\nimport {Field} from '../common/field/field.js';\nimport {CSSProperties, RefAttributes, useEffect, useRef, useState} from 'react';\nimport {LABEL_SIZE_LG_CSS_CLASS} from '../../text/label/label.js';\nimport {TDataState} from '../../../constants/datastate.js';\nimport {AnyObject, ChangeArgs, useChangeParamsCallback} from '../../../hooks/usechangeparamscallback.js';\nimport {safeCall} from '../../../utils/functionhelper.js';\nimport {chain, useFocusRing, useHover} from 'react-aria';\nimport {isNullOrUndefined} from '../../../utils/objecthelper.js';\nimport {useDataState} from '../../../hooks/usedatastate.js';\nimport {BodyText} from '../../text/bodytext/bodytext.js';\nimport {Size} from '../../../constants/size.js';\nimport {TooltipContent} from '../../text/fieldlabel/fieldlabel.js';\nimport {SkeletonField} from '../../feedback/skeleton/skeletonfield.js';\n\nexport interface TextAreaProps<P extends AnyObject> extends ReactAriaTextFieldProps, RefAttributes<HTMLDivElement> {\n    /**\n     * Handler that is called with object containing selection state value and changeParams when the element's\n     * selection state changes.\n     */\n    changeCallback?: (args: ChangeArgs<P, string>) => void;\n    /**\n     * Object which is provided with element's selection state value property in changeCallback.\n     */\n    changeParams?: P;\n    className?: string;\n    /**\n     * Map that contains model property states with messages.\n     */\n    dataState?: Map<TDataState, string> | null;\n    /**\n     * Unique id that can be used for unit testing.\n     */\n    dataTestId?: string;\n    /**\n     * Additional help text to provide more information.\n     */\n    helpText?: string;\n    /**\n     * Additional help text to provide more information on successful action.\n     */\n    helpTextSuccess?: string;\n    /**\n     * Whether current input value is controlled from the outside.\n     */\n    isControlled?: boolean;\n    /**\n     * Whether to show skeleton instead of an actual element.\n     */\n    isSkeleton?: boolean;\n    /**\n     * Label of the TextField\n     */\n    label: string;\n    /**\n     * Minimum height for the textarea. Defaults to value which will show 5 visible lines.\n     */\n    minHeight?: CSSProperties['minHeight'];\n    /**\n     * Placeholder text when there's no value\n     */\n    placeholder?: string;\n    /**\n     * The number of visible lines. Defaults to 2.\n     * Can be used as minHeight alternative or together with minHeight to fine-tune the initial height behavior.\n     */\n    rows?: number;\n    /**\n     * Whether to show icon for help text.\n     */\n    showHelpTextIcon?: boolean;\n    /**\n     * Label tooltip content.\n     */\n    tooltipContent?: TooltipContent;\n}\n\nexport function TextArea<P extends AnyObject>({\n    className,\n    changeParams,\n    changeCallback,\n    dataState,\n    dataTestId,\n    helpText,\n    helpTextSuccess,\n    isControlled,\n    isInvalid,\n    isSkeleton,\n    label,\n    minHeight,\n    onChange,\n    onBlur,\n    placeholder,\n    rows,\n    showHelpTextIcon,\n    tooltipContent,\n    value = '',\n    ...props\n}: TextAreaProps<P>) {\n    const {focusProps, isFocused, isFocusVisible} = useFocusRing({within: true, isTextInput: false});\n    const {hoverProps, isHovered} = useHover(props);\n    const {isDisabled, isRequired, maxLength} = props;\n    const {hasError, isReadOnly, errorMessage} = useDataState(dataState, isInvalid, props.isReadOnly);\n    const [stateValue, setStateValue] = useState(value);\n    const inputRef = useRef<HTMLTextAreaElement>(null);\n    const changeParamsCb = useChangeParamsCallback(changeParams, changeCallback);\n    const currentValue = isControlled ? value : stateValue;\n\n    const onChangeInner = (val: string) => {\n        if (!isControlled) {\n            setStateValue(val);\n        }\n\n        const input = inputRef.current;\n\n        if (input) {\n            // Handle autogrow\n            const prevOverflow = input.style.overflow;\n            const isFirefox = 'MozAppearance' in input.style;\n\n            if (!isFirefox) {\n                input.style.overflow = 'hidden';\n            }\n\n            input.style.height = 'auto';\n            input.style.height = `${input.scrollHeight + (input.offsetHeight - input.clientHeight)}px`;\n            input.style.overflow = prevOverflow;\n        }\n\n        safeCall(onChange, val);\n    };\n\n    useEffect(() => {\n        if (!isControlled) {\n            setStateValue(value);\n        }\n    }, [value, isControlled]);\n\n    if (isSkeleton) {\n        const hasAnyHelpText = !!errorMessage || !!helpTextSuccess || !!helpText;\n\n        return (\n            <SkeletonField\n                className=\"skeleton-textarea-field\"\n                hasHelpText={hasAnyHelpText}\n                hasLabel={!!label}\n                inputRectHeight={minHeight ?? '134px'}\n                size={Size.md}\n                style={{minWidth: '225px'}}\n            />\n        );\n    }\n\n    return (\n        <ReactAriaTextField\n            {...props}\n            className={classNames('textarea-field', className)}\n            data-testid={dataTestId}\n            isInvalid={hasError}\n            isReadOnly={isReadOnly}\n            onBlur={chain(onBlur, changeParamsCb)}\n            onChange={onChangeInner}\n            value={currentValue}>\n            <Field\n                dataState={dataState}\n                helpText={helpText}\n                helpTextSuccess={helpTextSuccess}\n                isDisabled={isDisabled}\n                isInvalid={hasError}\n                isRequired={isRequired}\n                label={label}\n                labelSuffix={\n                    isNullOrUndefined(maxLength) ? null : (\n                        <BodyText className=\"textarea-field__letter-count\" size={Size.xs}>\n                            {`${currentValue.length}/${maxLength}`}\n                        </BodyText>\n                    )\n                }\n                showHelpTextIcon={showHelpTextIcon}\n                size={Size.md}\n                tooltipContent={tooltipContent}>\n                <div\n                    {...hoverProps}\n                    className=\"textarea-field__content\"\n                    data-disabled={!!isDisabled || undefined}\n                    data-focus-visible={isFocusVisible || undefined}\n                    data-focused={isFocused || undefined}\n                    data-hovered={isHovered || undefined}\n                    data-invalid={!!hasError || undefined}\n                    data-readonly={!!isReadOnly || undefined}>\n                    <div className=\"textarea-field__textarea-wrap\">\n                        <ReactAriaTextArea\n                            {...focusProps}\n                            className={classNames('textarea-field__textarea', LABEL_SIZE_LG_CSS_CLASS)}\n                            placeholder={placeholder}\n                            ref={inputRef}\n                            rows={rows}\n                            style={{minHeight}}\n                        />\n                    </div>\n                </div>\n            </Field>\n        </ReactAriaTextField>\n    );\n}\n"]}