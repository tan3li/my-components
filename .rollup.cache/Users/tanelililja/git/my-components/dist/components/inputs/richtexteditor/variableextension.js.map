{"version":3,"file":"variableextension.js","sourceRoot":"","sources":["../../../../src/components/inputs/richtexteditor/variableextension.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,IAAI,EAAE,eAAe,EAAC,MAAM,cAAc,CAAC;AACnD,OAAO,EAAC,qBAAqB,EAAC,MAAM,eAAe,CAAC;AACpD,OAAO,EAAC,QAAQ,EAAC,MAAM,eAAe,CAAC;AA4BvC,MAAM,CAAC,IAAM,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAkB;IAC1D,IAAI,EAAE,UAAU;IAEhB,WAAW;QACP,mCAAmC;QACnC,OAAO,qBAAqB,CAAC,QAAQ,EAAE,EAAC,SAAS,EAAE,8BAA8B,EAAC,CAAC,CAAC;IACxF,CAAC;IAED,UAAU;QACN,OAAO;YACH,cAAc,EAAE,EAAE;SACrB,CAAC;IACN,CAAC;IAED,KAAK,EAAE,QAAQ;IAEf,MAAM,EAAE,IAAI;IAEZ,UAAU,EAAE,KAAK;IAEjB,IAAI,EAAE,IAAI;IAEV,aAAa;QACT,OAAO;YACH,SAAS,EAAE;gBACP,OAAO,EAAE,IAAI;aAChB;YACD,YAAY,EAAE;gBACV,OAAO,EAAE,IAAI;aAChB;SACJ,CAAC;IACN,CAAC;IAED,SAAS;QACL,OAAO,CAAC,EAAC,GAAG,EAAE,2BAAmB,IAAI,CAAC,IAAI,QAAI,EAAC,CAAC,CAAC;IACrD,CAAC;IAED,UAAU,YAAC,EAAgB;YAAf,cAAc,oBAAA;QACtB,OAAO,CAAC,MAAM,EAAE,eAAe,CAAC,EAAC,WAAW,EAAE,IAAI,CAAC,IAAI,EAAC,EAAE,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC,CAAC;IAC5G,CAAC;IAED,UAAU,YAAC,EAAM;YAAL,IAAI,UAAA;QACZ,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;IACpC,CAAC;IAED,WAAW;QAAX,iBAgBC;QAfG,OAAO;YACH,WAAW,EACP,UAAC,EAA+B;oBAA9B,EAAE,QAAA,EAAE,KAAK,WAAA;gBACX,OAAA,UAAC,EAAiB;wBAAhB,QAAQ,cAAA,EAAE,KAAK,WAAA;oBACb,OAAA,QAAQ,CAAC,aAAa,CAAC;wBACnB,KAAK,EAAE,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,UAAC,IAAI,IAAK,OAAA,CAAC;4BAChD,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI;yBACvB,CAAC,EAFiD,CAEjD,CAAC;wBACH,IAAI,EAAE,KAAI,CAAC,IAAI;wBACf,KAAK,EAAE;4BACH,SAAS,EAAE,EAAE;4BACb,YAAY,EAAE,KAAK;yBACtB;qBACJ,CAAC;gBATF,CASE;YAVN,CAUM;SACb,CAAC;IACN,CAAC;CACJ,CAAC,CAAC","sourcesContent":["import {Node, mergeAttributes} from '@tiptap/core';\nimport {ReactNodeViewRenderer} from '@tiptap/react';\nimport {Variable} from './variable.js';\n\nexport interface VariableOptions {\n    /**\n     * HTML attributes to add to the variable element.\n     * @default {}\n     * @example { class: 'foo' }\n     */\n    HTMLAttributes: Record<string, any>;\n}\n\nexport interface SetVariableOptions {\n    id: string;\n    label: string;\n}\n\ndeclare module '@tiptap/core' {\n    interface Commands<ReturnType> {\n        variable: {\n            /**\n             * Add a variable\n             * @example editor.commands.setVariable({id: '123', label: 'My variable'})\n             */\n            setVariable: (obj: SetVariableOptions) => ReturnType;\n        };\n    }\n}\n\nexport const VariableExtension = Node.create<VariableOptions>({\n    name: 'variable',\n\n    addNodeView() {\n        // eslint-disable-next-line new-cap\n        return ReactNodeViewRenderer(Variable, {className: 'text-editor-variable-wrapper'});\n    },\n\n    addOptions() {\n        return {\n            HTMLAttributes: {}\n        };\n    },\n\n    group: 'inline',\n\n    inline: true,\n\n    selectable: false,\n\n    atom: true,\n\n    addAttributes() {\n        return {\n            'data-id': {\n                default: null\n            },\n            'data-label': {\n                default: null\n            }\n        };\n    },\n\n    parseHTML() {\n        return [{tag: `span[data-type=\"${this.name}\"]`}];\n    },\n\n    renderHTML({HTMLAttributes}) {\n        return ['span', mergeAttributes({'data-type': this.name}, this.options.HTMLAttributes, HTMLAttributes)];\n    },\n\n    renderText({node}) {\n        return node.attrs['data-label'];\n    },\n\n    addCommands() {\n        return {\n            setVariable:\n                ({id, label}: SetVariableOptions) =>\n                ({commands, state}) =>\n                    commands.insertContent({\n                        marks: state.selection.$from.marks().map((mark) => ({\n                            type: mark.type.name\n                        })),\n                        type: this.name,\n                        attrs: {\n                            'data-id': id,\n                            'data-label': label\n                        }\n                    })\n        };\n    }\n});\n"]}