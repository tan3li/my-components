{"version":3,"file":"usetreeselect.js","sourceRoot":"","sources":["../../../../src/components/inputs/treeselect/usetreeselect.ts"],"names":[],"mappings":"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","sourcesContent":["import {KeyboardEvent, useCallback, useEffect, useState} from 'react';\nimport {useFilter} from 'react-aria';\nimport {KeyboardEventKey} from '../../../constants/keyboardeventkey.js';\nimport {InputChangeTriggerAction} from '../select/selectprops.js';\nimport {safeCall} from '../../../utils/functionhelper.js';\nimport {filterItems} from '../select/filteritems.js';\nimport {expandAll} from './expandall.js';\nimport {SelectItemBase} from '../select/index.js';\n\ninterface UseTreeSelectOptions<TItem extends SelectItemBase<TItem>> {\n    defaultExpandedKeys?: Set<TItem['value']>;\n    expandedKeys?: Set<TItem['value']>;\n    items: TItem[];\n    onExpandedChange?: (expandedKeys: Set<TItem['value']>) => void;\n    onInputChange?: (value: string, inputChangeTrigger: InputChangeTriggerAction) => void;\n    onKeyDown?: (e: KeyboardEvent, highlightedItem?: TItem) => boolean;\n    onLoadChildren?: (item: TItem) => Promise<void>;\n}\n\nexport function useTreeSelect<TItem extends SelectItemBase<TItem>>({\n    defaultExpandedKeys,\n    expandedKeys: propsExpandedKeys,\n    items,\n    onExpandedChange: propsOnExpandedChange,\n    onLoadChildren,\n    ...options\n}: UseTreeSelectOptions<TItem>) {\n    const [expandedKeys, setExpandedKeys] = useState<Set<TItem['value']>>(\n        propsExpandedKeys ?? defaultExpandedKeys ?? new Set()\n    );\n    const [loadingKeys, setLoadingKeys] = useState<Set<TItem['value']>>(new Set());\n    const [filteredItems, setFilteredItems] = useState<TItem[] | null>(null);\n    const currentItems = filteredItems ?? items;\n    const localFilter = useFilter({sensitivity: 'base'});\n\n    const onExpandedChange = (newExpandedKeys: Set<TItem['value']>) => {\n        setExpandedKeys(newExpandedKeys);\n        safeCall(propsOnExpandedChange, newExpandedKeys);\n    };\n\n    const onToggleItem = useCallback(\n        (item: TItem) => {\n            const {value} = item;\n            const newExpandedKeys = new Set(expandedKeys);\n\n            if (newExpandedKeys.has(value)) {\n                newExpandedKeys.delete(value);\n            } else {\n                newExpandedKeys.add(value);\n            }\n\n            onExpandedChange(newExpandedKeys);\n\n            if (onLoadChildren && !loadingKeys.has(value) && item.children?.length === 0) {\n                setLoadingKeys(new Set(loadingKeys).add(value));\n\n                onLoadChildren(item).finally(() => {\n                    setLoadingKeys((prevLoadingKeys) => {\n                        const newLoadingKeys = new Set(prevLoadingKeys);\n\n                        newLoadingKeys.delete(value);\n\n                        return newLoadingKeys;\n                    });\n                });\n            }\n        },\n        [loadingKeys, expandedKeys, items]\n    );\n\n    const onKeyDown = useCallback(\n        (e: KeyboardEvent, highlightedItem?: TItem) => {\n            const continueFlow = safeCall(options.onKeyDown, e, highlightedItem);\n\n            if (continueFlow === false) {\n                return false;\n            }\n\n            switch (e.key) {\n                case KeyboardEventKey.ArrowLeft:\n                    if (highlightedItem) {\n                        e.preventDefault();\n                    }\n                    if (highlightedItem?.children && expandedKeys.has(highlightedItem.value)) {\n                        onToggleItem(highlightedItem);\n                    }\n\n                    return false;\n                case KeyboardEventKey.ArrowRight:\n                    if (highlightedItem) {\n                        e.preventDefault();\n                    }\n                    if (highlightedItem?.children && !expandedKeys.has(highlightedItem.value)) {\n                        onToggleItem(highlightedItem);\n                    }\n\n                    return false;\n                default:\n                    return true;\n            }\n        },\n        [expandedKeys, onToggleItem]\n    );\n\n    const onInputChange = useCallback(\n        (inputValue: string, inputChangeTrigger: InputChangeTriggerAction) => {\n            safeCall(options.onInputChange, inputValue, inputChangeTrigger);\n\n            if (!options.onInputChange) {\n                const newFilteredItems = inputValue ? filterItems(items, inputValue, localFilter) : null;\n\n                setFilteredItems(newFilteredItems);\n\n                if (inputChangeTrigger === InputChangeTriggerAction.Input) {\n                    onExpandedChange(newFilteredItems ? expandAll(newFilteredItems, new Set()) : new Set());\n                }\n            }\n        },\n        [items]\n    );\n\n    useEffect(() => {\n        setExpandedKeys(propsExpandedKeys ?? defaultExpandedKeys ?? new Set());\n    }, [propsExpandedKeys]);\n\n    return {\n        items: currentItems,\n        onInputChange,\n        onToggleItem,\n        onKeyDown,\n        expandedKeys,\n        loadingKeys\n    };\n}\n"]}