{"version":3,"file":"radio.js","sourceRoot":"","sources":["../../../../src/components/inputs/radio/radio.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n    Radio as ReactAriaRadio,\n    RadioGroupStateContext,\n    RadioProps as ReactAriaRadioProps\n} from 'react-aria-components';\nimport {classNames} from '../../../utils/classnames.js';\nimport {ReactNode, RefAttributes, useContext} from 'react';\nimport {Size} from '../../../constants/size.js';\nimport {LabelPlacement} from '../../../constants/labelplacement.js';\nimport {Label} from '../../text/label/label.js';\nimport {HelpText} from '../../text/index.js';\nimport {getHelpContentAndVariant} from '../common/field/field.js';\nimport {SkeletonCheckbox} from '../../feedback/skeleton/skeletoncheckbox.js';\n\nexport interface RadioCommonProps extends ReactAriaRadioProps, RefAttributes<HTMLLabelElement> {\n    /**\n     * Additional help text to provide more information.\n     */\n    helpText?: string;\n    /**\n     * Whether to show skeleton instead of an actual element.\n     */\n    isSkeleton?: boolean;\n    /**\n     * Whether label should be placed to start or end.\n     */\n    labelPlacement?: LabelPlacement;\n    /**\n     * Size of the element.\n     */\n    size?: Size.sm | Size.md;\n}\n\nexport interface RadioPropsAriaLabelRequired extends RadioCommonProps {\n    /**\n     * aria-label for the element, required only if label is not given.\n     */\n    'aria-label': string;\n    /**\n     * label don't have be given, use aria-label then.\n     */\n    label?: ReactNode;\n}\n\nexport interface RadioPropsLabelRequired extends RadioCommonProps {\n    /**\n     * aria-label for the element, required only if label is not given.\n     */\n    'aria-label'?: string;\n    /**\n     * Main label for the element.\n     */\n    label: ReactNode;\n}\n\nexport type RadioProps = RadioPropsAriaLabelRequired | RadioPropsLabelRequired;\n\nexport function Radio({\n    className,\n    helpText,\n    isSkeleton,\n    label,\n    labelPlacement = LabelPlacement.End,\n    size = Size.sm,\n    ...props\n}: RadioProps) {\n    const radioGroupState = useContext(RadioGroupStateContext);\n    const labelSize = size === Size.md ? Size.lg : Size.md;\n\n    if (isSkeleton) {\n        return <SkeletonCheckbox className=\"skeleton-radio\" hasHelpText={!!helpText} size={size} />;\n    }\n\n    const content: ReactNode[] = [];\n    const button = <div className={`radio__button radio__button--${size}`} key=\"button\" />;\n\n    if (label) {\n        const buttonAndLabels: ReactNode[] = [];\n        const labelNode = (\n            <Label className=\"radio__label\" key=\"label\" size={labelSize}>\n                {label}\n            </Label>\n        );\n        let wrapperClass = 'radio__button-and-label';\n\n        if (labelPlacement === LabelPlacement.Start) {\n            buttonAndLabels.push(labelNode, button);\n            wrapperClass = 'radio__label-and-button';\n        } else {\n            buttonAndLabels.push(button, labelNode);\n        }\n\n        if (helpText) {\n            const {helpContent, helpVariant} = getHelpContentAndVariant({\n                hasError: radioGroupState?.isInvalid,\n                helpText,\n                isDisabled: !!props.isDisabled || radioGroupState?.isDisabled\n            });\n\n            if (labelPlacement === LabelPlacement.End) {\n                // needed to align the label and helpText in grid\n                buttonAndLabels.push(<div key=\"buttonPlaceholder\" />);\n            }\n\n            buttonAndLabels.push(\n                <HelpText key=\"helpText\" variant={helpVariant}>\n                    {helpContent}\n                </HelpText>\n            );\n        }\n\n        content.push(\n            <div className={wrapperClass} key=\"buttonAndLabel\">\n                {buttonAndLabels}\n            </div>\n        );\n    } else {\n        content.push(button);\n    }\n\n    return (\n        <ReactAriaRadio\n            {...props}\n            className={classNames('radio', className, {\n                'radio--labeled': !!label,\n                'radio--reversed': !!label && labelPlacement === LabelPlacement.Start\n            })}>\n            {content}\n        </ReactAriaRadio>\n    );\n}\n"]}