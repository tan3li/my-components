{"version":3,"file":"checkbox.js","sourceRoot":"","sources":["../../../../src/components/inputs/checkbox/checkbox.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n    Checkbox as ReactAriaCheckbox,\n    CheckboxGroupStateContext,\n    CheckboxProps as ReactAriaCheckboxProps\n} from 'react-aria-components';\nimport {ReactNode, RefAttributes, useContext, useId} from 'react';\nimport {classNames} from '../../../utils/classnames.js';\nimport {Size} from '../../../constants/size.js';\nimport {Label} from '../../text/label/label.js';\nimport {Icon, IconSize} from '../../media/icon/icon.js';\nimport {InputIndeterminate} from './inputindeterminate.js';\nimport {RequiredIndicator} from '../../feedback/requiredindicator/requiredindicator.js';\nimport {TDataState} from '../../../constants/datastate.js';\nimport {AnyObject, ChangeArgs, useChangeParamsCallback} from '../../../hooks/usechangeparamscallback.js';\nimport {LabelPlacement} from '../../../constants/labelplacement.js';\nimport {useDataState} from '../../../hooks/usedatastate.js';\nimport {HelpText} from '../../text/index.js';\nimport {mergeStrings} from '../../../utils/stringhelper.js';\nimport {getHelpContentAndVariant} from '../common/field/field.js';\nimport {SkeletonCheckbox} from '../../feedback/skeleton/skeletoncheckbox.js';\nimport {iconNames} from '../../media/index.js';\n\nexport interface CheckboxCommonProps<P extends AnyObject>\n    extends ReactAriaCheckboxProps,\n        RefAttributes<HTMLLabelElement> {\n    /**\n     * Handler that is called with object containing selection state value and changeParams when the element's selection state changes.\n     */\n    changeCallback?: (args: ChangeArgs<P, boolean>) => void;\n    /**\n     * Object which is provided with element's selection state value property in changeCallback.\n     */\n    changeParams?: P;\n    /**\n     * Map that contains model property states with messages.\n     */\n    dataState?: Map<TDataState, string> | null;\n    /**\n     * Unique id that can be used for unit testing.\n     */\n    dataTestId?: string;\n    /**\n     * Additional help text to provide more information.\n     */\n    helpText?: string;\n    /**\n     * Whether to show skeleton instead of an actual element.\n     */\n    isSkeleton?: boolean;\n    /**\n     * Whether label should be placed to start or end.\n     */\n    labelPlacement?: LabelPlacement;\n    /**\n     * Size of the element.\n     */\n    size?: Size.sm | Size.md;\n}\n\nexport interface CheckboxPropsAriaLabelRequired<P extends AnyObject> extends CheckboxCommonProps<P> {\n    /**\n     * aria-label for the element, required only if label is not given.\n     */\n    'aria-label': string;\n    /**\n     * label don't have be given, use aria-label then.\n     */\n    label?: ReactNode;\n}\n\nexport interface CheckboxPropsLabelRequired<P extends AnyObject> extends CheckboxCommonProps<P> {\n    /**\n     * aria-label for the element, required only if label is not given.\n     */\n    'aria-label'?: string;\n    /**\n     * Main label for the element.\n     */\n    label: ReactNode;\n}\n\nexport type CheckboxProps<P extends AnyObject> = CheckboxPropsAriaLabelRequired<P> | CheckboxPropsLabelRequired<P>;\n\nexport function Checkbox<P extends AnyObject>({\n    className,\n    changeCallback,\n    changeParams,\n    dataState,\n    dataTestId,\n    helpText,\n    isDisabled,\n    isIndeterminate,\n    isInvalid,\n    isRequired,\n    isSelected,\n    isSkeleton,\n    label,\n    labelPlacement = LabelPlacement.End,\n    onChange,\n    size = Size.sm,\n    ...props\n}: CheckboxProps<P>) {\n    const checkboxGroupState = useContext(CheckboxGroupStateContext);\n    const changeParamsCb = useChangeParamsCallback(changeParams, changeCallback);\n    const {hasError, isReadOnly, errorMessage} = useDataState(dataState, isInvalid, props.isReadOnly);\n    const helpTextId = useId();\n    let labelSize = Size.md,\n        iconSize = IconSize.SM;\n\n    if (size === Size.md) {\n        labelSize = Size.lg;\n        iconSize = IconSize.LG;\n    }\n\n    if (isSkeleton) {\n        return <SkeletonCheckbox hasHelpText={!!helpText || !!errorMessage} size={size} />;\n    }\n\n    const content: ReactNode[] = [];\n\n    if (isRequired) {\n        content.push(<RequiredIndicator key=\"required\" />);\n    }\n\n    const box = (\n        <div className={classNames(`checkbox__box checkbox__box--${size}`)} key=\"box\">\n            {isIndeterminate ?\n                <InputIndeterminate size={iconSize} />\n            :   <Icon aria-hidden={true} name={iconNames.InputCheck} size={iconSize} />}\n        </div>\n    );\n\n    if (label) {\n        const boxAndLabels: ReactNode[] = [];\n        const labelNode = (\n            <Label className=\"checkbox__label\" key=\"label\" size={labelSize}>\n                {label}\n            </Label>\n        );\n        let wrapperClass = 'checkbox__box-and-label';\n\n        if (labelPlacement === LabelPlacement.Start) {\n            boxAndLabels.push(labelNode, box);\n            wrapperClass = 'checkbox__label-and-box';\n        } else {\n            boxAndLabels.push(box, labelNode);\n        }\n\n        if (helpText || errorMessage) {\n            const {helpContent, helpVariant} = getHelpContentAndVariant({\n                errorMessage,\n                hasError: hasError || checkboxGroupState?.isInvalid,\n                helpText,\n                isDisabled: !!isDisabled || checkboxGroupState?.isDisabled\n            });\n\n            if (labelPlacement === LabelPlacement.End) {\n                // needed to align the label and helpText in grid\n                boxAndLabels.push(<div key=\"boxPlaceholder\" />);\n            }\n\n            boxAndLabels.push(\n                <HelpText id={helpTextId} key=\"helpText\" variant={helpVariant}>\n                    {helpContent}\n                </HelpText>\n            );\n        }\n\n        content.push(\n            <div className={wrapperClass} key=\"boxAndLabel\">\n                {boxAndLabels}\n            </div>\n        );\n    } else {\n        content.push(box);\n    }\n\n    return (\n        <ReactAriaCheckbox\n            {...props}\n            aria-describedby={mergeStrings(' ', helpTextId, props['aria-describedby'])}\n            className={classNames('checkbox', className, {\n                'checkbox--labeled': !!label,\n                'checkbox--reversed': !!label && labelPlacement === LabelPlacement.Start\n            })}\n            data-testid={dataTestId}\n            isDisabled={isDisabled}\n            isIndeterminate={isIndeterminate}\n            isInvalid={hasError}\n            isReadOnly={isReadOnly}\n            isRequired={isRequired}\n            isSelected={isSelected}\n            onChange={onChange ?? changeParamsCb}>\n            {content}\n        </ReactAriaCheckbox>\n    );\n}\n"]}