{"version":3,"file":"selectprops.js","sourceRoot":"","sources":["../../../../src/components/inputs/select/selectprops.ts"],"names":[],"mappings":"AAUA,MAAM,CAAN,IAAkB,wBAGjB;AAHD,WAAkB,wBAAwB;IACtC,2CAAe,CAAA;IACf,2CAAe,CAAA;AACnB,CAAC,EAHiB,wBAAwB,KAAxB,wBAAwB,QAGzC","sourcesContent":["import {AnyObject} from '../../../hooks/usechangeparamscallback.js';\nimport {SelectItemBase} from './selectitem.js';\nimport {TDataState} from '../../../constants/datastate.js';\nimport {CSSProperties, KeyboardEvent, ReactNode, RefAttributes} from 'react';\nimport {Size} from '../../../constants/index.js';\nimport {IconName} from '../../media/index.js';\nimport {TooltipContent} from '../../text/index.js';\nimport {SelectOptionContentProps} from './selectoptioncontentprops.js';\nimport {SelectOptionsEmptyStateProps} from './selectoptionsemptystate.js';\n\nexport const enum InputChangeTriggerAction {\n    Focus = 'focus',\n    Input = 'input'\n}\n\nexport type SelectChangeItem<T> = {\n    [K in keyof T]: K extends 'value' ? T[K] | null\n    : K extends 'text' ? T[K] | undefined\n    : T[K];\n};\n\nexport interface SelectProps<P extends AnyObject, TItem extends SelectItemBase<TItem>>\n    extends RefAttributes<HTMLDivElement> {\n    /**\n     * Whether to show creatable option when searched option is not found.\n     */\n    allowCreate?: boolean;\n    /**\n     * Label for screen readers if actual label is not provided.\n     */\n    ['aria-label']?: string;\n    /**\n     * Handler that is called with object containing selection state value and changeParams when the element's\n     * selection state changes.\n     */\n    changeCallback?: (args: P & SelectChangeItem<TItem>) => void;\n    /**\n     * Object which is provided with element's selection state value property in changeCallback.\n     */\n    changeParams?: P;\n    /**\n     * The CSS className for the element.\n     */\n    className?: string;\n    /**\n     * Map that contains model property states with messages.\n     */\n    dataState?: Map<TDataState, string> | null;\n    /**\n     * The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.\n     */\n    disabledKeys?: Array<TItem['value']>;\n    /**\n     * Set of item keys whose children should be visible.\n     */\n    expandedKeys?: Set<TItem['value']>;\n    /**\n     * Additional help text to provide more information.\n     */\n    helpText?: string;\n    /**\n     * Whether selected value can be cleared.\n     */\n    isClearable?: boolean;\n    /**\n     * Whether element is disabled.\n     */\n    isDisabled?: boolean;\n    /**\n     * Whether field is in error state.\n     */\n    isInvalid?: boolean;\n    /**\n     * Whether loading item should be displayed among options.\n     */\n    isLoading?: boolean;\n    /**\n     * Whether popover is open.\n     */\n    isOpen?: boolean;\n    /**\n     * Display element with borderless style. isSearchable must be false for this to take effect.\n     */\n    isPlain?: boolean;\n    /**\n     * Whether element is read-only.\n     */\n    isReadOnly?: boolean;\n    /**\n     * Whether required indicator is visible.\n     */\n    isRequired?: boolean;\n    /**\n     * Whether options are searchable or not. True by default.\n     */\n    isSearchable?: boolean;\n    /**\n     * Whether to show skeleton instead of an actual element.\n     */\n    isSkeleton?: boolean;\n    /**\n     * Custom CSS class name for item.\n     */\n    itemClassName?: string | ((item: TItem) => string);\n    /**\n     * List of items to show.\n     */\n    items: TItem[];\n    /**\n     * Label of the field.\n     */\n    label?: ReactNode;\n    /**\n     * Width for the popover.\n     * If not given, width will be calculated automatically based on trigger width.\n     */\n    menuWidth?: CSSProperties['width'];\n    /**\n     * Handler that is called when bottom loader is reached.\n     */\n    onBottomLoaderVisible?: (entry: IntersectionObserverEntry) => void;\n    /**\n     * Handler that is called when focus changes.\n     */\n    onFocusChange?: (isFocused: boolean) => void;\n    /**\n     * Handler that is called when something is typed to input field. Local search will not be used if this is set.\n     */\n    onInputChange?: (value: string, inputChangeTrigger: InputChangeTriggerAction) => void;\n    /**\n     * Handler that is called on keyboard event in menu toggler.\n     * Return value indicates whether handling flow should continue.\n     */\n    onKeyDown?: (e: KeyboardEvent, highlightedItem?: TItem) => boolean;\n    /**\n     * Handler that is called when popover open state changes.\n     */\n    onOpenChange?: (isOpen: boolean) => void;\n    /**\n     * Handler that is called when selection changes.\n     */\n    onSelectionChange?: (value: TItem['value'] | null) => void;\n    /**\n     * Placeholder to show when there is no selected value.\n     */\n    placeholder?: string;\n    /**\n     * Whether to preserve input value on focus out of the field.\n     */\n    preserveInputValue?: boolean;\n    /**\n     * Whether to show icon for help text.\n     */\n    showHelpTextIcon?: boolean;\n    /**\n     * Whether to show search icon when isSearchable = true. Defaults to true.\n     */\n    showSearchIcon?: boolean;\n    /**\n     * Size of the element.\n     */\n    size?: Size.md | Size.sm | Size.xs;\n    /**\n     * Icon that will be rendered at the start of the field.\n     */\n    startIconName?: IconName;\n    /**\n     * Custom renderer for item content.\n     */\n    renderItemContent?: (props: SelectOptionContentProps<TItem>) => ReactNode;\n    /**\n     * Custom renderer for items empty state.\n     */\n    renderItemsEmptyState?: (props: SelectOptionsEmptyStateProps) => ReactNode;\n    /**\n     * Custom renderer to display content at the start of the field.\n     */\n    renderStartContent?: (selectedItem: TItem | null) => ReactNode;\n    /**\n     * Text to show when popover is closed and isSearchable.\n     */\n    text?: string;\n    /**\n     * Label tooltip content.\n     */\n    tooltipContent?: TooltipContent;\n    /**\n     * Selected value/key.\n     */\n    value?: TItem['value'] | null;\n}\n"]}