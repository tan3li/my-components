{"version":3,"file":"updateselecteditems.js","sourceRoot":"","sources":["../../../../src/components/inputs/multiselect/updateselecteditems.ts"],"names":[],"mappings":"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","sourcesContent":["import {SelectItemBase} from '../select/index.js';\nimport {getIndexWithPropertyValue} from '../../../utils/collectionhelper.js';\nimport {VALUE} from '../../../constants/common.js';\n\nfunction findUnselectedItems<TItem extends SelectItemBase<TItem>>(items: TItem[], selectedItems: TItem[]) {\n    const unselectedItems: TItem[] = [];\n\n    for (let i = 0, len = items.length; i < len; i++) {\n        const item = items[i];\n        const {children, value} = item;\n        const idx = getIndexWithPropertyValue(VALUE, value, selectedItems);\n\n        if (idx === -1) {\n            unselectedItems.push(item);\n        }\n\n        if (children) {\n            unselectedItems.push(...findUnselectedItems(children, selectedItems));\n        }\n    }\n\n    return unselectedItems;\n}\n\nfunction findSelectedItemIndices<TItem extends SelectItemBase<TItem>>(items: TItem[], selectedItems: TItem[]) {\n    const indices: number[] = [];\n\n    for (let i = 0, len = items.length; i < len; i++) {\n        const item = items[i];\n        const {children, value} = item;\n        const idx = getIndexWithPropertyValue(VALUE, value, selectedItems);\n\n        if (idx !== -1) {\n            indices.push(idx);\n        }\n\n        if (children) {\n            indices.push(...findSelectedItemIndices(children, selectedItems));\n        }\n    }\n\n    return indices;\n}\n\nexport function updateSelectedItems<TItem extends SelectItemBase<TItem>>(selectedItems: TItem[], selectedItem: TItem) {\n    const subItems = selectedItem.items;\n\n    if (subItems) {\n        const subItemsToSelect: TItem[] = [];\n        const selectedItemIndices: number[] = [];\n\n        for (let i = 0, len = subItems.length; i < len; i++) {\n            const subItem = subItems[i];\n            const {children, value} = subItem;\n            const idx = getIndexWithPropertyValue(VALUE, value, selectedItems);\n\n            if (idx === -1) {\n                subItemsToSelect.push(subItem);\n\n                if (children) {\n                    subItemsToSelect.push(...findUnselectedItems(children, selectedItems));\n                }\n            } else {\n                if (children) {\n                    const unselectedChildren = findUnselectedItems(children, selectedItems);\n\n                    if (unselectedChildren.length > 0) {\n                        subItemsToSelect.push(...unselectedChildren);\n                        continue;\n                    }\n                }\n\n                selectedItemIndices.push(idx);\n\n                if (children) {\n                    selectedItemIndices.push(...findSelectedItemIndices(children, selectedItems));\n                }\n            }\n        }\n\n        if (subItemsToSelect.length === 0) {\n            // All sub-items selected --> remove from selected.\n            selectedItemIndices.sort((a, b) => b - a); // sort desc\n\n            for (let i = 0, len = selectedItemIndices.length; i < len; i++) {\n                selectedItems.splice(selectedItemIndices[i], 1);\n            }\n        } else {\n            selectedItems.push(...subItemsToSelect);\n        }\n\n        return selectedItems;\n    }\n\n    const idx = getIndexWithPropertyValue(VALUE, selectedItem.value, selectedItems);\n\n    if (idx === -1) {\n        selectedItems.push(selectedItem);\n\n        const children = selectedItem.children;\n\n        if (children) {\n            selectedItems.push(...findUnselectedItems(children, selectedItems));\n        }\n    } else {\n        selectedItems.splice(idx, 1);\n    }\n\n    return selectedItems;\n}\n"]}