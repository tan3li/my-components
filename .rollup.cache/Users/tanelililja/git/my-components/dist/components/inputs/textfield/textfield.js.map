{"version":3,"file":"textfield.js","sourceRoot":"","sources":["../../../../src/components/inputs/textfield/textfield.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n    Input as ReactAriaInput,\n    InputProps,\n    TextField as ReactAriaTextField,\n    TextFieldProps as ReactAriaTextFieldProps\n} from 'react-aria-components';\nimport {Size} from '../../../constants/size.js';\nimport {classNames} from '../../../utils/classnames.js';\nimport {IconName} from '../../media/icon/icons.js';\nimport {Icon} from '../../media/icon/icon.js';\nimport {Field} from '../common/field/field.js';\nimport {chain, useFocusRing, useHover} from 'react-aria';\nimport {ReactNode, RefAttributes, RefObject, useEffect, useId, useRef, useState} from 'react';\nimport {isEmptyString} from '../../../utils/objecthelper.js';\nimport {isFunction, safeCall} from '../../../utils/functionhelper.js';\nimport {isString} from '../../../utils/stringhelper.js';\nimport {TDataState} from '../../../constants/datastate.js';\nimport {ChangeArgs, AnyObject, useChangeParamsCallback} from '../../../hooks/usechangeparamscallback.js';\nimport {TextFieldUnit} from './textfieldunit.js';\nimport {useDataState} from '../../../hooks/usedatastate.js';\nimport {TooltipContent} from '../../text/fieldlabel/fieldlabel.js';\nimport {Alignment} from '../../../constants/alignment.js';\nimport {LABEL_SIZE_LG_CSS_CLASS, LABEL_SIZE_MD_CSS_CLASS} from '../../text/index.js';\nimport {SkeletonField} from '../../feedback/skeleton/skeletonfield.js';\n\ntype TextFieldSizes = Size.xs | Size.sm | Size.md;\n\ninterface PartContentProps {\n    inputRef: RefObject<HTMLInputElement | null>;\n    isDisabled?: boolean;\n    isReadOnly?: boolean;\n    size: TextFieldSizes;\n}\n\ntype PartContent = string | ((props: PartContentProps) => ReactNode);\n\nexport interface TextFieldProps<P extends AnyObject>\n    extends Omit<ReactAriaTextFieldProps, 'validate'>,\n        RefAttributes<HTMLDivElement> {\n    /**\n     * Handler that is called with object containing selection state value and changeParams when the element's selection state changes.\n     */\n    changeCallback?: (args: ChangeArgs<P, string>) => void;\n    /**\n     * Object which is provided with element's selection state value property in changeCallback.\n     */\n    changeParams?: P;\n    className?: string;\n    /**\n     * Map that contains model property states with messages.\n     */\n    dataState?: Map<TDataState, string> | null;\n    /**\n     * Unique id that can be used for unit testing.\n     */\n    dataTestId?: string;\n    /**\n     * Icon that will be rendered at the end of the Input block of TextField\n     */\n    endIconName?: IconName;\n    /**\n     * Additional help text to provide more information.\n     */\n    helpText?: string;\n    /**\n     * Additional help text to provide more information on successful action.\n     */\n    helpTextSuccess?: string;\n    /**\n     * Input size attribute.\n     */\n    inputSize?: number;\n    /**\n     * Whether current input value is controlled from the outside.\n     */\n    isControlled?: boolean;\n    /**\n     * Whether element has borderless style.\n     */\n    isPlain?: boolean;\n    /**\n     * Whether to show skeleton instead of an actual element.\n     */\n    isSkeleton?: boolean;\n    /**\n     * Label of the TextField\n     */\n    label?: string;\n    /**\n     * Placeholder text when there's no value\n     */\n    placeholder?: string;\n    /**\n     * Prefix text or element to be rendered at the start of the input element.\n     */\n    prefix?: PartContent;\n    /**\n     * Maximum value for input.\n     */\n    maxValue?: InputProps['max'];\n    /**\n     * Minimum value for input.\n     */\n    minValue?: InputProps['min'];\n    /**\n     * Whether to show icon for help text.\n     */\n    showHelpTextIcon?: boolean;\n    /**\n     * Size of the TextField, two different sizes are available.\n     */\n    size?: TextFieldSizes;\n    /**\n     * Icon that will be rendered at the start of the Input block of TextField\n     */\n    startIconName?: IconName;\n    /**\n     * Suffix text or element to be rendered at the end of the input element.\n     */\n    suffix?: PartContent;\n    /**\n     * Alignment of the input text.\n     */\n    textAlign?: Alignment.start | Alignment.end | Alignment.center;\n    /**\n     * Label tooltip content.\n     */\n    tooltipContent?: TooltipContent;\n}\n\ninterface PartProps {\n    content?: PartContent;\n    id?: string;\n    inputRef: RefObject<HTMLInputElement | null>;\n    isDisabled?: boolean;\n    isReadOnly?: boolean;\n    size: TextFieldSizes;\n}\n\n// eslint-disable-next-line sonarjs/function-return-type\nfunction Part({content, id, inputRef, isDisabled, isReadOnly, size}: PartProps) {\n    if (isFunction(content)) {\n        return content({inputRef, isDisabled, isReadOnly, size});\n    } else if (isString(content)) {\n        return (\n            <TextFieldUnit id={id} size={size === Size.xs ? Size.md : Size.lg}>\n                {content}\n            </TextFieldUnit>\n        );\n    }\n\n    return null;\n}\n\nexport function TextField<P extends AnyObject>({\n    className,\n    changeParams,\n    changeCallback,\n    dataState,\n    dataTestId,\n    endIconName,\n    helpText,\n    helpTextSuccess,\n    inputSize,\n    isControlled,\n    isInvalid,\n    isPlain,\n    isSkeleton,\n    label,\n    maxValue,\n    minValue,\n    onBlur,\n    onChange,\n    placeholder,\n    prefix,\n    showHelpTextIcon,\n    size = Size.md,\n    startIconName,\n    suffix,\n    textAlign = Alignment.start,\n    tooltipContent,\n    value = '',\n    ...props\n}: TextFieldProps<P>) {\n    const {focusProps, isFocused, isFocusVisible} = useFocusRing({within: true, isTextInput: false});\n    const {hoverProps, isHovered} = useHover(props);\n    const {isDisabled, isRequired} = props;\n    const {hasError, isReadOnly, errorMessage} = useDataState(dataState, isInvalid, props.isReadOnly);\n    const inputRef = useRef<HTMLInputElement>(null);\n    const [stateValue, setStateValue] = useState(value);\n    const changeParamsCb = useChangeParamsCallback(changeParams, changeCallback);\n    const currentValue = isControlled ? value : stateValue;\n    const prefixId = useId();\n    const suffixId = useId();\n    let ariaLabelledBy = props['aria-labelledby'];\n\n    if (!ariaLabelledBy) {\n        const labelledBy: string[] = [];\n\n        // If prefix/suffix is function, aria-labelledby should be used.\n        if (isString(prefix)) {\n            labelledBy.push(prefixId);\n        }\n        if (isString(suffix)) {\n            labelledBy.push(suffixId);\n        }\n\n        ariaLabelledBy = labelledBy.join(' ');\n    }\n\n    const onChangeInner = (val: string) => {\n        if (!isControlled) {\n            setStateValue(val);\n        }\n        safeCall(onChange, val);\n    };\n\n    useEffect(() => {\n        if (!isControlled) {\n            setStateValue(value);\n        }\n    }, [value, isControlled]);\n\n    if (isSkeleton) {\n        const hasAnyHelpText = !!errorMessage || !!helpTextSuccess || !!helpText;\n\n        return (\n            <SkeletonField\n                className=\"skeleton-text-field\"\n                hasHelpText={hasAnyHelpText}\n                hasLabel={!!label}\n                size={size}\n            />\n        );\n    }\n\n    return (\n        <ReactAriaTextField\n            {...props}\n            aria-labelledby={ariaLabelledBy}\n            className={classNames('text-field', className)}\n            isInvalid={hasError}\n            isReadOnly={isReadOnly}\n            onBlur={chain(onBlur, changeParamsCb)}\n            onChange={onChangeInner}\n            value={currentValue}>\n            <Field\n                dataState={dataState}\n                helpText={helpText}\n                helpTextSuccess={helpTextSuccess}\n                isDisabled={isDisabled}\n                isInvalid={hasError}\n                isRequired={isRequired}\n                label={label}\n                showHelpTextIcon={showHelpTextIcon}\n                size={size === Size.xs ? Size.sm : Size.md}\n                tooltipContent={tooltipContent}>\n                <div\n                    {...hoverProps}\n                    className={classNames(`text-field__content text-field__content--${size}`, {\n                        'text-field__content--filled': !isEmptyString(currentValue),\n                        'text-field__content--plain': isPlain\n                    })}\n                    data-disabled={!!isDisabled || undefined}\n                    data-focus-visible={isFocusVisible || undefined}\n                    data-focused={isFocused || undefined}\n                    data-hovered={isHovered || undefined}\n                    data-invalid={!!hasError || undefined}\n                    data-readonly={!!isReadOnly || undefined}>\n                    <Part\n                        content={prefix}\n                        id={prefixId}\n                        inputRef={inputRef}\n                        isDisabled={isDisabled}\n                        isReadOnly={isReadOnly}\n                        size={size}\n                    />\n                    <div className=\"text-field__input\">\n                        {startIconName && <Icon className=\"text-field__icon\" name={startIconName} />}\n                        <ReactAriaInput\n                            {...focusProps}\n                            className={classNames(\n                                'text-field__input-field',\n                                size === Size.xs ? LABEL_SIZE_MD_CSS_CLASS : LABEL_SIZE_LG_CSS_CLASS,\n                                {\n                                    'text-field__input-field--right-aligned': textAlign === Alignment.end\n                                },\n                                {\n                                    'text-field__input-field--center-aligned': textAlign === Alignment.center\n                                }\n                            )}\n                            data-testid={dataTestId}\n                            max={maxValue}\n                            min={minValue}\n                            placeholder={placeholder}\n                            ref={inputRef}\n                            size={inputSize}\n                        />\n                        {endIconName && <Icon className=\"text-field__icon\" name={endIconName} />}\n                    </div>\n                    <Part\n                        content={suffix}\n                        id={suffixId}\n                        inputRef={inputRef}\n                        isDisabled={isDisabled}\n                        isReadOnly={isReadOnly}\n                        size={size}\n                    />\n                </div>\n            </Field>\n        </ReactAriaTextField>\n    );\n}\n"]}