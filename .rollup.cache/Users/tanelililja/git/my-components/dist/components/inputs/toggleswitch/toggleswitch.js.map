{"version":3,"file":"toggleswitch.js","sourceRoot":"","sources":["../../../../src/components/inputs/toggleswitch/toggleswitch.tsx"],"names":[],"mappings":"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","sourcesContent":["import {Switch as ReactAriaSwitch, SwitchProps as ReactAriaSwitchProps} from 'react-aria-components';\nimport {TDataState} from '../../../constants/datastate.js';\nimport {Size} from '../../../constants/size.js';\nimport {ReactNode, RefAttributes, useId} from 'react';\nimport {classNames} from '../../../utils/classnames.js';\nimport {Label} from '../../text/label/label.js';\nimport {SwitchNob} from './switchnob.js';\nimport {RequiredIndicator} from '../../feedback/requiredindicator/requiredindicator.js';\nimport {ChangeArgs, AnyObject, useChangeParamsCallback} from '../../../hooks/usechangeparamscallback.js';\nimport {LabelPlacement} from '../../../constants/labelplacement.js';\nimport {useDataState} from '../../../hooks/usedatastate.js';\nimport {HelpText} from '../../text/index.js';\nimport {mergeStrings} from '../../../utils/stringhelper.js';\nimport {getHelpContentAndVariant} from '../common/field/field.js';\nimport {SkeletonCheckbox} from '../../feedback/skeleton/skeletoncheckbox.js';\nimport {Icon, iconNames} from '../../media/index.js';\n\nexport interface ToggleSwitchCommonProps<P extends AnyObject>\n    extends ReactAriaSwitchProps,\n        RefAttributes<HTMLLabelElement> {\n    /**\n     * Handler that is called with object containing selection state value and changeParams when the element's\n     * selection state changes.\n     */\n    changeCallback?: (args: ChangeArgs<P, boolean>) => void;\n    /**\n     * Object which is provided with element's selection state value property in changeCallback.\n     */\n    changeParams?: P;\n    /**\n     * Map that contains model property states associated with messages.\n     */\n    dataState?: Map<TDataState, string> | null;\n    /**\n     * Unique id that can be used for unit testing.\n     */\n    dataTestId?: string;\n    /**\n     * Additional help text to provide more information.\n     */\n    helpText?: string;\n    /**\n     * Whether ToggleSwitch is in error state.\n     */\n    isInvalid?: boolean;\n    /**\n     * Whether ToggleSwitch is in required.\n     */\n    isRequired?: boolean;\n    /**\n     * Whether to show skeleton instead of an actual element.\n     */\n    isSkeleton?: boolean;\n    /**\n     * Whether label should be placed to start or end.\n     */\n    labelPlacement?: LabelPlacement;\n    /**\n     * Size of the element.\n     */\n    size?: Size.sm | Size.md;\n}\n\nexport interface ToggleSwitchPropsAriaLabelRequired<P extends AnyObject> extends ToggleSwitchCommonProps<P> {\n    /**\n     * aria-label for the element, required only if label is not given.\n     */\n    'aria-label': string;\n    /**\n     * label don't have be given, use aria-label then.\n     */\n    label: undefined;\n}\n\nexport interface ToggleSwitchPropsLabelRequired<P extends AnyObject> extends ToggleSwitchCommonProps<P> {\n    /**\n     * aria-label for the element, required only if label is not given.\n     */\n    'aria-label'?: string;\n    /**\n     * Main label for the element.\n     */\n    label: ReactNode;\n}\n\nexport type ToggleSwitchProps<P extends AnyObject> =\n    | ToggleSwitchPropsAriaLabelRequired<P>\n    | ToggleSwitchPropsLabelRequired<P>;\n\nexport function ToggleSwitch<P extends AnyObject>({\n    changeCallback,\n    changeParams,\n    className,\n    dataState,\n    dataTestId,\n    helpText,\n    isDisabled,\n    isInvalid,\n    isRequired,\n    isSelected,\n    isSkeleton,\n    label,\n    labelPlacement = LabelPlacement.End,\n    onChange,\n    size = Size.sm,\n    ...props\n}: ToggleSwitchProps<P>) {\n    const {hasError, isReadOnly, errorMessage} = useDataState(dataState, isInvalid, props.isReadOnly);\n    const changeParamsCb = useChangeParamsCallback(changeParams, changeCallback);\n    const helpTextId = useId();\n    let labelSize = Size.md;\n\n    if (size === Size.md) {\n        labelSize = Size.lg;\n    }\n\n    if (isSkeleton) {\n        return (\n            <SkeletonCheckbox\n                className=\"skeleton-toggle-switch\"\n                hasHelpText={!!helpText || !!errorMessage}\n                size={size}\n            />\n        );\n    }\n\n    const content: ReactNode[] = [];\n\n    if (isRequired) {\n        content.push(<RequiredIndicator key=\"required\" />);\n    }\n\n    const toggleItem = (\n        <div className={classNames(`toggle-switch__toggle-item toggle-switch__toggle-item--${size}`)} key=\"toggleItem\">\n            <Icon aria-hidden={true} className=\"toggle-switch__check-icon\" name={iconNames.InputCheck} />\n            <SwitchNob className=\"toggle-switch__switch-nob-icon\" size={size} />\n        </div>\n    );\n\n    if (label) {\n        const toggleItemAndLabels: ReactNode[] = [];\n        const labelNode = (\n            <Label className=\"toggle-switch__label\" key=\"label\" size={labelSize}>\n                {label}\n            </Label>\n        );\n        let wrapperClass = 'toggle-switch__toggle-item-and-label';\n\n        if (labelPlacement === LabelPlacement.Start) {\n            toggleItemAndLabels.push(labelNode, toggleItem);\n            wrapperClass = 'toggle-switch__label-and-toggle-item';\n        } else {\n            toggleItemAndLabels.push(toggleItem, labelNode);\n        }\n\n        if (helpText || errorMessage) {\n            const {helpContent, helpVariant} = getHelpContentAndVariant({\n                errorMessage,\n                hasError,\n                helpText,\n                isDisabled\n            });\n\n            if (labelPlacement === LabelPlacement.End) {\n                // needed to align the label and helpText in grid\n                toggleItemAndLabels.push(<div key=\"toggleItemPlaceholder\" />);\n            }\n\n            toggleItemAndLabels.push(\n                <HelpText id={helpTextId} key=\"helpText\" variant={helpVariant}>\n                    {helpContent}\n                </HelpText>\n            );\n        }\n\n        content.push(\n            <div className={wrapperClass} key=\"toggleItemAndLabel\">\n                {toggleItemAndLabels}\n            </div>\n        );\n    } else {\n        content.push(toggleItem);\n    }\n\n    return (\n        <ReactAriaSwitch\n            {...props}\n            aria-describedby={mergeStrings(' ', helpTextId, props['aria-describedby'])}\n            className={classNames('toggle-switch', className, {\n                'toggle-switch--invalid': hasError,\n                'toggle-switch--labeled': !!label,\n                'toggle-switch--reversed': !!label && labelPlacement === LabelPlacement.Start\n            })}\n            data-testid={dataTestId}\n            isDisabled={isDisabled}\n            isReadOnly={isReadOnly}\n            isSelected={isSelected}\n            onChange={onChange ?? changeParamsCb}>\n            {content}\n        </ReactAriaSwitch>\n    );\n}\n"]}