{"version":3,"file":"textfieldcopy.js","sourceRoot":"","sources":["../../../../src/components/inputs/textfield/textfieldcopy.tsx"],"names":[],"mappings":";;AAAA,OAAO,EAAC,IAAI,EAAC,MAAM,0BAA0B,CAAC;AAC9C,OAAO,EAAC,SAAS,EAAC,MAAM,2BAA2B,CAAC;AACpD,OAAO,EAAC,KAAK,EAAC,MAAM,2BAA2B,CAAC;AAChD,OAAO,EAAC,IAAI,EAAC,MAAM,4BAA4B,CAAC;AAEhD,OAAO,EAAC,kBAAkB,EAAC,MAAM,mDAAmD,CAAC;AACrF,OAAO,EAAC,cAAc,EAAC,MAAM,0CAA0C,CAAC;AACxE,OAAO,EAAC,OAAO,EAAE,WAAW,EAAC,MAAM,mCAAmC,CAAC;AACvE,OAAO,EAAC,QAAQ,EAAC,MAAM,gCAAgC,CAAC;AACxD,OAAO,EAAC,cAAc,EAAC,MAAM,+CAA+C,CAAC;AAC7E,OAAO,EAAC,eAAe,EAAC,MAAM,uCAAuC,CAAC;AACtE,OAAO,EAAC,kBAAkB,EAAC,MAAM,sCAAsC,CAAC;AAQxE,IAAM,qBAAqB,GAAG,IAAI,CAAC;AAEnC,MAAM,UAAU,aAAa,CAAC,EAAmD;;QAAlD,QAAQ,cAAA,EAAE,MAAM,YAAA,EAAE,GAAG,SAAA,EAAE,MAAM,YAAA;IACxD,IAAM,eAAe,GAAG,kBAAkB,EAAE,CAAC;IACvC,IAAA,KAAyB,kBAAkB,CAAC;QAC9C,IAAI,EAAE,UAAG,MAAM,aAAN,MAAM,cAAN,MAAM,GAAI,EAAE,SAAG,MAAA,MAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,OAAO,0CAAE,KAAK,mCAAI,EAAE,SAAG,MAAM,aAAN,MAAM,cAAN,MAAM,GAAI,EAAE,CAAE;QACvE,eAAe,EAAE,qBAAqB;KACzC,CAAC,EAHK,OAAO,aAAA,EAAE,WAAW,iBAGzB,CAAC;IAEH,OAAO,CACH,MAAC,cAAc,aAAC,MAAM,EAAE,WAAW,iBAC/B,MAAC,cAAc,aACX,SAAS,EAAC,oBAAoB,EAC9B,WAAW,EAAE,eAAe,CAAC,GAAG,EAChC,OAAO,EAAE,OAAO,EAChB,GAAG,EAAE,GAAG,iBACR,KAAC,IAAI,IAAC,IAAI,EAAE,SAAS,CAAC,OAAO,GAAI,EACjC,KAAC,KAAK,aAAC,IAAI,EAAE,IAAI,CAAC,EAAE,gBAAG,eAAe,CAAC,MAAM,CAAC,IAAS,KAC1C,EACjB,KAAC,OAAO,aAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,IAAI,EAAE,WAAW,CAAC,KAAK,gBACxE,eAAe,CAAC,QAAQ,CAAC,IACpB,KACG,CACpB,CAAC;AACN,CAAC","sourcesContent":["import {Icon} from '../../media/icon/icon.js';\nimport {iconNames} from '../../media/icon/icons.js';\nimport {Label} from '../../text/label/label.js';\nimport {Size} from '../../../constants/size.js';\nimport {RefAttributes, RefObject} from 'react';\nimport {useTranslateCommon} from '../../../hooks/translations/usetranslatecommon.js';\nimport {TooltipTrigger} from '../../feedback/tooltip/tooltiptrigger.js';\nimport {Tooltip, TooltipType} from '../../feedback/tooltip/tooltip.js';\nimport {Position} from '../../../constants/position.js';\nimport {TriggerElement} from '../../action/triggerelement/triggerelement.js';\nimport {HTMLElementType} from '../../../constants/htmlelementtype.js';\nimport {useCopyToClipboard} from '../../../hooks/usecopytoclipboard.js';\n\nexport interface TextFieldCopyProps extends RefAttributes<HTMLDivElement> {\n    inputRef?: RefObject<HTMLInputElement | null>;\n    prefix?: string;\n    suffix?: string;\n}\n\nconst TOOLTIP_TIMEOUT_IN_MS = 3000;\n\nexport function TextFieldCopy({inputRef, prefix, ref, suffix}: TextFieldCopyProps) {\n    const translateCommon = useTranslateCommon();\n    const {onPress, showTooltip} = useCopyToClipboard({\n        text: `${prefix ?? ''}${inputRef?.current?.value ?? ''}${suffix ?? ''}`,\n        tooltipDuration: TOOLTIP_TIMEOUT_IN_MS\n    });\n\n    return (\n        <TooltipTrigger isOpen={showTooltip}>\n            <TriggerElement\n                className=\"text-field__action\"\n                elementType={HTMLElementType.Div}\n                onPress={onPress}\n                ref={ref}>\n                <Icon name={iconNames.CopyAll} />\n                <Label size={Size.lg}>{translateCommon('copy')}</Label>\n            </TriggerElement>\n            <Tooltip position={Position.Bottom} showArrow={false} type={TooltipType.Plain}>\n                {translateCommon('copied')}\n            </Tooltip>\n        </TooltipTrigger>\n    );\n}\n"]}