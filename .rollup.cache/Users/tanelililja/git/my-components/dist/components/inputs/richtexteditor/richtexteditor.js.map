{"version":3,"file":"richtexteditor.js","sourceRoot":"","sources":["../../../../src/components/inputs/richtexteditor/richtexteditor.tsx"],"names":[],"mappings":"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","sourcesContent":["import {classNames} from '../../../utils/classnames.js';\nimport {TooltipContent} from '../../text/index.js';\nimport {Size} from '../../../constants/index.js';\nimport {TDataState} from '../../../constants/datastate.js';\nimport {Field} from '../common/field/field.js';\nimport {useDataState} from '../../../hooks/usedatastate.js';\nimport {BubbleMenu, Editor, EditorEvents, EditorProvider} from '@tiptap/react';\nimport Bold from '@tiptap/extension-bold';\nimport Italic from '@tiptap/extension-italic';\nimport Underline from '@tiptap/extension-underline';\nimport Document from '@tiptap/extension-document';\nimport Paragraph from '@tiptap/extension-paragraph';\nimport Placeholder from '@tiptap/extension-placeholder';\nimport Text from '@tiptap/extension-text';\nimport ListItem from '@tiptap/extension-list-item';\nimport OrderedList from '@tiptap/extension-ordered-list';\nimport BulletList from '@tiptap/extension-bullet-list';\nimport Link from '@tiptap/extension-link';\nimport {HeadingExtension} from './headingextension.js';\nimport {RichTextEditorToolbar} from './richtexteditortoolbar.js';\nimport {Divider} from '../../datadisplay/index.js';\nimport {AnyObject, ChangeArgs} from '../../../hooks/usechangeparamscallback.js';\nimport {RefAttributes, useEffect, useMemo, useRef, useState} from 'react';\nimport {safeCall} from '../../../utils/functionhelper.js';\nimport {useFocusRing, useLabel} from 'react-aria';\nimport {RichTextEditorLinkPreview} from './richtexteditorlinkpreview.js';\nimport {VariableExtension} from './variableextension.js';\nimport {DEFAULT_TOOLBAR_CONFIG, RichTextEditorToolbarConfig, VariableItem} from './toolbarconfig.js';\nimport {isArray} from '../../../utils/objecthelper.js';\nimport {EnabledCheckExtension} from './enabledcheckextension.js';\nimport {useFieldHelpText} from '../../../hooks/usefieldhelptext.js';\nimport {LabelContext, Provider, TextContext} from 'react-aria-components';\nimport {SkeletonField} from '../../feedback/skeleton/skeletonfield.js';\n\ninterface VariableToHtmlOptions {\n    regExp: RegExp;\n    getItem: (match: string) => VariableItem;\n}\n\ninterface VariableToTextOptions {\n    getText: (variableItem: VariableItem) => string;\n}\n\nexport interface RichTextEditorProps<P extends AnyObject> extends RefAttributes<HTMLDivElement> {\n    /**\n     * Aria-label for the field.\n     */\n    ['aria-label']?: string;\n    /**\n     * Handler that is called on blur with current content.\n     */\n    changeCallback?: (args: ChangeArgs<P, string>) => void;\n    /**\n     * Object which is provided with element's selection state value property in changeCallback.\n     */\n    changeParams?: P;\n    /**\n     * CSS class name for the element.\n     */\n    className?: string;\n    /**\n     * Map that contains model property states with messages.\n     */\n    dataState?: Map<TDataState, string> | null;\n    /**\n     * Whether element is disabled.\n     */\n    isDisabled?: boolean;\n    /**\n     * Whether element is read-only.\n     */\n    isReadOnly?: boolean;\n    /**\n     * Whether element is in error.\n     */\n    isInvalid?: boolean;\n    /**\n     * Whether value is required.\n     */\n    isRequired?: boolean;\n    /**\n     * Whether to show skeleton instead of an actual element.\n     */\n    isSkeleton?: boolean;\n    /**\n     * Additional help text to provide more information.\n     */\n    helpText?: string;\n    /**\n     * Additional help text to provide more information on successful action.\n     */\n    helpTextSuccess?: string;\n    /**\n     * Label for the field.\n     */\n    label?: string;\n    /**\n     * Placeholder text.\n     */\n    placeholder?: string;\n    /**\n     * Whether to show icon for help text.\n     */\n    showHelpTextIcon?: boolean;\n    /**\n     * Customize which actions are available in the toolbar.\n     */\n    toolbarConfig?: RichTextEditorToolbarConfig;\n    /**\n     * Label tooltip content.\n     */\n    tooltipContent?: TooltipContent;\n    /**\n     * Text editor content. Can be provided as HTML-string or plain text string.\n     */\n    value?: string;\n    /**\n     * Options for converting text variables to HTML.\n     */\n    variableToHtmlOptions?: VariableToHtmlOptions;\n    /**\n     * Options for converting HTML variables to text.\n     */\n    variableToTextOptions?: VariableToTextOptions;\n}\n\nfunction createEditorContent(value?: string, variableToHtmlOptions?: VariableToHtmlOptions) {\n    let content = value ?? '';\n\n    if (variableToHtmlOptions) {\n        content = content.replace(variableToHtmlOptions.regExp, (substring) => {\n            const {id, label} = variableToHtmlOptions.getItem(substring);\n\n            return `<span data-type=\"variable\" data-id=\"${id}\" data-label=\"${label}\"></span>`;\n        });\n    }\n\n    return content;\n}\n\nfunction replaceVariablesWithText(value: string, variableToTextOptions: VariableToTextOptions) {\n    return value.replace(/<span data-type=\"variable\"(.*?)><\\/span>/gim, (match) => {\n        const idMatches = match.match(/data-id=\"(.*?)\"/gim);\n        const labelMatches = match.match(/data-label=\"(.*?)\"/gim);\n\n        if (idMatches?.length && labelMatches?.length) {\n            const id = idMatches[0].split('\"')[1];\n            const lbl = labelMatches[0].split('\"')[1];\n\n            return variableToTextOptions.getText({id, label: lbl});\n        }\n\n        return match;\n    });\n}\n\nfunction isToolbarVisible(toolbarConfig: RichTextEditorToolbarConfig) {\n    for (const key in toolbarConfig) {\n        const value = toolbarConfig[key];\n\n        if (isArray(value) ? value.length > 0 : value) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function RichTextEditor<P extends AnyObject>({\n    changeCallback,\n    changeParams,\n    className,\n    dataState,\n    helpText,\n    helpTextSuccess,\n    isDisabled,\n    isInvalid,\n    isRequired,\n    isSkeleton,\n    label,\n    placeholder,\n    ref,\n    showHelpTextIcon,\n    tooltipContent,\n    value,\n    variableToHtmlOptions,\n    variableToTextOptions,\n    ...props\n}: RichTextEditorProps<P>) {\n    const {focusProps, isFocused, isFocusVisible} = useFocusRing({within: true, isTextInput: false});\n    const prevIsFocusedRef = useRef(false);\n    const editorRef = useRef<Editor | null>(null);\n    const {hasError, isReadOnly, errorMessage} = useDataState(dataState, isInvalid, props.isReadOnly);\n    const isEditable = !isDisabled && !isReadOnly;\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const propsToolbarConfig = props.toolbarConfig;\n    const toolbarConfig: RichTextEditorToolbarConfig = useMemo(\n        () => ({\n            ...DEFAULT_TOOLBAR_CONFIG,\n            ...propsToolbarConfig\n        }),\n        [propsToolbarConfig]\n    );\n    const showToolbar = useMemo(() => isToolbarVisible(toolbarConfig), [toolbarConfig]);\n    const {fieldProps, labelProps} = useLabel({label, 'aria-label': props['aria-label']});\n    const {fieldProps: fieldProps2, helpTextProps} = useFieldHelpText({\n        dataState,\n        helpText,\n        helpTextSuccess,\n        isInvalid\n    });\n\n    const onCreate = ({editor}: EditorEvents['create']) => {\n        editorRef.current = editor;\n        editor.commands.setContent(createEditorContent(value, variableToHtmlOptions));\n    };\n\n    const onModalOpenChange = (isOpen: boolean) => {\n        setIsModalOpen(isOpen);\n    };\n\n    useEffect(() => {\n        const editor = editorRef.current;\n\n        if (editor) {\n            // Workaround for flushSync issue with Node views: https://github.com/ueberdosis/tiptap/issues/3764\n            queueMicrotask(() => {\n                editor.commands.setContent(createEditorContent(value, variableToHtmlOptions));\n            });\n        }\n    }, [value]);\n\n    useEffect(() => {\n        editorRef.current?.setEditable(isEditable);\n    }, [isEditable]);\n\n    useEffect(() => {\n        const editor = editorRef.current;\n\n        if (editor && isFocused !== prevIsFocusedRef.current && !isFocused && !isModalOpen) {\n            let outputValue = editor.getHTML();\n\n            if (variableToTextOptions) {\n                outputValue = replaceVariablesWithText(outputValue, variableToTextOptions);\n            }\n\n            if (outputValue === '<p></p>') {\n                outputValue = '';\n            }\n\n            safeCall(changeCallback, {...changeParams, value: outputValue} as ChangeArgs<P, string>);\n        }\n\n        prevIsFocusedRef.current = isFocused;\n    }, [isFocused]);\n\n    if (isSkeleton) {\n        const hasAnyHelpText = !!errorMessage || !!helpTextSuccess || !!helpText;\n\n        return (\n            <SkeletonField\n                className=\"skeleton-text-editor\"\n                hasHelpText={hasAnyHelpText}\n                hasLabel={!!label}\n                inputRectHeight={148}\n                size={Size.md}\n                style={{minWidth: '21rem'}}\n            />\n        );\n    }\n\n    return (\n        <Provider\n            values={[\n                [LabelContext, labelProps],\n                [TextContext, {slots: {description: helpTextProps}}]\n            ]}>\n            <div className={classNames('text-editor-field', className)} ref={ref}>\n                <Field\n                    dataState={dataState}\n                    helpText={helpText}\n                    helpTextSuccess={helpTextSuccess}\n                    isDisabled={isDisabled}\n                    isInvalid={hasError}\n                    isRequired={isRequired}\n                    label={label}\n                    showHelpTextIcon={showHelpTextIcon}\n                    size={Size.md}\n                    tooltipContent={tooltipContent}>\n                    <div\n                        {...focusProps}\n                        className=\"text-editor-wrapper\"\n                        data-disabled={!!isDisabled || undefined}\n                        data-focus-visible={isFocusVisible || undefined}\n                        data-focused={isFocused || undefined}\n                        data-invalid={!!hasError || undefined}\n                        data-readonly={!!isReadOnly || undefined}>\n                        <EditorProvider\n                            editable={isEditable}\n                            editorProps={{\n                                attributes: Object.entries({\n                                    ...fieldProps,\n                                    ...fieldProps2,\n                                    'aria-disabled': isDisabled,\n                                    'aria-invalid': hasError,\n                                    'aria-multiline': true,\n                                    'aria-readonly': isReadOnly,\n                                    'aria-required': isRequired,\n                                    class: 'text-editor',\n                                    role: 'textbox'\n                                })\n                                    .filter(([, val]) => !!val)\n                                    .reduce((obj, [key, val]) => {\n                                        obj[key] = val;\n\n                                        return obj;\n                                    }, {})\n                            }}\n                            extensions={[\n                                Document,\n                                Paragraph,\n                                Text,\n                                Placeholder.configure({\n                                    placeholder,\n                                    showOnlyWhenEditable: false\n                                }),\n                                HeadingExtension.extend(EnabledCheckExtension).configure({\n                                    isEnabled: toolbarConfig.heading\n                                }),\n                                Bold.extend(EnabledCheckExtension).configure({\n                                    isEnabled: toolbarConfig.bold\n                                }),\n                                Italic.extend(EnabledCheckExtension).configure({\n                                    isEnabled: toolbarConfig.italic\n                                }),\n                                Underline.extend(EnabledCheckExtension).configure({\n                                    isEnabled: toolbarConfig.underline\n                                }),\n                                ListItem,\n                                OrderedList.extend(EnabledCheckExtension).configure({\n                                    isEnabled: toolbarConfig.orderedList\n                                }),\n                                BulletList.extend(EnabledCheckExtension).configure({\n                                    isEnabled: toolbarConfig.bulletList\n                                }),\n                                Link.extend({inclusive: false}).configure({\n                                    openOnClick: false,\n                                    autolink: toolbarConfig.link,\n                                    defaultProtocol: 'https'\n                                }),\n                                VariableExtension\n                            ]}\n                            onCreate={onCreate}\n                            slotBefore={\n                                showToolbar ?\n                                    <div className=\"text-editor-toolbar-wrapper\">\n                                        <RichTextEditorToolbar\n                                            config={toolbarConfig}\n                                            isDisabled={!isEditable}\n                                            onModalOpenChange={onModalOpenChange}\n                                        />\n                                        <Divider size={Size.sm} />\n                                    </div>\n                                :   null\n                            }>\n                            <BubbleMenu\n                                className=\"text-editor__link-menu\"\n                                editor={null}\n                                shouldShow={({editor}) => !!editor.getAttributes('link').href && editor.isFocused}\n                                tippyOptions={{\n                                    maxWidth: 400,\n                                    placement: 'bottom'\n                                }}\n                                updateDelay={50}>\n                                <RichTextEditorLinkPreview onOpenChange={onModalOpenChange} />\n                            </BubbleMenu>\n                        </EditorProvider>\n                    </div>\n                </Field>\n            </div>\n        </Provider>\n    );\n}\n"]}