{"version":3,"file":"selectoptioncontentprops.js","sourceRoot":"","sources":["../../../../src/components/inputs/select/selectoptioncontentprops.ts"],"names":[],"mappings":"","sourcesContent":["import {SelectItemBase} from './selectitem.js';\nimport {ReactNode, RefAttributes, RefObject} from 'react';\nimport {Size} from '../../../constants/index.js';\n\nexport interface SelectOptionContentProps<TItem extends SelectItemBase<TItem>> extends RefAttributes<HTMLDivElement> {\n    /**\n     * Element to display at start of content body, e.g. icon.\n     */\n    bodyPrefix?: ReactNode;\n    /**\n     * Element to display at the end of content body, e.g. number, text, badge.\n     */\n    bodySuffix?: ReactNode;\n    /**\n     * CSS class name for the element.\n     */\n    className?: string;\n    /**\n     * Description text to display under label.\n     */\n    description?: string;\n    /**\n     * Description ref.\n     */\n    descriptionRef?: RefObject<HTMLElement | null>;\n    /**\n     * Whether item is disabled.\n     */\n    isDisabled?: boolean;\n    /**\n     * Whether item is expanded. Affects the expander icon and aria-label.\n     */\n    isExpanded?: boolean;\n    /**\n     * Whether item is loading. Will replace expander with spinner.\n     */\n    isLoading?: boolean;\n    /**\n     * Whether item is read-only.\n     */\n    isReadOnly?: boolean;\n    /**\n     * Select item data.\n     */\n    item: TItem;\n    /**\n     * By default, item text is used for label content internally. Can be used to replace that with custom label element.\n     */\n    label?: ReactNode;\n    /**\n     * Label ref.\n     */\n    labelRef?: RefObject<HTMLElement | null>;\n    /**\n     * Element to display at end of label text line.\n     */\n    labelSuffix?: ReactNode;\n    /**\n     * Hierarchical level of item. Affects the indentation. Should be provided as 0 if no indentation is wanted.\n     */\n    level: number;\n    /**\n     * Handler to call when expander is clicked. Expander is rendered when this prop is set.\n     * Visibility of the expander depends on item children being defined.\n     */\n    onToggleItem?: (item: TItem) => void;\n    /**\n     * Size of the element.\n     */\n    size: Size.xs | Size.sm | Size.md;\n    /**\n     * Element to display at the end of the element, e.g. icon.\n     */\n    suffix?: ReactNode;\n}\n"]}