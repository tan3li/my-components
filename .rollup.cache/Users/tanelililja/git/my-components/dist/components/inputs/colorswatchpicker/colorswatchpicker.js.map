{"version":3,"file":"colorswatchpicker.js","sourceRoot":"","sources":["../../../../src/components/inputs/colorswatchpicker/colorswatchpicker.tsx"],"names":[],"mappings":";;AAAA,OAAO,EAEH,iBAAiB,IAAI,0BAA0B,EAE/C,UAAU,EACb,MAAM,uBAAuB,CAAC;AAC/B,OAAO,EAAC,qBAAqB,EAA6B,MAAM,4BAA4B,CAAC;AAC7F,OAAO,EAAC,UAAU,EAAC,MAAM,8BAA8B,CAAC;AACxD,OAAO,EAAgB,SAAS,EAAE,QAAQ,EAAC,MAAM,OAAO,CAAC;AACzD,OAAO,EAAC,QAAQ,EAAC,MAAM,gCAAgC,CAAC;AACxD,OAAO,EAAC,QAAQ,EAAC,MAAM,kCAAkC,CAAC;AAC1D,OAAO,EAAC,yBAAyB,EAAC,MAAM,sDAAsD,CAAC;AA2B/F,MAAM,UAAU,iBAAiB,CAAC,EAAsE;IAArE,IAAA,SAAS,eAAA,EAAE,UAAU,gBAAA,EAAE,KAAK,WAAA,EAAE,IAAI,UAAA,EAAK,KAAK,cAA7C,4CAA8C,CAAD;IAC3E,IAAM,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC;IAC3B,IAAA,KAAoB,QAAQ,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,EAA7F,KAAK,QAAA,EAAE,QAAQ,QAA8E,CAAC;IAErG,IAAM,QAAQ,GAAG,UAAC,QAAe;QAC7B,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACnB,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IACvC,CAAC,CAAC;IAEF,SAAS,CAAC;QACN,QAAQ,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC;IAC/E,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;IAEnB,IAAI,UAAU,EAAE;QACZ,OAAO,KAAC,yBAAyB,IAAC,SAAS,EAAE,KAAK,CAAC,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,GAAI,CAAC;KACnG;IAED,OAAO,CACH,KAAC,0BAA0B,eACnB,KAAK,IACT,SAAS,EAAE,UAAU,CAAC,qBAAqB,EAAE,SAAS,CAAC,EACvD,QAAQ,EAAE,QAAQ,EAClB,KAAK,EAAE,KAAK,gBACX,KAAK,CAAC,GAAG,CAAC,UAAC,EAA8B;gBAA7B,KAAK,WAAA,EAAE,UAAU,gBAAA,EAAE,SAAS,eAAA;YAAM,OAAA,CAC3C,KAAC,qBAAqB,IAClB,KAAK,EAAE,KAAK,EACZ,UAAU,EAAE,UAAU,EACtB,SAAS,EAAE,SAAS,EAEpB,IAAI,EAAE,IAAI,IADL,KAAK,CAEZ,CACL;QAR8C,CAQ9C,CAAC,IACuB,CAChC,CAAC;AACN,CAAC","sourcesContent":["import {\n    Color,\n    ColorSwatchPicker as ReactAriaColorSwatchPicker,\n    ColorSwatchPickerProps as ReactAriaColorSwatchPickerProps,\n    parseColor\n} from 'react-aria-components';\nimport {ColorSwatchPickerItem, ColorSwatchPickerItemProps} from './colorswatchpickeritem.js';\nimport {classNames} from '../../../utils/classnames.js';\nimport {RefAttributes, useEffect, useState} from 'react';\nimport {isString} from '../../../utils/stringhelper.js';\nimport {safeCall} from '../../../utils/functionhelper.js';\nimport {SkeletonColorSwatchPicker} from '../../feedback/skeleton/skeletoncolorswatchpicker.js';\n\nexport interface IColorSwatchItem {\n    color: string;\n    isDisabled?: boolean;\n    isInvalid?: boolean;\n}\n\nexport interface ColorSwatchPickerProps\n    extends Omit<ReactAriaColorSwatchPickerProps, 'defaultValue'>,\n        RefAttributes<HTMLDivElement> {\n    /**\n     * Whether to show skeleton instead of an actual element.\n     */\n    isSkeleton?: boolean;\n    /**\n     * List of color items.\n     */\n    items: IColorSwatchItem[];\n    /**\n     * Size of the items.\n     */\n    size: ColorSwatchPickerItemProps['size'];\n}\n\nexport type {Color};\n\nexport function ColorSwatchPicker({className, isSkeleton, items, size, ...props}: ColorSwatchPickerProps) {\n    const initialValue = props.value;\n    const [value, setValue] = useState(isString(initialValue) ? parseColor(initialValue) : initialValue);\n\n    const onChange = (newValue: Color) => {\n        setValue(newValue);\n        safeCall(props.onChange, newValue);\n    };\n\n    useEffect(() => {\n        setValue(isString(initialValue) ? parseColor(initialValue) : initialValue);\n    }, [initialValue]);\n\n    if (isSkeleton) {\n        return <SkeletonColorSwatchPicker itemCount={items.length} layout={props.layout} size={size} />;\n    }\n\n    return (\n        <ReactAriaColorSwatchPicker\n            {...props}\n            className={classNames('color-swatch-picker', className)}\n            onChange={onChange}\n            value={value}>\n            {items.map(({color, isDisabled, isInvalid}) => (\n                <ColorSwatchPickerItem\n                    color={color}\n                    isDisabled={isDisabled}\n                    isInvalid={isInvalid}\n                    key={color}\n                    size={size}\n                />\n            ))}\n        </ReactAriaColorSwatchPicker>\n    );\n}\n"]}