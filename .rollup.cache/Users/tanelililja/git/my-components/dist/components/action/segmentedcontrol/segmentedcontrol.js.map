{"version":3,"file":"segmentedcontrol.js","sourceRoot":"","sources":["../../../../src/components/action/segmentedcontrol/segmentedcontrol.tsx"],"names":[],"mappings":";;AAAA,OAAO,EAAgB,SAAS,EAAE,QAAQ,EAAC,MAAM,OAAO,CAAC;AACzD,OAAO,EAAC,UAAU,EAAC,MAAM,2BAA2B,CAAC;AACrD,OAAO,EAAC,oBAAoB,EAAC,MAAM,wBAAwB,CAAC;AAC5D,OAAO,EAAC,QAAQ,EAAC,MAAM,+BAA+B,CAAC;AAwCvD,MAAM,UAAU,gBAAgB,CAAqC,EAMjC;IALhC,IAAA,SAAS,eAAA,EACT,KAAK,WAAA,EACL,iBAAiB,uBAAA,EACjB,GAAG,SAAA,EACA,KAAK,cALyD,kDAMpE,CADW;IAER,IAAM,kBAAkB,GAAG,KAAK,CAAC,WAAW,CAAC;IACvC,IAAA,KAAgC,QAAQ,CAC1C,kBAAkB,aAAlB,kBAAkB,cAAlB,kBAAkB,GAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAChE,EAFM,WAAW,QAAA,EAAE,cAAc,QAEjC,CAAC;IAEF,IAAM,QAAQ,GAAG,UAAC,EAAc;QAC5B,cAAc,CAAC,EAAE,CAAC,CAAC;QACnB,QAAQ,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;IACpC,CAAC,CAAC;IAEF,SAAS,CAAC;QACN,cAAc,CAAC,kBAAkB,aAAlB,kBAAkB,cAAlB,kBAAkB,GAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IAClF,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC,CAAC;IAEzB,OAAO,CACH,uBAAK,SAAS,EAAE,UAAU,CAAC,mBAAmB,EAAE,SAAS,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAC,OAAO,gBAC7E,KAAK,CAAC,GAAG,CAAC,UAAC,EAAiD;gBAAhD,EAAE,QAAA,EAAE,KAAK,WAAA,EAAE,SAAS,eAAA,EAAE,UAAU,gBAAA,EAAE,aAAa,mBAAA;YACxD,IAAM,UAAU,GAAG,WAAW,KAAK,EAAE,CAAC;YAEtC,OAAO,CACH,KAAC,oBAAoB,kBACL,SAAS,kBACP,UAAU,mBACT,UAAU,IAAI,SAAS,EACtC,UAAU,EAAE,UAAU,EAEtB,KAAK,EAAE,KAAK,EACZ,OAAO,EAAE,cAAM,OAAA,QAAQ,CAAC,EAAE,CAAC,EAAZ,CAAY,EAC3B,aAAa,EAAE,aAAa,IAHvB,EAAE,CAIT,CACL,CAAC;QACN,CAAC,CAAC,IACA,CACT,CAAC;AACN,CAAC","sourcesContent":["import {RefAttributes, useEffect, useState} from 'react';\nimport {classNames} from '../../../utils/classnames';\nimport {SegmentedControlItem} from './segmentedcontrolitem';\nimport {safeCall} from '../../../utils/functionhelper';\nimport {IconName} from '../../media';\n\ninterface ISegmentedControlItemBase<TSegmentId extends string = string> {\n    id: TSegmentId;\n    isDisabled?: boolean;\n    startIconName?: IconName;\n}\ninterface ISegmentedControlItemLabel<TSegmentId extends string = string> extends ISegmentedControlItemBase<TSegmentId> {\n    ariaLabel?: string;\n    label: string;\n}\ninterface ISegmentedControlItemAriaLabel<TSegmentId extends string = string>\n    extends ISegmentedControlItemBase<TSegmentId> {\n    ariaLabel: string;\n    label?: string;\n}\nexport type ISegmentedControlItem<TSegmentId extends string = string> =\n    | ISegmentedControlItemLabel<TSegmentId>\n    | ISegmentedControlItemAriaLabel<TSegmentId>;\n\nexport interface SegmentedControlProps<TSegmentId extends string = string> extends RefAttributes<HTMLDivElement> {\n    /**\n     * CSS class for the element\n     */\n    className?: string;\n    /**\n     * Segmented control items.\n     */\n    items: Array<ISegmentedControlItem<TSegmentId>>;\n    /**\n     * Selection change callback.\n     */\n    onSelectionChange?: (id: TSegmentId) => void;\n    /**\n     * Currently selected item key/id.\n     */\n    selectedKey?: TSegmentId;\n}\n\nexport function SegmentedControl<TSegmentId extends string = string>({\n    className,\n    items,\n    onSelectionChange,\n    ref,\n    ...props\n}: SegmentedControlProps<TSegmentId>) {\n    const initialSelectedKey = props.selectedKey;\n    const [selectedKey, setSelectedKey] = useState<TSegmentId | null>(\n        initialSelectedKey ?? (items.length > 0 ? items[0].id : null)\n    );\n\n    const onChange = (id: TSegmentId) => {\n        setSelectedKey(id);\n        safeCall(onSelectionChange, id);\n    };\n\n    useEffect(() => {\n        setSelectedKey(initialSelectedKey ?? (items.length > 0 ? items[0].id : null));\n    }, [initialSelectedKey]);\n\n    return (\n        <div className={classNames('segmented-control', className)} ref={ref} role=\"group\">\n            {items.map(({id, label, ariaLabel, isDisabled, startIconName}) => {\n                const isSelected = selectedKey === id;\n\n                return (\n                    <SegmentedControlItem\n                        aria-label={ariaLabel}\n                        aria-pressed={isSelected}\n                        data-selected={isSelected || undefined}\n                        isDisabled={isDisabled}\n                        key={id}\n                        label={label}\n                        onPress={() => onChange(id)}\n                        startIconName={startIconName}\n                    />\n                );\n            })}\n        </div>\n    );\n}\n"]}