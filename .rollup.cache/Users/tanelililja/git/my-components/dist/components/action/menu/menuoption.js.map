{"version":3,"file":"menuoption.js","sourceRoot":"","sources":["../../../../src/components/action/menu/menuoption.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n    MenuItem as ReactAriaMenuItem,\n    MenuItemProps as ReactAriaMenuItemProps,\n    MenuItemRenderProps\n} from 'react-aria-components';\nimport {classNames} from '../../../utils/classnames.js';\nimport {ReactNode, Ref, RefAttributes, useEffect, useRef, useState} from 'react';\nimport {IconName, iconNames} from '../../media/icon/icons.js';\nimport {ACTION_ITEM_CSS_CLASS, ActionItemContent, ActionItemContentProps} from '../actionitem/actionitem.js';\nimport {Tooltip, TooltipTrigger, TooltipType} from '../../feedback/index.js';\nimport {Position} from '../../../constants/index.js';\nimport {useFocusable} from 'react-aria';\nimport {mergeRefs} from '@react-aria/utils';\n\nexport interface MenuOptionProps extends ReactAriaMenuItemProps, RefAttributes<HTMLDivElement> {\n    actionLabel?: ReactNode;\n    description?: string;\n    isDestructive?: boolean;\n    isReadOnly?: boolean;\n    label?: ReactNode;\n    leftIconName?: IconName;\n    prefix?: ReactNode;\n    rightIconName?: IconName;\n    tooltip?: {\n        content: ReactNode;\n    };\n}\n\ninterface MenuOptionContentProps extends ActionItemContentProps, MenuItemRenderProps, RefAttributes<HTMLDivElement> {\n    isDestructive?: boolean;\n    isReadOnly?: boolean;\n    tooltip?: MenuOptionProps['tooltip'];\n}\n\nfunction MenuOptionContent({\n    hasSubmenu,\n    isDestructive,\n    isDisabled,\n    isFocusVisible,\n    isHovered,\n    isPressed,\n    isReadOnly,\n    leftIconName,\n    ref: outerRef,\n    rightIconName,\n    selectionMode,\n    ...props\n}: MenuOptionContentProps) {\n    const ref = useRef<HTMLDivElement>(null);\n    const {focusableProps} = useFocusable({}, ref);\n    const showLeftIcon = !!leftIconName || selectionMode !== 'none';\n    const showRightIcon = !!rightIconName || hasSubmenu;\n\n    return (\n        <div\n            {...focusableProps}\n            className={ACTION_ITEM_CSS_CLASS}\n            data-destructive={!!isDestructive || undefined}\n            data-disabled={isDisabled || undefined}\n            data-focus-visible={isFocusVisible || undefined}\n            data-hovered={(isHovered && !isReadOnly) || undefined}\n            data-pressed={(isPressed && !isReadOnly) || undefined}\n            data-readonly={!!isReadOnly || undefined}\n            ref={mergeRefs(ref, outerRef)}>\n            <ActionItemContent\n                {...props}\n                leftIconName={showLeftIcon ? (leftIconName ?? iconNames.InputCheck) : undefined}\n                rightIconName={showRightIcon ? (rightIconName ?? iconNames.ArrowRightFilled) : undefined}\n            />\n        </div>\n    );\n}\n\ninterface MenuOptionInnerProps extends MenuOptionContentProps {\n    tooltipRef?: Ref<HTMLDivElement>;\n}\n\nfunction MenuOptionInner({tooltipRef, ...props}: MenuOptionInnerProps) {\n    const [isTooltipOpen, setIsTooltipOpen] = useState(false);\n    const ref = useRef<HTMLDivElement>(null);\n    const {isFocusVisible, tooltip} = props;\n    const tooltipContent = tooltip?.content;\n\n    useEffect(() => {\n        setIsTooltipOpen(tooltipContent ? isFocusVisible : false);\n    }, [isFocusVisible]);\n\n    return (\n        <TooltipTrigger isDisabled={!tooltipContent} isOpen={isTooltipOpen} onOpenChange={setIsTooltipOpen}>\n            <MenuOptionContent {...props} ref={ref} />\n            <Tooltip offset={-2} position={Position.Left} ref={tooltipRef} triggerRef={ref} type={TooltipType.Plain}>\n                {tooltipContent}\n            </Tooltip>\n        </TooltipTrigger>\n    );\n}\n\nexport function MenuOption({\n    actionLabel,\n    className,\n    description,\n    isDestructive,\n    isReadOnly,\n    label,\n    leftIconName,\n    prefix,\n    rightIconName,\n    ref: outerRef,\n    tooltip,\n    ...props\n}: MenuOptionProps) {\n    const ref = useRef<HTMLDivElement>(null);\n\n    return (\n        <ReactAriaMenuItem\n            {...props}\n            className={classNames('menu-item', className)}\n            ref={mergeRefs(outerRef, ref, (node) => {\n                // RAC MenuItem does not support aria-disabled prop so need to do this the hard way...\n                if (node && isReadOnly) {\n                    node.setAttribute('aria-disabled', 'true');\n                }\n            })}>\n            {(itemRenderProps: MenuItemRenderProps) => (\n                <MenuOptionInner\n                    {...itemRenderProps}\n                    actionLabel={actionLabel}\n                    description={description}\n                    isDestructive={isDestructive}\n                    isReadOnly={isReadOnly}\n                    label={label}\n                    leftIconName={leftIconName}\n                    prefix={prefix}\n                    rightIconName={rightIconName}\n                    tooltip={tooltip}\n                    tooltipRef={(tooltipNode) => {\n                        // RAC MenuItem does not support Tooltip so need to handle the aria-describedby the hard way...\n                        const itemNode = ref.current;\n\n                        if (!itemNode) {\n                            return;\n                        }\n\n                        if (tooltipNode) {\n                            itemNode.setAttribute('aria-describedby', tooltipNode.getAttribute('id')!);\n                        } else {\n                            itemNode.removeAttribute('aria-describedby');\n                        }\n                    }}\n                />\n            )}\n        </ReactAriaMenuItem>\n    );\n}\n"]}