{"version":3,"file":"triggerelement.js","sourceRoot":"","sources":["../../../../src/components/action/triggerelement/triggerelement.tsx"],"names":[],"mappings":";;AAAA,OAAO,EAAoD,mBAAmB,EAAE,MAAM,EAAC,MAAM,OAAO,CAAC;AACrG,OAAO,EAAoB,UAAU,EAAE,SAAS,EAAE,YAAY,EAAC,MAAM,YAAY,CAAC;AAClF,OAAO,EAAC,UAAU,EAAC,MAAM,8BAA8B,CAAC;AACxD,OAAO,EAAC,eAAe,EAAC,MAAM,uCAAuC,CAAC;AACtE,OAAO,EAAC,UAAU,EAAC,MAAM,kCAAkC,CAAC;AAiB5D,MAAM,UAAU,cAAc,CAAC,EAQT;IAPlB,IAAA,QAAQ,cAAA,EACR,SAAS,eAAA,EACT,WAAW,iBAAA,EACN,QAAQ,SAAA,EACb,IAAI,UAAA,EACJ,KAAK,WAAA,EACF,KAAK,cAPmB,gEAQ9B,CADW;IAER,IAAM,WAAW,GAAG,WAAW,aAAX,WAAW,cAAX,WAAW,GAAI,eAAe,CAAC,IAAI,CAAC;IACxD,IAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;IACnB,IAAA,KAA0C,YAAY,CAAC,KAAK,CAAC,EAA5D,UAAU,gBAAA,EAAE,SAAS,eAAA,EAAE,cAAc,oBAAuB,CAAC;IAC7D,IAAA,WAAW,GAAI,SAAS,YAEvB,WAAW,EAAE,WAAW,IACrB,KAAK,GAEZ,GAAG,CACN,YANiB,CAMhB;IACF,IAAM,WAAW,GAA8B;QAC3C,SAAS,WAAA;QACT,cAAc,gBAAA;KACjB,CAAC;IAEF,mBAAmB,CAAC,QAAQ,EAAE,cAAM,OAAA,GAAG,CAAC,OAAO,EAAX,CAAW,EAAE,EAAE,CAAC,CAAC;IAErD,OAAO,CACH,KAAC,WAAW,eACJ,UAAU,CAAC,WAAW,EAAE,UAAU,CAAC,IACvC,SAAS,EAAE,UAAU,CAAC,iBAAiB,EAAE,SAAS,CAAC,EACnD,GAAG,EAAE,GAAG,EACR,IAAI,EAAE,IAAI,aAAJ,IAAI,cAAJ,IAAI,GAAI,WAAW,CAAC,IAAI,EAC9B,KAAK,wBAAM,WAAW,CAAC,KAAK,GAAK,KAAK,iBACrC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,QAAQ,IAC9C,CACjB,CAAC;AACN,CAAC","sourcesContent":["import {AriaRole, CSSProperties, ReactNode, RefAttributes, useImperativeHandle, useRef} from 'react';\nimport {AriaButtonOptions, mergeProps, useButton, useFocusRing} from 'react-aria';\nimport {classNames} from '../../../utils/classnames.js';\nimport {HTMLElementType} from '../../../constants/htmlelementtype.js';\nimport {isFunction} from '../../../utils/functionhelper.js';\n\ntype AllowedHTMLElementType = HTMLElementType.Span | HTMLElementType.Div | HTMLElementType.Button | HTMLElementType.A;\n\nexport interface TriggerElementRenderProps {\n    isFocused: boolean;\n    isFocusVisible: boolean;\n}\n\nexport interface TriggerElementProps extends AriaButtonOptions<AllowedHTMLElementType>, RefAttributes<any> {\n    children: ReactNode | ((renderProps: TriggerElementRenderProps) => ReactNode);\n    className?: string;\n    elementType?: AllowedHTMLElementType;\n    role?: AriaRole;\n    style?: CSSProperties;\n}\n\nexport function TriggerElement({\n    children,\n    className,\n    elementType,\n    ref: outerRef,\n    role,\n    style,\n    ...props\n}: TriggerElementProps) {\n    const ElementType = elementType ?? HTMLElementType.Span;\n    const ref = useRef(null);\n    const {focusProps, isFocused, isFocusVisible} = useFocusRing(props);\n    const {buttonProps} = useButton(\n        {\n            elementType: ElementType,\n            ...props\n        },\n        ref\n    );\n    const renderProps: TriggerElementRenderProps = {\n        isFocused,\n        isFocusVisible\n    };\n\n    useImperativeHandle(outerRef, () => ref.current, []);\n\n    return (\n        <ElementType\n            {...mergeProps(buttonProps, focusProps)}\n            className={classNames('trigger-element', className)}\n            ref={ref}\n            role={role ?? buttonProps.role}\n            style={{...buttonProps.style, ...style}}>\n            {isFunction(children) ? children(renderProps) : children}\n        </ElementType>\n    );\n}\n"]}