{"version":3,"file":"button.js","sourceRoot":"","sources":["../../../../src/components/action/button/button.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n    Button as ReactAriaButton,\n    ButtonProps as ReactAriaButtonProps,\n    Link as ReactAriaLink,\n    LinkProps\n} from 'react-aria-components';\nimport {classNames} from '../../../utils/classnames.js';\nimport {Size} from '../../../constants/size.js';\nimport {IconName} from '../../media/icon/icons.js';\nimport {Label} from '../../text/label/label.js';\nimport {ReactNode, Ref, RefAttributes} from 'react';\nimport {Icon} from '../../media/icon/icon.js';\nimport {Spinner, SpinnerVariant} from '../../feedback/spinner/spinner.js';\nimport {ButtonVariant} from '../constants/buttonvariant.js';\nimport {isString} from '../../../utils/stringhelper.js';\nimport {isNumber} from '../../../utils/objecthelper.js';\n\nexport const enum ButtonStyle {\n    Fill = 'fill',\n    Outline = 'outline',\n    Dash = 'dash',\n    Plain = 'plain',\n    Link = 'link'\n}\n\nexport const enum ButtonRole {\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    Button = 'button',\n    Link = 'link'\n}\n\nexport interface ButtonProps\n    extends Omit<ReactAriaButtonProps, 'style'>,\n        Omit<LinkProps, 'className' | 'style'>,\n        RefAttributes<HTMLButtonElement | HTMLAnchorElement> {\n    children: ReactNode;\n    /**\n     * WalkMe id for the Button\n     */\n    ['data-walkmeid']?: string;\n    /**\n     * Icon that will be rendered at the end of the Button\n     */\n    endIconName?: IconName;\n    /**\n     * Indicating if the Button is in a loading state\n     */\n    isLoading?: boolean;\n    /**\n     * Use inverted color tokens in the Button, only available for Neutral variant and Outlined and Plain style\n     */\n    inverted?: boolean;\n    /**\n     * Button can act as a link or button. Default: button.\n     */\n    role?: ButtonRole;\n    /**\n     * Size of the Button\n     */\n    size?: Size.sm | Size.md | Size.lg;\n    /**\n     * Icon that will be rendered at the start of the Button\n     */\n    startIconName?: IconName;\n    /**\n     * Style of the Button\n     */\n    style: ButtonStyle;\n    /**\n     * Variant of the Button\n     */\n    variant: ButtonVariant;\n}\n\nexport function Button({\n    'aria-label': ariaLabel,\n    className,\n    children,\n    endIconName,\n    inverted,\n    isLoading,\n    ref,\n    role = ButtonRole.Button,\n    size = Size.md,\n    startIconName,\n    style,\n    variant,\n    ...props\n}: ButtonProps) {\n    const isChildrenStrOrNum = isString(children) || isNumber(children);\n    const commonProps = {\n        'aria-label': ariaLabel ?? (isChildrenStrOrNum ? children.toString() : undefined),\n        className: classNames(`button ${style}-button ${style}-button--${variant} button--${size}`, className, {\n            'button--loading': isLoading,\n            'button--inverted': inverted\n        })\n    };\n    const content = (\n        <>\n            {isLoading && (\n                <Spinner\n                    className=\"button__spinner\"\n                    size={size === Size.lg ? Size.md : Size.sm}\n                    variant={SpinnerVariant.None}\n                />\n            )}\n            {startIconName && (\n                <Icon ariaHidden={true} className={`button__icon button__icon--${size}`} name={startIconName} />\n            )}\n            <Label className=\"button__label\" size={size}>\n                {isChildrenStrOrNum ?\n                    <strong>{children}</strong>\n                :   children}\n            </Label>\n            {endIconName && (\n                <Icon ariaHidden={true} className={`button__icon button__icon--${size}`} name={endIconName} />\n            )}\n        </>\n    );\n\n    if (role === ButtonRole.Link) {\n        return (\n            <ReactAriaLink {...props} {...commonProps} ref={ref as Ref<HTMLAnchorElement>}>\n                {content}\n            </ReactAriaLink>\n        );\n    }\n\n    return (\n        <ReactAriaButton {...props} {...commonProps} ref={ref as Ref<HTMLButtonElement>}>\n            {content}\n        </ReactAriaButton>\n    );\n}\n"]}