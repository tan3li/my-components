{"version":3,"file":"iconbutton.js","sourceRoot":"","sources":["../../../../src/components/action/iconbutton/iconbutton.tsx"],"names":[],"mappings":";;AAAA,OAAO,EACH,MAAM,IAAI,eAAe,EAEzB,IAAI,IAAI,aAAa,EAExB,MAAM,uBAAuB,CAAC;AAC/B,OAAO,EAAC,UAAU,EAAC,MAAM,8BAA8B,CAAC;AACxD,OAAO,EAAC,IAAI,EAAC,MAAM,4BAA4B,CAAC;AAEhD,OAAO,EAAC,IAAI,EAAC,MAAM,0BAA0B,CAAC;AAC9C,OAAO,EAAC,OAAO,EAAE,cAAc,EAAC,MAAM,mCAAmC,CAAC;AAE1E,OAAO,EAAC,UAAU,EAAc,MAAM,qBAAqB,CAAC;AA0C5D,MAAM,UAAU,UAAU,CAAC,EAWT;IAVd,IAAA,SAAS,eAAA,EACT,QAAQ,cAAA,EACR,QAAQ,cAAA,EACR,SAAS,eAAA,EACT,GAAG,SAAA,EACH,YAAwB,EAAxB,IAAI,mBAAG,UAAU,CAAC,MAAM,KAAA,EACxB,YAAc,EAAd,IAAI,mBAAG,IAAI,CAAC,EAAE,KAAA,EACd,KAAK,WAAA,EACL,OAAO,aAAA,EACJ,KAAK,cAVe,6FAW1B,CADW;IAER,IAAM,WAAW,GAAG;QAChB,SAAS,EAAE,UAAU,CACjB,6BAAsB,KAAK,qBAAW,KAAK,sBAAY,OAAO,sBAAY,IAAI,2BAAiB,IAAI,CAAE,EACrG,SAAS,EACT;YACI,iBAAiB,EAAE,SAAS;YAC5B,kBAAkB,EAAE,QAAQ;SAC/B,CACJ;KACJ,CAAC;IACF,IAAM,OAAO,GAAG,CACZ,8BACK,SAAS,IAAI,CACV,KAAC,OAAO,IACJ,SAAS,EAAC,iBAAiB,EAC3B,IAAI,EAAE,IAAI,KAAK,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,EAC1C,OAAO,EAAE,cAAc,CAAC,IAAI,GAC9B,CACL,EACD,KAAC,IAAI,IACD,SAAS,EAAE,UAAU,CAAC,4DAAqD,IAAI,CAAE,EAAE;oBAC/E,uBAAuB,EAAE,SAAS;iBACrC,CAAC,EACF,IAAI,EAAE,QAAQ,GAChB,IACH,CACN,CAAC;IAEF,IAAI,IAAI,KAAK,UAAU,CAAC,IAAI,EAAE;QAC1B,OAAO,CACH,KAAC,aAAa,eAAK,KAAK,EAAM,WAAW,IAAE,GAAG,EAAE,GAA6B,gBACxE,OAAO,IACI,CACnB,CAAC;KACL;IAED,OAAO,CACH,KAAC,eAAe,eAAK,KAAK,EAAM,WAAW,IAAE,GAAG,EAAE,GAA6B,gBAC1E,OAAO,IACM,CACrB,CAAC;AACN,CAAC","sourcesContent":["import {\n    Button as ReactAriaButton,\n    ButtonProps as ReactAriaButtonProps,\n    Link as ReactAriaLink,\n    LinkProps\n} from 'react-aria-components';\nimport {classNames} from '../../../utils/classnames.js';\nimport {Size} from '../../../constants/size.js';\nimport {IconName} from '../../media/icon/icons.js';\nimport {Icon} from '../../media/icon/icon.js';\nimport {Spinner, SpinnerVariant} from '../../feedback/spinner/spinner.js';\nimport {ButtonVariant} from '../constants/buttonvariant.js';\nimport {ButtonRole, ButtonStyle} from '../button/button.js';\nimport {Ref, RefAttributes} from 'react';\n\nexport interface IconButtonProps\n    extends Omit<ReactAriaButtonProps, 'children' | 'style'>,\n        Omit<LinkProps, 'children' | 'className' | 'style'>,\n        RefAttributes<HTMLButtonElement | HTMLAnchorElement> {\n    ['aria-label']: string;\n    /**\n     * WalkMe id for the Button\n     */\n    ['data-walkmeid']?: string;\n    /**\n     * Icon that will be rendered inside the IconButton\n     */\n    iconName: IconName;\n    /**\n     * Use inverted color tokens in the IconButton, only available for Neutral variant and Outlined and Plain style\n     */\n    inverted?: boolean;\n    /**\n     * Indicating if the IconButton is in a loading state\n     */\n    isLoading?: boolean;\n    /**\n     * Button can act as a link or button. Default: button.\n     */\n    role?: ButtonRole;\n    /**\n     * Size of the IconButton\n     */\n    size?: Size.sm | Size.md | Size.lg;\n    /**\n     * Style of the IconButton\n     */\n    style: ButtonStyle.Fill | ButtonStyle.Outline | ButtonStyle.Dash | ButtonStyle.Plain;\n    /**\n     * Variant of the IconButton\n     */\n    variant: ButtonVariant;\n}\n\nexport function IconButton({\n    className,\n    iconName,\n    inverted,\n    isLoading,\n    ref,\n    role = ButtonRole.Button,\n    size = Size.md,\n    style,\n    variant,\n    ...props\n}: IconButtonProps) {\n    const commonProps = {\n        className: classNames(\n            `button icon-button ${style}-button ${style}-button--${variant} button--${size} icon-button--${size}`,\n            className,\n            {\n                'button--loading': isLoading,\n                'button--inverted': inverted\n            }\n        )\n    };\n    const content = (\n        <>\n            {isLoading && (\n                <Spinner\n                    className=\"button__spinner\"\n                    size={size === Size.lg ? Size.md : Size.sm}\n                    variant={SpinnerVariant.None}\n                />\n            )}\n            <Icon\n                className={classNames(`button__icon icon-button__icon icon-button__icon--${size}`, {\n                    'button__icon--loading': isLoading\n                })}\n                name={iconName}\n            />\n        </>\n    );\n\n    if (role === ButtonRole.Link) {\n        return (\n            <ReactAriaLink {...props} {...commonProps} ref={ref as Ref<HTMLAnchorElement>}>\n                {content}\n            </ReactAriaLink>\n        );\n    }\n\n    return (\n        <ReactAriaButton {...props} {...commonProps} ref={ref as Ref<HTMLButtonElement>}>\n            {content}\n        </ReactAriaButton>\n    );\n}\n"]}