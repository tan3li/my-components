{"version":3,"file":"drawer.js","sourceRoot":"","sources":["../../../../src/components/feedback/drawer/drawer.tsx"],"names":[],"mappings":"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","sourcesContent":["import {Dialog, Modal, ModalOverlay, ModalOverlayProps} from 'react-aria-components';\nimport {classNames} from '../../../utils/classnames.js';\nimport {ReactNode, Ref, RefAttributes} from 'react';\nimport {OverlayHeader, OverlayHeaderVariant} from '../overlayheader/overlayheader.js';\nimport {OverlayFooter, OverlayFooterAction, OverlayFooterIconAction} from '../overlayfooter/overlayfooter.js';\nimport {useBodyScrollPosition} from '../../../hooks/usebodyscrollposition.js';\nimport {mergeRefs} from '@react-aria/utils';\nimport {isFunction} from '../../../utils/functionhelper.js';\n\nexport const enum DrawerVariant {\n    FullOverlay = 'full-overlay',\n    Standard = 'standard'\n}\n\nexport const enum DrawerWidth {\n    Medium = 'medium',\n    Wide = 'wide'\n}\n\nexport const enum DrawerHeaderStyle {\n    Emphasized = 'emphasized',\n    Standard = 'standard'\n}\n\nexport interface DrawerRenderProps {\n    close: () => void;\n}\n\nexport interface DrawerProps extends ModalOverlayProps, RefAttributes<HTMLDivElement> {\n    /**\n     * Aria-label for Dialog in case header does not contain Heading element.\n     */\n    ['aria-label']?: string;\n    /**\n     * Whether to focus header close button on initial render.\n     */\n    autoFocusClose?: boolean;\n    /**\n     * Drawer body content.\n     */\n    children: ReactNode;\n    /**\n     * Extra CSS class name of Drawer\n     */\n    className?: string;\n    /**\n     * Destructive action in the footer.\n     */\n    destructiveAction?: OverlayFooterIconAction;\n    /**\n     * Custom footer content. Overrides the default footer content rendering.\n     */\n    footer?: ReactNode | ((renderProps: DrawerRenderProps) => ReactNode);\n    /**\n     * Custom header content. Overrides the default header content rendering.\n     */\n    header?: ReactNode | ((renderProps: DrawerRenderProps) => ReactNode);\n    /**\n     * Custom content to display in header below the title.\n     */\n    headerDetails?: ReactNode;\n    /**\n     * Determines the background color of the header element.\n     */\n    headerStyle?: DrawerHeaderStyle;\n    /**\n     * Primary action in the footer.\n     */\n    primaryAction?: OverlayFooterAction;\n    /**\n     * Ref to Drawer content which has the scroll bar.\n     */\n    scrollRef?: Ref<HTMLDivElement>;\n    /**\n     * Secondary action in the footer.\n     */\n    secondaryAction?: OverlayFooterAction;\n    /**\n     * Whether Drawer entering and exiting should be animated. Slide animation is shown by default.\n     */\n    shouldAnimate?: boolean;\n    /**\n     * Whether to show loading indicator in header.\n     * Applied only when using the default header rendering (= header prop not set).\n     */\n    showHeaderLoadingIndicator?: boolean;\n    /**\n     * Title to display in header.\n     * Applied only when using the default header rendering (= header prop not set).\n     */\n    title?: ReactNode;\n    /**\n     * Variant of the Drawer. Defines if user can act with the content behind the Drawer.\n     */\n    variant?: DrawerVariant;\n    /**\n     * Width of the drawer.\n     */\n    width?: DrawerWidth;\n}\n\nexport function Drawer({\n    'aria-label': ariaLabel,\n    autoFocusClose,\n    children,\n    className,\n    destructiveAction,\n    footer,\n    header,\n    headerDetails,\n    headerStyle = DrawerHeaderStyle.Standard,\n    isDismissable,\n    primaryAction,\n    scrollRef,\n    secondaryAction,\n    showHeaderLoadingIndicator,\n    shouldAnimate = true,\n    title,\n    variant = DrawerVariant.Standard,\n    width = DrawerWidth.Medium,\n    ...props\n}: DrawerProps) {\n    const {bodyScrollPosition, onScroll, onBodyRef} = useBodyScrollPosition();\n\n    const renderContent = ({close}: DrawerRenderProps) => {\n        const headerCssClass = `drawer__header drawer__header--${headerStyle}`;\n        const footerCssClass = 'drawer__footer';\n        let headerElement: ReactNode, footerElement: ReactNode;\n\n        if (header) {\n            headerElement = <div className={headerCssClass}>{isFunction(header) ? header({close}) : header}</div>;\n        } else if (title) {\n            headerElement = (\n                <OverlayHeader\n                    autoFocusClose={autoFocusClose}\n                    className={headerCssClass}\n                    details={headerDetails}\n                    onClose={close}\n                    showLoadingIndicator={showHeaderLoadingIndicator}\n                    variant={OverlayHeaderVariant.Neutral}>\n                    {title}\n                </OverlayHeader>\n            );\n        }\n\n        if (footer) {\n            footerElement = <div className={footerCssClass}>{isFunction(footer) ? footer({close}) : footer}</div>;\n        } else if (primaryAction) {\n            footerElement = (\n                <OverlayFooter\n                    className={footerCssClass}\n                    closeCallback={close}\n                    destructiveAction={destructiveAction}\n                    primaryAction={primaryAction}\n                    secondaryAction={secondaryAction}\n                />\n            );\n        }\n\n        return (\n            <>\n                {headerElement}\n                <div className=\"drawer__body\" onScroll={onScroll} ref={mergeRefs(scrollRef, onBodyRef)}>\n                    {children}\n                </div>\n                {footerElement}\n            </>\n        );\n    };\n\n    return (\n        <ModalOverlay\n            {...props}\n            className={classNames(`drawer-overlay drawer-overlay--${variant}`, {\n                'drawer-overlay--animated': shouldAnimate\n            })}\n            isDismissable={isDismissable ?? true}>\n            <Modal className={classNames(`drawer drawer--${width}`, className)}>\n                <Dialog\n                    aria-label={ariaLabel}\n                    className={`drawer__dialog drawer__dialog--scroll-${bodyScrollPosition}`}>\n                    {renderContent}\n                </Dialog>\n            </Modal>\n        </ModalOverlay>\n    );\n}\n"]}