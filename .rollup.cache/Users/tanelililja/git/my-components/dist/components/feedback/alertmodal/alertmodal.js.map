{"version":3,"file":"alertmodal.js","sourceRoot":"","sources":["../../../../src/components/feedback/alertmodal/alertmodal.tsx"],"names":[],"mappings":";;AAAA,OAAO,EAAC,MAAM,EAAE,KAAK,EAAE,YAAY,EAAoB,MAAM,uBAAuB,CAAC;AAErF,OAAO,EAAC,aAAa,EAAuB,MAAM,mCAAmC,CAAC;AAGtF,OAAO,EAAC,aAAa,EAA+C,MAAM,mCAAmC,CAAC;AAC9G,OAAO,EAAC,UAAU,EAAC,MAAM,kCAAkC,CAAC;AAC5D,OAAO,EAAC,UAAU,EAAC,MAAM,8BAA8B,CAAC;AACxD,OAAO,EAAC,qBAAqB,EAAC,MAAM,yCAAyC,CAAC;AAC9E,OAAO,EAAC,iBAAiB,EAAC,MAAM,gCAAgC,CAAC;AAmDjE,MAAM,UAAU,UAAU,CAAC,EAcT;;IAbd,IAAA,cAAc,oBAAA,EACd,QAAQ,cAAA,EACR,SAAS,eAAA,EACT,iBAAiB,uBAAA,EACjB,UAAU,gBAAA,EACV,uBAAuB,6BAAA,EACvB,aAAa,mBAAA,EACb,eAAe,qBAAA,EACf,sBAAsB,4BAAA,EACtB,IAAI,UAAA,EACJ,KAAK,WAAA,EACL,OAAO,aAAA,EACJ,KAAK,cAbe,mMAc1B,CADW;IAEF,IAAA,KAA4C,qBAAqB,EAAE,EAAlE,kBAAkB,wBAAA,EAAE,QAAQ,cAAA,EAAE,SAAS,eAA2B,CAAC;IAE1E,IAAM,SAAS,GAAG,CAAC,CAAC,iBAAiB,CAAC,aAAa,CAAC,IAAI,iBAAiB,CAAC,eAAe,CAAC,CAAC,CAAC;IAE5F,IAAM,aAAa,GAAG,UAAC,EAAO;YAAN,KAAK,WAAA;QAAM,OAAA,CAC/B,8BACI,KAAC,aAAa,aACV,cAAc,EAAE,cAAc,EAC9B,SAAS,EAAC,4BAA4B,EACtC,QAAQ,EAAE,UAAU,EACpB,OAAO,EAAE,KAAK,EACd,OAAO,EAAE,OAAO,gBACf,KAAK,IACM,EAChB,uBACI,SAAS,EAAE,UAAU,CAAC,0BAA0B,EAAE;wBAC9C,qCAAqC,EAAE,CAAC,SAAS;qBACpD,CAAC,EACF,QAAQ,EAAE,QAAQ,EAClB,GAAG,EAAE,sBAAsB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS;oBAC9C,gDAAgD;oBAChD,+DAA+D;oBAC/D,QAAQ,EAAE,CAAC,gBACV,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,IAChD,EACL,SAAS,IAAI,CACV,KAAC,aAAa,IACV,SAAS,EAAC,4BAA4B,EACtC,aAAa,EAAE,KAAK,EACpB,iBAAiB,EAAE,iBAAiB,EACpC,aAAa,EAAE,aAAa,EAC5B,eAAe,EAAE,eAAe,GAClC,CACL,IACF,CACN;IA/BkC,CA+BlC,CAAC;IAEF,OAAO,CACH,KAAC,YAAY,eACL,KAAK,IACT,SAAS,EAAE,UAAU,CAAC,qBAAqB,EAAE,SAAS,EAAE;YACpD,iCAAiC,EAAE,sBAAsB;SAC5D,CAAC,EACF,aAAa,EAAE,uBAAuB,gBACtC,uBAAK,SAAS,EAAC,qBAAqB,gBAChC,KAAC,KAAK,aAAC,SAAS,EAAE,mCAA4B,IAAI,CAAE,gBAChD,KAAC,MAAM,aACH,SAAS,EAAE,UAAU,CAAC,oBAAoB;wBACtC,GAAC,qCAA8B,kBAAkB,CAAE,IAC/C,CAAC,sBAAsB,IAAI,kBAAkB;4BACnD,gBACD,aAAa,IACT,IACL,IACN,IACK,CAClB,CAAC;AACN,CAAC","sourcesContent":["import {Dialog, Modal, ModalOverlay, ModalOverlayProps} from 'react-aria-components';\nimport {ReactNode, RefAttributes} from 'react';\nimport {OverlayHeader, OverlayHeaderVariant} from '../overlayheader/overlayheader.js';\nimport {Size} from '../../../constants/size.js';\nimport {IconName} from '../../media/icon/icons.js';\nimport {OverlayFooter, OverlayFooterAction, OverlayFooterIconAction} from '../overlayfooter/overlayfooter.js';\nimport {isFunction} from '../../../utils/functionhelper.js';\nimport {classNames} from '../../../utils/classnames.js';\nimport {useBodyScrollPosition} from '../../../hooks/usebodyscrollposition.js';\nimport {isNullOrUndefined} from '../../../utils/objecthelper.js';\n\nexport interface AlertModalProps\n    extends Omit<ModalOverlayProps, 'children' | 'isDismissable'>,\n        RefAttributes<HTMLDivElement> {\n    /**\n     * Whether to focus header close button on initial render.\n     */\n    autoFocusClose?: boolean;\n    /**\n     * Modal body content.\n     */\n    children: ReactNode | ((closeCallback: () => void) => ReactNode);\n    /**\n     * Destructive action in the footer.\n     */\n    destructiveAction?: OverlayFooterIconAction;\n    /**\n     * Icon to display in the header. Appearance depends on the variant.\n     */\n    headerIcon?: IconName;\n    /**\n     * Whether modal can be closed by clicking outside it.\n     */\n    isDismissibleOnOutClick?: boolean;\n    /**\n     * Primary action in the footer.\n     */\n    primaryAction?: OverlayFooterAction;\n    /**\n     * Secondary action in the footer.\n     */\n    secondaryAction?: OverlayFooterAction;\n    /**\n     * Whether to scroll window viewport instead of body content if it does not fit the screen.\n     */\n    shouldScrollInViewport?: boolean;\n    /**\n     * Size determines the width of the modal.\n     */\n    size: Size.sm | Size.md | Size.lg | Size.xl | Size.xxl;\n    /**\n     * Title to display in the header.\n     */\n    title: ReactNode;\n    /**\n     * Header variant. Mainly affects the headerIcon.\n     */\n    variant?: OverlayHeaderVariant;\n}\n\nexport function AlertModal({\n    autoFocusClose,\n    children,\n    className,\n    destructiveAction,\n    headerIcon,\n    isDismissibleOnOutClick,\n    primaryAction,\n    secondaryAction,\n    shouldScrollInViewport,\n    size,\n    title,\n    variant,\n    ...props\n}: AlertModalProps) {\n    const {bodyScrollPosition, onScroll, onBodyRef} = useBodyScrollPosition();\n\n    const hasFooter = !(isNullOrUndefined(primaryAction) && isNullOrUndefined(secondaryAction));\n\n    const renderContent = ({close}) => (\n        <>\n            <OverlayHeader\n                autoFocusClose={autoFocusClose}\n                className=\"alert-modal-dialog__header\"\n                iconName={headerIcon}\n                onClose={close}\n                variant={variant}>\n                {title}\n            </OverlayHeader>\n            <div\n                className={classNames('alert-modal-dialog__body', {\n                    'alert-modal-dialog__body--no-footer': !hasFooter\n                })}\n                onScroll={onScroll}\n                ref={shouldScrollInViewport ? null : onBodyRef}\n                // Scrollable body should be keyboard-focusable.\n                // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex\n                tabIndex={0}>\n                {isFunction(children) ? children(close) : children}\n            </div>\n            {hasFooter && (\n                <OverlayFooter\n                    className=\"alert-modal-dialog__footer\"\n                    closeCallback={close}\n                    destructiveAction={destructiveAction}\n                    primaryAction={primaryAction}\n                    secondaryAction={secondaryAction}\n                />\n            )}\n        </>\n    );\n\n    return (\n        <ModalOverlay\n            {...props}\n            className={classNames('alert-modal-overlay', className, {\n                'alert-modal-overlay--scrollable': shouldScrollInViewport\n            })}\n            isDismissable={isDismissibleOnOutClick}>\n            <div className=\"alert-modal-wrapper\">\n                <Modal className={`alert-modal alert-modal--${size}`}>\n                    <Dialog\n                        className={classNames('alert-modal-dialog', {\n                            [`alert-modal-dialog--scroll-${bodyScrollPosition}`]:\n                                !shouldScrollInViewport && bodyScrollPosition\n                        })}>\n                        {renderContent}\n                    </Dialog>\n                </Modal>\n            </div>\n        </ModalOverlay>\n    );\n}\n"]}