{"version":3,"file":"toasthandler.js","sourceRoot":"","sources":["../../../../src/components/feedback/toast/toasthandler.ts"],"names":[],"mappings":";AAAA,OAAO,EAGH,KAAK,IAAI,QAAQ,EAGpB,MAAM,0BAA0B,CAAC;AAOlC,IAAM,eAAe,GAAG,QAAQ,CAAC,OAAO,CAAC;AAEzC,kFAAkF;AAClF;IAMI;QACI,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;QAC1B,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,gBAAgB,GAAG,IAAI,GAAG,EAAE,CAAC;QAClC,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;QAEjB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC3C,CAAC;IAEM,0BAAG,GAAV,UAAW,OAA+B,EAAE,IAA6B;QACrE,IAAM,EAAE,GAAG,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,CAAC;QAEvC,IAAI,IAAI,CAAC,gBAAgB,CAAC,IAAI,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACrD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;gBAClB,OAAO,SAAA;gBACP,OAAO,wBAAM,IAAI,KAAE,EAAE,IAAA,GAAC;aACzB,CAAC,CAAC;SACN;aAAM;YACH,QAAQ,CAAC,OAAO,wBAAM,IAAI,KAAE,EAAE,IAAA,IAAE,CAAC;YACjC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;SACjC;QAED,OAAO,EAAE,CAAC;IACd,CAAC;IAEM,8BAAO,GAAd,UAAe,OAAe;QAC1B,eAAe,CAAC,OAAO,CAAC,CAAC;QACzB,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAEtC,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,gBAAgB,CAAC,IAAI,GAAG,IAAI,CAAC,gBAAgB,EAAE;YAC7E,IAAA,KAAqB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAG,EAA7C,OAAO,aAAA,EAAE,OAAO,aAA6B,CAAC;YAErD,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;SAC9B;IACL,CAAC;IACL,mBAAC;AAAD,CAAC,AA1CD,IA0CC;AAED,MAAM,CAAC,IAAM,YAAY,GAAG,IAAI,YAAY,EAAE,CAAC;AAE/C,QAAQ,CAAC,OAAO,GAAG,YAAY,CAAC,OAAO,CAAC","sourcesContent":["import {\n    Renderable,\n    Toast,\n    toast as rhtToast,\n    ToastOptions as RHTToastOptions,\n    ValueOrFunction\n} from 'react-hot-toast/headless';\n\ninterface ToastParams {\n    message: ValueOrFunction<Renderable, Toast>;\n    options: RHTToastOptions;\n}\n\nconst rhtToastDismiss = rhtToast.dismiss;\n\n// This is layer on top of React Hot Toast which adds queueing feature for toasts.\nclass ToastHandler {\n    private readonly _maxVisibleCount: number;\n    private _toastQueue: ToastParams[];\n    private _visibleToastIds: Set<string>;\n    private _lastId: number;\n\n    constructor() {\n        this._maxVisibleCount = 7;\n        this._toastQueue = [];\n        this._visibleToastIds = new Set();\n        this._lastId = 0;\n\n        this.add = this.add.bind(this);\n        this.dismiss = this.dismiss.bind(this);\n    }\n\n    public add(message: ToastParams['message'], opts?: ToastParams['options']): string {\n        const id = (++this._lastId).toString();\n\n        if (this._visibleToastIds.size >= this._maxVisibleCount) {\n            this._toastQueue.push({\n                message,\n                options: {...opts, id}\n            });\n        } else {\n            rhtToast(message, {...opts, id});\n            this._visibleToastIds.add(id);\n        }\n\n        return id;\n    }\n\n    public dismiss(toastId: string) {\n        rhtToastDismiss(toastId);\n        this._visibleToastIds.delete(toastId);\n\n        if (this._toastQueue.length > 0 && this._visibleToastIds.size < this._maxVisibleCount) {\n            const {message, options} = this._toastQueue.shift()!;\n\n            this.add(message, options);\n        }\n    }\n}\n\nexport const toastHandler = new ToastHandler();\n\nrhtToast.dismiss = toastHandler.dismiss;\n"]}