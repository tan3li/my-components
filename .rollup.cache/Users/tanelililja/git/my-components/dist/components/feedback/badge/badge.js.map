{"version":3,"file":"badge.js","sourceRoot":"","sources":["../../../../src/components/feedback/badge/badge.tsx"],"names":[],"mappings":";;AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,8BAA8B,CAAC;AAExD,OAAO,EAAC,IAAI,EAAE,QAAQ,EAAC,MAAM,0BAA0B,CAAC;AAExD,OAAO,EAAC,KAAK,EAAC,MAAM,2BAA2B,CAAC;AAChD,OAAO,EAAC,IAAI,EAAC,MAAM,4BAA4B,CAAC;AAChD,OAAO,EAAC,kBAAkB,EAAC,MAAM,mDAAmD,CAAC;AACrF,OAAO,EAAC,QAAQ,EAAC,MAAM,gCAAgC,CAAC;AACxD,OAAO,EAAC,QAAQ,EAAC,MAAM,gCAAgC,CAAC;AAExD,MAAM,CAAN,IAAkB,UAIjB;AAJD,WAAkB,UAAU;IACxB,2BAAa,CAAA;IACb,iCAAmB,CAAA;IACnB,6BAAe,CAAA;AACnB,CAAC,EAJiB,UAAU,KAAV,UAAU,QAI3B;AAED,MAAM,CAAN,IAAkB,YAMjB;AAND,WAAkB,YAAY;IAC1B,mCAAmB,CAAA;IACnB,mCAAmB,CAAA;IACnB,iCAAiB,CAAA;IACjB,mCAAmB,CAAA;IACnB,2CAA2B,CAAA;AAC/B,CAAC,EANiB,YAAY,KAAZ,YAAY,QAM7B;AAqCD,SAAS,YAAY,CAAC,OAAqB;IACvC,IAAM,eAAe,GAAG,kBAAkB,EAAE,CAAC;IAE7C,QAAQ,OAAO,EAAE;QACb,KAAK,YAAY,CAAC,WAAW;YACzB,OAAO,eAAe,CAAC,MAAM,CAAC,CAAC;QACnC,KAAK,YAAY,CAAC,OAAO;YACrB,OAAO,eAAe,CAAC,SAAS,CAAC,CAAC;QACtC,KAAK,YAAY,CAAC,MAAM;YACpB,OAAO,eAAe,CAAC,QAAQ,CAAC,CAAC;QACrC,KAAK,YAAY,CAAC,OAAO;YACrB,OAAO,eAAe,CAAC,SAAS,CAAC,CAAC;QACtC;YACI,OAAO,eAAe,CAAC,SAAS,CAAC,CAAC;KACzC;AACL,CAAC;AAED,MAAM,UAAU,KAAK,CAAC,EAUT;QATK,SAAS,mBAAA,EACvB,QAAQ,cAAA,EACR,SAAS,eAAA,EACT,QAAQ,cAAA,EACR,UAAU,gBAAA,EACV,GAAG,SAAA,EACH,IAAI,UAAA,EACJ,KAAK,WAAA,EACL,OAAO,aAAA;IAEP,IAAM,qBAAqB,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACvE,IAAM,SAAS,GAAG,YAAY,CAAC,OAAO,CAAC,CAAC;IAExC,OAAO,CACH,uCACgB,SAAS,EACrB,SAAS,EAAE,UAAU,CAAC,uBAAgB,OAAO,cAAI,KAAK,oBAAU,KAAK,qBAAW,OAAO,CAAE,EAAE,SAAS,EAAE;YAClG,iBAAiB,EAAE,UAAU;SAChC,CAAC,EACF,GAAG,EAAE,GAAG,EACR,IAAI,EAAE,IAAI,iBACT,QAAQ,IAAI,KAAC,IAAI,IAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAC,aAAa,EAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,CAAC,EAAE,GAAI,EACtG,KAAC,KAAK,aAAC,SAAS,EAAC,cAAc,EAAC,IAAI,EAAE,IAAI,CAAC,EAAE,gBACxC,qBAAqB,CAAC,CAAC;oBACpB,2BAAS,QAAQ,GAAU;oBAC/B,CAAC,CAAG,QAAQ,IACR,KACL,CACV,CAAC;AACN,CAAC","sourcesContent":["import {classNames} from '../../../utils/classnames.js';\nimport {AriaRole, ReactNode, RefAttributes} from 'react';\nimport {Icon, IconSize} from '../../media/icon/icon.js';\nimport {IconName} from '../../media/icon/icons.js';\nimport {Label} from '../../text/label/label.js';\nimport {Size} from '../../../constants/size.js';\nimport {useTranslateCommon} from '../../../hooks/translations/usetranslatecommon.js';\nimport {isString} from '../../../utils/stringhelper.js';\nimport {isNumber} from '../../../utils/objecthelper.js';\n\nexport const enum BadgeStyle {\n    Fill = 'fill',\n    Outline = 'outline',\n    Plain = 'plain'\n}\n\nexport const enum BadgeVariant {\n    Neutral = 'neutral',\n    Success = 'success',\n    Danger = 'danger',\n    Warning = 'warning',\n    Informative = 'informative'\n}\n\nexport interface BadgeProps extends RefAttributes<HTMLDivElement> {\n    /**\n     * Aria label for screen readers.\n     */\n    ['aria-label']?: string;\n    /**\n     * Content of the badge.\n     */\n    children: ReactNode;\n    /**\n     * CSS class name for the element.\n     */\n    className?: string;\n    /**\n     * Icon for badge.\n     */\n    iconName?: IconName;\n    /**\n     * Whether badge is disabled.\n     */\n    isDisabled?: boolean;\n    /**\n     * Aria role for the element.\n     */\n    role?: AriaRole;\n    /**\n     * Visual style for the badge.\n     */\n    style: BadgeStyle;\n    /**\n     * Variant of the badge.\n     */\n    variant: BadgeVariant;\n}\n\nfunction useIconLabel(variant: BadgeVariant) {\n    const translateCommon = useTranslateCommon();\n\n    switch (variant) {\n        case BadgeVariant.Informative:\n            return translateCommon('info');\n        case BadgeVariant.Success:\n            return translateCommon('success');\n        case BadgeVariant.Danger:\n            return translateCommon('danger');\n        case BadgeVariant.Warning:\n            return translateCommon('warning');\n        default:\n            return translateCommon('neutral');\n    }\n}\n\nexport function Badge({\n    'aria-label': ariaLabel,\n    children,\n    className,\n    iconName,\n    isDisabled,\n    ref,\n    role,\n    style,\n    variant\n}: BadgeProps) {\n    const isStringOrNumberChild = isString(children) || isNumber(children);\n    const iconLabel = useIconLabel(variant);\n\n    return (\n        <span\n            aria-label={ariaLabel}\n            className={classNames(`badge badge--${variant} ${style}-badge ${style}-badge--${variant}`, className, {\n                'badge--disabled': isDisabled\n            })}\n            ref={ref}\n            role={role}>\n            {iconName && <Icon ariaLabel={iconLabel} className=\"badge__icon\" name={iconName} size={IconSize.XS} />}\n            <Label className=\"badge__label\" size={Size.sm}>\n                {isStringOrNumberChild ?\n                    <strong>{children}</strong>\n                :   children}\n            </Label>\n        </span>\n    );\n}\n"]}