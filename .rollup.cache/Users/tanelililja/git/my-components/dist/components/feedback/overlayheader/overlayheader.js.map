{"version":3,"file":"overlayheader.js","sourceRoot":"","sources":["../../../../src/components/feedback/overlayheader/overlayheader.tsx"],"names":[],"mappings":";;AAAA,OAAO,EAAC,OAAO,EAAC,MAAM,+BAA+B,CAAC;AACtD,OAAO,EAAC,IAAI,EAAC,MAAM,4BAA4B,CAAC;AAEhD,OAAO,EAAC,UAAU,EAAC,MAAM,uCAAuC,CAAC;AACjE,OAAO,EAAC,kBAAkB,EAAC,MAAM,mDAAmD,CAAC;AACrF,OAAO,EAAW,SAAS,EAAC,MAAM,2BAA2B,CAAC;AAC9D,OAAO,EAAC,WAAW,EAAC,MAAM,+BAA+B,CAAC;AAC1D,OAAO,EAAC,aAAa,EAAC,MAAM,yCAAyC,CAAC;AACtE,OAAO,EAAC,UAAU,EAAC,MAAM,8BAA8B,CAAC;AACxD,OAAO,EAAC,IAAI,EAAE,QAAQ,EAAC,MAAM,0BAA0B,CAAC;AACxD,OAAO,EAAC,2BAA2B,EAAC,MAAM,+CAA+C,CAAC;AAE1F,MAAM,CAAN,IAAkB,oBAIjB;AAJD,WAAkB,oBAAoB;IAClC,2CAAmB,CAAA;IACnB,2CAAmB,CAAA;IACnB,yCAAiB,CAAA;AACrB,CAAC,EAJiB,oBAAoB,KAApB,oBAAoB,QAIrC;AAcD,MAAM,UAAU,aAAa,CAAC,EAWT;QAVjB,sBAAqB,EAArB,cAAc,mBAAG,IAAI,KAAA,EACrB,QAAQ,cAAA,EACR,SAAS,eAAA,EACT,OAAO,aAAA,EACP,QAAQ,cAAA,EACR,OAAO,aAAA,EACP,QAAQ,cAAA,EACR,GAAG,SAAA,EACH,oBAAoB,0BAAA,EACpB,eAAsC,EAAtC,OAAO,mBAAG,oBAAoB,CAAC,OAAO,KAAA;IAEtC,IAAM,eAAe,GAAG,kBAAkB,EAAE,CAAC;IAE7C,OAAO,CACH,wBAAK,SAAS,EAAE,UAAU,CAAC,yCAAkC,OAAO,CAAE,EAAE,SAAS,CAAC,EAAE,GAAG,EAAE,GAAG,iBACvF,QAAQ,IAAI,CACT,uBAAK,SAAS,EAAC,2BAA2B,gBACtC,KAAC,IAAI,IAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,CAAC,EAAE,GAAI,IACzC,CACT,EACD,wBAAK,SAAS,EAAC,uBAAuB,iBAClC,KAAC,OAAO,aAAC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,EAAC,OAAO,gBAC/B,QAAQ,IACH,EACT,OAAO,KACN,EACL,QAAQ,IAAI,CACT,KAAC,UAAU,kBACK,eAAe,CAAC,QAAQ,CAAC,EACrC,QAAQ,EAAE,SAAS,CAAC,OAAO,EAC3B,OAAO,EAAE,QAAQ,EACjB,KAAK,EAAE,WAAW,CAAC,KAAK,EACxB,OAAO,EAAE,aAAa,CAAC,OAAO,GAChC,CACL,EACD,KAAC,UAAU,kBACK,eAAe,CAAC,OAAO,CAAC,EACpC,SAAS,EAAE,cAAc,EACzB,QAAQ,EAAE,SAAS,CAAC,WAAW,EAC/B,OAAO,EAAE,OAAO,EAChB,KAAK,EAAE,WAAW,CAAC,KAAK,EACxB,OAAO,EAAE,aAAa,CAAC,OAAO,GAChC,EACD,oBAAoB,IAAI,KAAC,2BAA2B,KAAG,KACtD,CACT,CAAC;AACN,CAAC","sourcesContent":["import {Heading} from '../../text/heading/heading.js';\nimport {Size} from '../../../constants/size.js';\nimport {ReactNode, RefAttributes} from 'react';\nimport {IconButton} from '../../action/iconbutton/iconbutton.js';\nimport {useTranslateCommon} from '../../../hooks/translations/usetranslatecommon.js';\nimport {IconName, iconNames} from '../../media/icon/icons.js';\nimport {ButtonStyle} from '../../action/button/button.js';\nimport {ButtonVariant} from '../../action/constants/buttonvariant.js';\nimport {classNames} from '../../../utils/classnames.js';\nimport {Icon, IconSize} from '../../media/icon/icon.js';\nimport {LoadingIndicatorProgressBar} from '../progressbar/loadingindicatorprogressbar.js';\n\nexport const enum OverlayHeaderVariant {\n    Neutral = 'neutral',\n    Success = 'success',\n    Danger = 'danger'\n}\n\nexport interface OverlayHeaderProps extends RefAttributes<HTMLDivElement> {\n    autoFocusClose?: boolean;\n    children: ReactNode;\n    className?: string;\n    details?: ReactNode;\n    iconName?: IconName;\n    onClose: () => void;\n    onExpand?: () => void;\n    showLoadingIndicator?: boolean;\n    variant?: OverlayHeaderVariant;\n}\n\nexport function OverlayHeader({\n    autoFocusClose = true,\n    children,\n    className,\n    details,\n    iconName,\n    onClose,\n    onExpand,\n    ref,\n    showLoadingIndicator,\n    variant = OverlayHeaderVariant.Neutral\n}: OverlayHeaderProps) {\n    const translateCommon = useTranslateCommon();\n\n    return (\n        <div className={classNames(`overlay-header overlay-header--${variant}`, className)} ref={ref}>\n            {iconName && (\n                <div className=\"overlay-header__icon-area\">\n                    <Icon name={iconName} size={IconSize.MD} />\n                </div>\n            )}\n            <div className=\"overlay-header__title\">\n                <Heading size={Size.xs} slot=\"title\">\n                    {children}\n                </Heading>\n                {details}\n            </div>\n            {onExpand && (\n                <IconButton\n                    aria-label={translateCommon('expand')}\n                    iconName={iconNames.PanZoom}\n                    onPress={onExpand}\n                    style={ButtonStyle.Plain}\n                    variant={ButtonVariant.Neutral}\n                />\n            )}\n            <IconButton\n                aria-label={translateCommon('close')}\n                autoFocus={autoFocusClose}\n                iconName={iconNames.CloseFilled}\n                onPress={onClose}\n                style={ButtonStyle.Plain}\n                variant={ButtonVariant.Neutral}\n            />\n            {showLoadingIndicator && <LoadingIndicatorProgressBar />}\n        </div>\n    );\n}\n"]}