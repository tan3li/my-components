{"version":3,"file":"skeletondatacard.js","sourceRoot":"","sources":["../../../../src/components/feedback/skeleton/skeletondatacard.tsx"],"names":[],"mappings":";;;AACA,OAAO,EAAC,UAAU,EAAC,MAAM,8BAA8B,CAAC;AACxD,OAAO,EAAC,YAAY,EAAE,gBAAgB,EAAC,MAAM,mBAAmB,CAAC;AACjE,OAAO,EAAC,IAAI,EAAC,MAAM,6BAA6B,CAAC;AACjD,OAAO,EAAC,QAAQ,EAAE,aAAa,EAAC,MAAM,eAAe,CAAC;AAuCtD,IAAM,SAAS;IACX,GAAC,IAAI,CAAC,EAAE,IAAG,IAAI,CAAC,EAAE;IAClB,GAAC,IAAI,CAAC,EAAE,IAAG,IAAI,CAAC,EAAE;IAClB,GAAC,IAAI,CAAC,EAAE,IAAG,IAAI,CAAC,EAAE;OACrB,CAAC;AAEF,MAAM,UAAU,gBAAgB,CAAC,EAUT;QATL,UAAU,oBAAA,EACzB,SAAS,eAAA,EACT,aAAa,mBAAA,EACb,aAAa,mBAAA,EACb,gBAAgB,sBAAA,EAChB,QAAQ,cAAA,EACR,IAAI,UAAA,EACJ,KAAK,WAAA,EACL,GAAG,SAAA;IAEH,OAAO,CACH,uCACiB,UAAU,KAAK,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,EACpD,SAAS,EAAE,UAAU,CACjB,iDAA0C,KAAK,kCAAwB,IAAI,CAAE,EAC7E,SAAS,CACZ,EAED,GAAG,EAAE,GAAG,EACR,KAAK,EAAE,EAAC,QAAQ,UAAA,EAAC,iBAChB,aAAa,IAAI,CACd,wBAAK,SAAS,EAAC,4BAA4B,iBACtC,aAAa,IAAI,CACd,KAAC,QAAQ,mBACQ,KAAK,EAClB,MAAM,EAAE,EAAE,EACV,KAAK,EAAE,aAAa,CAAC,SAAS,EAC9B,KAAK,EAAE,EAAC,UAAU,EAAE,CAAC,EAAC,EACtB,KAAK,EAAE,EAAE,GACX,CACL,EACD,KAAC,YAAY,mBAAc,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,gBAAgB,CAAC,KAAK,EAAE,KAAK,EAAC,KAAK,GAAG,KAC3F,CACT,EACD,wBAAK,SAAS,EAAC,0BAA0B,iBACrC,KAAC,YAAY,mBAAc,KAAK,EAAE,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,gBAAgB,CAAC,KAAK,GAAI,EACzF,KAAC,YAAY,mBAAc,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,gBAAgB,CAAC,KAAK,EAAE,KAAK,EAAC,KAAK,GAAG,KAC3F,EACL,gBAAgB,IAAI,CACjB,KAAC,QAAQ,mBAAc,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,aAAa,CAAC,SAAS,EAAE,KAAK,EAAC,MAAM,GAAG,CAC7F,MAvBI,UAAG,aAAa,cAAI,aAAa,cAAI,gBAAgB,CAAE,CAwB1D,CACT,CAAC;AACN,CAAC","sourcesContent":["import {CSSProperties, RefAttributes} from 'react';\nimport {classNames} from '../../../utils/classnames.js';\nimport {SkeletonText, SkeletonTextType} from './skeletontext.js';\nimport {Size} from '../../../constants/index.js';\nimport {Skeleton, SkeletonShape} from './skeleton.js';\nimport {TitleProps} from '../../text/index.js';\nimport {DataCardStyle} from '../../datadisplay/index.js';\n\nexport interface SkeletonDataCardProps extends RefAttributes<HTMLDivElement> {\n    /**\n     * ARIA hidden attribute.\n     */\n    ['aria-hidden']?: boolean;\n    /**\n     * CSS class name for the element.\n     */\n    className?: string;\n    /**\n     * Whether has header icon. Affects only when hasHeaderText = true.\n     */\n    hasHeaderIcon?: boolean;\n    /**\n     * Whether has header text.\n     */\n    hasHeaderText?: boolean;\n    /**\n     * Whether has visualization.\n     */\n    hasVisualization?: boolean;\n    /**\n     * Minimum width for the card.\n     */\n    minWidth?: CSSProperties['minWidth'];\n    /**\n     * Size of the element.\n     */\n    size: Size.sm | Size.md | Size.lg;\n    /**\n     * Display style of the element.\n     */\n    style: DataCardStyle;\n}\n\nconst valueSize: Record<SkeletonDataCardProps['size'], TitleProps['size']> = {\n    [Size.sm]: Size.xs,\n    [Size.md]: Size.sm,\n    [Size.lg]: Size.md\n};\n\nexport function SkeletonDataCard({\n    'aria-hidden': ariaHidden,\n    className,\n    hasHeaderIcon,\n    hasHeaderText,\n    hasVisualization,\n    minWidth,\n    size,\n    style,\n    ref\n}: SkeletonDataCardProps) {\n    return (\n        <div\n            aria-hidden={ariaHidden === false ? undefined : true}\n            className={classNames(\n                `skeleton-data-card skeleton-data-card--${style} skeleton-data-card--${size}`,\n                className\n            )}\n            key={`${hasHeaderText}-${hasHeaderIcon}-${hasVisualization}`}\n            ref={ref}\n            style={{minWidth}}>\n            {hasHeaderText && (\n                <div className=\"skeleton-data-card__header\">\n                    {hasHeaderIcon && (\n                        <Skeleton\n                            aria-hidden={false}\n                            height={16}\n                            shape={SkeletonShape.Rectangle}\n                            style={{flexShrink: 0}}\n                            width={16}\n                        />\n                    )}\n                    <SkeletonText aria-hidden={false} size={Size.md} type={SkeletonTextType.Label} width=\"60%\" />\n                </div>\n            )}\n            <div className=\"skeleton-data-card__body\">\n                <SkeletonText aria-hidden={false} size={valueSize[size]} type={SkeletonTextType.Title} />\n                <SkeletonText aria-hidden={false} size={Size.md} type={SkeletonTextType.Label} width=\"50%\" />\n            </div>\n            {hasVisualization && (\n                <Skeleton aria-hidden={false} height={128} shape={SkeletonShape.Rectangle} width=\"100%\" />\n            )}\n        </div>\n    );\n}\n"]}