{"version":3,"file":"skeletonpageheader.js","sourceRoot":"","sources":["../../../../src/components/feedback/skeleton/skeletonpageheader.tsx"],"names":[],"mappings":";;AACA,OAAO,EAAC,UAAU,EAAC,MAAM,8BAA8B,CAAC;AACxD,OAAO,EAAC,YAAY,EAAE,gBAAgB,EAAC,MAAM,mBAAmB,CAAC;AACjE,OAAO,EAAC,IAAI,EAAC,MAAM,6BAA6B,CAAC;AACjD,OAAO,EAAC,QAAQ,EAAE,aAAa,EAAC,MAAM,eAAe,CAAC;AA6BtD,IAAM,iBAAiB,GAAG,EAAE,CAAC;AAC7B,IAAM,iBAAiB,GAAG,EAAE,CAAC;AAE7B,MAAM,UAAU,kBAAkB,CAAC,EAQT;QAPP,UAAU,oBAAA,EACzB,SAAS,eAAA,EACT,cAAc,oBAAA,EACd,UAAU,gBAAA,EACV,OAAO,aAAA,EACP,KAAK,WAAA,EACL,GAAG,SAAA;IAEH,IAAM,QAAQ,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,iBAAiB,CAAC;IAEnE,OAAO,CACH,uCACiB,UAAU,KAAK,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,EACpD,SAAS,EAAE,UAAU,CAAC,sBAAsB,EAAE,SAAS,CAAC,EAExD,GAAG,EAAE,GAAG,iBACP,cAAc,IAAI,CACf,KAAC,YAAY,mBAAc,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,gBAAgB,CAAC,KAAK,EAAE,KAAK,EAAC,KAAK,GAAG,CAChG,EACD,wBAAK,SAAS,EAAC,6BAA6B,iBACvC,OAAO,IAAI,CACR,KAAC,QAAQ,mBACQ,KAAK,EAClB,MAAM,EAAE,QAAQ,EAChB,KAAK,EAAE,aAAa,CAAC,SAAS,EAC9B,KAAK,EAAE,EAAC,UAAU,EAAE,CAAC,EAAC,EACtB,KAAK,EAAE,QAAQ,GACjB,CACL,EACD,KAAC,YAAY,mBACI,KAAK,EAClB,IAAI,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,EACnC,IAAI,EAAE,gBAAgB,CAAC,OAAO,EAC9B,KAAK,EAAC,KAAK,GACb,KACA,EACL,UAAU,IAAI,CACX,KAAC,YAAY,mBAAc,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,gBAAgB,CAAC,KAAK,EAAE,KAAK,EAAC,KAAK,GAAG,CAChG,MAxBI,UAAG,cAAc,cAAI,UAAU,cAAI,OAAO,cAAI,KAAK,CAAE,CAyBxD,CACT,CAAC;AACN,CAAC","sourcesContent":["import {RefAttributes} from 'react';\nimport {classNames} from '../../../utils/classnames.js';\nimport {SkeletonText, SkeletonTextType} from './skeletontext.js';\nimport {Size} from '../../../constants/index.js';\nimport {Skeleton, SkeletonShape} from './skeleton.js';\n\nexport interface SkeletonPageHeaderProps extends RefAttributes<HTMLDivElement> {\n    /**\n     * ARIA hidden attribute.\n     */\n    ['aria-hidden']?: boolean;\n    /**\n     * CSS class name for the element.\n     */\n    className?: string;\n    /**\n     * Whether has breadcrumbs.\n     */\n    hasBreadcrumbs?: boolean;\n    /**\n     * Whether has details.\n     */\n    hasDetails?: boolean;\n    /**\n     * Whether has icon.\n     */\n    hasIcon?: boolean;\n    /**\n     * Heading level.\n     */\n    level: number;\n}\n\nconst LEVEL_1_ICON_SIZE = 32;\nconst LEVEL_2_ICON_SIZE = 24;\n\nexport function SkeletonPageHeader({\n    'aria-hidden': ariaHidden,\n    className,\n    hasBreadcrumbs,\n    hasDetails,\n    hasIcon,\n    level,\n    ref\n}: SkeletonPageHeaderProps) {\n    const iconSize = level > 1 ? LEVEL_2_ICON_SIZE : LEVEL_1_ICON_SIZE;\n\n    return (\n        <div\n            aria-hidden={ariaHidden === false ? undefined : true}\n            className={classNames('skeleton-page-header', className)}\n            key={`${hasBreadcrumbs}-${hasDetails}-${hasIcon}-${level}`} // to sync animations when props change\n            ref={ref}>\n            {hasBreadcrumbs && (\n                <SkeletonText aria-hidden={false} size={Size.md} type={SkeletonTextType.Label} width=\"30%\" />\n            )}\n            <div className=\"skeleton-page-header__title\">\n                {hasIcon && (\n                    <Skeleton\n                        aria-hidden={false}\n                        height={iconSize}\n                        shape={SkeletonShape.Rectangle}\n                        style={{flexShrink: 0}}\n                        width={iconSize}\n                    />\n                )}\n                <SkeletonText\n                    aria-hidden={false}\n                    size={level > 1 ? Size.sm : Size.md}\n                    type={SkeletonTextType.Heading}\n                    width=\"35%\"\n                />\n            </div>\n            {hasDetails && (\n                <SkeletonText aria-hidden={false} size={Size.md} type={SkeletonTextType.Label} width=\"30%\" />\n            )}\n        </div>\n    );\n}\n"]}