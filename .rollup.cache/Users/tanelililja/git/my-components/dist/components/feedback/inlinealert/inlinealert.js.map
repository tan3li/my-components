{"version":3,"file":"inlinealert.js","sourceRoot":"","sources":["../../../../src/components/feedback/inlinealert/inlinealert.tsx"],"names":[],"mappings":"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","sourcesContent":["import {ReactNode, RefAttributes, useState} from 'react';\nimport {classNames} from '../../../utils/classnames.js';\nimport {Icon, IconSize} from '../../media/icon/icon.js';\nimport {iconNames} from '../../media/icon/icons.js';\nimport {BodyText} from '../../text/bodytext/bodytext.js';\nimport {Size} from '../../../constants/size.js';\nimport {Button, ButtonStyle} from '../../action/button/button.js';\nimport {ButtonVariant} from '../../action/constants/buttonvariant.js';\nimport {IconButton} from '../../action/iconbutton/iconbutton.js';\nimport {useTranslateCommon} from '../../../hooks/translations/usetranslatecommon.js';\nimport {HTMLElementType} from '../../../constants/htmlelementtype.js';\n\nexport const enum InlineAlertVariant {\n    Neutral = 'neutral',\n    Informative = 'informative',\n    Success = 'success',\n    Danger = 'danger',\n    Warning = 'warning'\n}\n\nexport interface InlineAlertProps extends RefAttributes<HTMLDivElement> {\n    /**\n     * Label for the action button.\n     */\n    actionLabel?: string;\n    /**\n     * The CSS className for the element.\n     */\n    className?: string;\n    /**\n     * Main text content\n     */\n    content: ReactNode;\n    /**\n     * Whether alert can be dismissed.\n     */\n    isDismissible?: boolean;\n    /**\n     * Callback for the action button.\n     */\n    onAction?: () => void;\n    /**\n     * Title text.\n     */\n    title?: string;\n    /**\n     * Variant of the alert.\n     */\n    variant?: InlineAlertVariant;\n}\n\nfunction getIconName(variant: InlineAlertVariant) {\n    switch (variant) {\n        case InlineAlertVariant.Danger:\n            return iconNames.EmergencyHomeFilled;\n        case InlineAlertVariant.Success:\n            return iconNames.CheckCircleFilled;\n        case InlineAlertVariant.Warning:\n            return iconNames.WarningFilled;\n        default:\n            return iconNames.InfoFilled;\n    }\n}\n\nexport function InlineAlert({\n    actionLabel,\n    className,\n    content,\n    isDismissible = true,\n    onAction,\n    ref,\n    title,\n    variant\n}: InlineAlertProps) {\n    const [isVisible, setIsVisible] = useState(true);\n    const translateCommon = useTranslateCommon();\n\n    if (!isVisible) {\n        return null;\n    }\n\n    return (\n        <div className={classNames(`inline-alert inline-alert--${variant}`, className)} ref={ref} role=\"alert\">\n            {variant && <Icon className=\"inline-alert__icon\" name={getIconName(variant)} size={IconSize.MD} />}\n            <div className=\"inline-alert__content\">\n                {title && (\n                    <BodyText elementType={HTMLElementType.Div} size={Size.sm}>\n                        <strong>{title}</strong>\n                    </BodyText>\n                )}\n                <BodyText elementType={HTMLElementType.Div} size={Size.sm}>\n                    {content}\n                </BodyText>\n            </div>\n            {(!!actionLabel || isDismissible) && (\n                <div className=\"inline-alert__actions\">\n                    {actionLabel && (\n                        <Button\n                            className=\"inline-alert__action-button\"\n                            onPress={onAction}\n                            style={ButtonStyle.Plain}\n                            variant={ButtonVariant.Neutral}>\n                            {actionLabel}\n                        </Button>\n                    )}\n                    {isDismissible && (\n                        <IconButton\n                            aria-label={translateCommon('close')}\n                            className=\"inline-alert__close-button\"\n                            iconName={iconNames.CloseFilled}\n                            onPress={() => setIsVisible(!isVisible)}\n                            style={ButtonStyle.Plain}\n                            variant={ButtonVariant.Neutral}\n                        />\n                    )}\n                </div>\n            )}\n        </div>\n    );\n}\n"]}