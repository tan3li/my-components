{"version":3,"file":"alertbanner.js","sourceRoot":"","sources":["../../../../src/components/feedback/alertbanner/alertbanner.tsx"],"names":[],"mappings":";;AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,8BAA8B,CAAC;AACxD,OAAO,EAAW,SAAS,EAAC,MAAM,2BAA2B,CAAC;AAC9D,OAAO,EAAC,IAAI,EAAE,QAAQ,EAAC,MAAM,0BAA0B,CAAC;AACxD,OAAO,EAAC,QAAQ,EAAC,MAAM,iCAAiC,CAAC;AACzD,OAAO,EAAC,IAAI,EAAC,MAAM,4BAA4B,CAAC;AAChD,OAAO,EAAqC,QAAQ,EAAC,MAAM,OAAO,CAAC;AACnE,OAAO,EAAC,UAAU,EAAC,MAAM,uCAAuC,CAAC;AACjE,OAAO,EAAC,WAAW,EAAC,MAAM,+BAA+B,CAAC;AAC1D,OAAO,EAAC,aAAa,EAAC,MAAM,yCAAyC,CAAC;AACtE,OAAO,EAAC,kBAAkB,EAAC,MAAM,mDAAmD,CAAC;AACrF,OAAO,EAAC,QAAQ,EAAC,MAAM,kCAAkC,CAAC;AAE1D,MAAM,CAAN,IAAkB,kBAMjB;AAND,WAAkB,kBAAkB;IAChC,yCAAmB,CAAA;IACnB,iDAA2B,CAAA;IAC3B,yCAAmB,CAAA;IACnB,uCAAiB,CAAA;IACjB,yCAAmB,CAAA;AACvB,CAAC,EANiB,kBAAkB,KAAlB,kBAAkB,QAMnC;AAiCD,MAAM,UAAU,WAAW,CAAC,EAST;IARf,IAAA,SAAS,eAAA,EACT,QAAQ,cAAA,EACR,QAAQ,cAAA,EACR,aAAa,mBAAA,EACb,GAAG,SAAA,EACH,YAAe,EAAf,IAAI,mBAAG,QAAQ,KAAA,EACf,OAAO,aAAA,EACJ,KAAK,cARgB,gFAS3B,CADW;IAEF,IAAA,KAA4B,QAAQ,CAAC,IAAI,CAAC,EAAzC,SAAS,QAAA,EAAE,YAAY,QAAkB,CAAC;IACjD,IAAM,eAAe,GAAG,kBAAkB,EAAE,CAAC;IAE7C,IAAM,SAAS,GAAG;QACd,YAAY,CAAC,KAAK,CAAC,CAAC;QACpB,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IAC9B,CAAC,CAAC;IAEF,IAAI,CAAC,SAAS,EAAE;QACZ,OAAO,IAAI,CAAC;KACf;IAED,OAAO,CACH,wBACI,SAAS,EAAE,UAAU,CAAC,qCAA8B,OAAO,CAAE,EAAE,SAAS,EAAE;YACtE,2BAA2B,EAAE,aAAa;SAC7C,CAAC,EACF,GAAG,EAAE,GAAG,EACR,IAAI,EAAE,IAAI,iBACT,QAAQ,IAAI,KAAC,IAAI,IAAC,SAAS,EAAC,oBAAoB,EAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,CAAC,EAAE,GAAI,EACvF,KAAC,QAAQ,aAAC,SAAS,EAAC,uBAAuB,EAAC,IAAI,EAAE,IAAI,CAAC,EAAE,gBACpD,QAAQ,IACF,EACV,aAAa,IAAI,CACd,KAAC,UAAU,kBACK,eAAe,CAAC,mBAAmB,CAAC,EAChD,SAAS,EAAC,4BAA4B,EACtC,QAAQ,EAAE,SAAS,CAAC,WAAW,EAC/B,QAAQ,EAAE,OAAO,KAAK,kBAAkB,CAAC,OAAO,EAChD,OAAO,EAAE,SAAS,EAClB,KAAK,EAAE,WAAW,CAAC,KAAK,EACxB,OAAO,EAAE,aAAa,CAAC,OAAO,GAChC,CACL,KACC,CACT,CAAC;AACN,CAAC","sourcesContent":["import {classNames} from '../../../utils/classnames.js';\nimport {IconName, iconNames} from '../../media/icon/icons.js';\nimport {Icon, IconSize} from '../../media/icon/icon.js';\nimport {BodyText} from '../../text/bodytext/bodytext.js';\nimport {Size} from '../../../constants/size.js';\nimport {AriaRole, ReactNode, RefAttributes, useState} from 'react';\nimport {IconButton} from '../../action/iconbutton/iconbutton.js';\nimport {ButtonStyle} from '../../action/button/button.js';\nimport {ButtonVariant} from '../../action/constants/buttonvariant.js';\nimport {useTranslateCommon} from '../../../hooks/translations/usetranslatecommon.js';\nimport {safeCall} from '../../../utils/functionhelper.js';\n\nexport const enum AlertBannerVariant {\n    Neutral = 'neutral',\n    Informative = 'informative',\n    Success = 'success',\n    Danger = 'danger',\n    Warning = 'warning'\n}\n\nexport interface AlertBannerProps extends RefAttributes<HTMLDivElement> {\n    /**\n     * Content of the alert.\n     */\n    children: ReactNode;\n    /**\n     * The CSS className for the element.\n     */\n    className?: string;\n    /**\n     * Icon for the alert.\n     */\n    iconName?: IconName;\n    /**\n     * Whether alert can be dismissed.\n     */\n    isDismissible?: boolean;\n    /**\n     * Handler called when alert is dismissed.\n     */\n    onDismiss?: () => void;\n    /**\n     * Aria role for the element.\n     */\n    role?: AriaRole;\n    /**\n     * Variant of the alert.\n     */\n    variant: AlertBannerVariant;\n}\n\nexport function AlertBanner({\n    className,\n    children,\n    iconName,\n    isDismissible,\n    ref,\n    role = 'status',\n    variant,\n    ...props\n}: AlertBannerProps) {\n    const [isVisible, setIsVisible] = useState(true);\n    const translateCommon = useTranslateCommon();\n\n    const onDismiss = () => {\n        setIsVisible(false);\n        safeCall(props.onDismiss);\n    };\n\n    if (!isVisible) {\n        return null;\n    }\n\n    return (\n        <div\n            className={classNames(`alert-banner alert-banner--${variant}`, className, {\n                'alert-banner--dismissible': isDismissible\n            })}\n            ref={ref}\n            role={role}>\n            {iconName && <Icon className=\"alert-banner__icon\" name={iconName} size={IconSize.MD} />}\n            <BodyText className=\"alert-banner__content\" size={Size.md}>\n                {children}\n            </BodyText>\n            {isDismissible && (\n                <IconButton\n                    aria-label={translateCommon('closeNotification')}\n                    className=\"alert-banner__close-button\"\n                    iconName={iconNames.CloseFilled}\n                    inverted={variant !== AlertBannerVariant.Warning}\n                    onPress={onDismiss}\n                    style={ButtonStyle.Plain}\n                    variant={ButtonVariant.Neutral}\n                />\n            )}\n        </div>\n    );\n}\n"]}