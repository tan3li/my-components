{"version":3,"file":"progressbar.js","sourceRoot":"","sources":["../../../../src/components/feedback/progressbar/progressbar.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n    ProgressBar as ReactAriaProgressBar,\n    ProgressBarProps as ReactAriaProgressBarProps\n} from 'react-aria-components';\nimport {classNames} from '../../../utils/classnames.js';\nimport {TriggerElement} from '../../action/triggerelement/triggerelement.js';\nimport {Tooltip, TooltipType} from '../tooltip/tooltip.js';\nimport {TooltipTrigger} from '../tooltip/tooltiptrigger.js';\nimport {Position} from '../../../constants/position.js';\nimport {Size} from '../../../constants/size.js';\nimport {HelpText} from '../../text/helptext/helptext.js';\nimport {Label} from '../../text/label/label.js';\nimport {RefAttributes, useCallback, useRef, useState} from 'react';\nimport {useIntersectionObserver} from '../../inputs/select/useintersectionobserver.js';\nimport {useResizeObserver} from '@react-aria/utils';\nimport {HTMLElementType} from '../../../constants/index.js';\n\n// Tooltip arrow width is hardcoded to 12px\nconst TOOLTIP_ARROW_WIDTH = 12;\n\nexport interface ProgressBarProps extends ReactAriaProgressBarProps, RefAttributes<HTMLDivElement> {\n    /**\n     * Additional help text to provide more information.\n     */\n    helpText?: string;\n    /**\n     * Position of the label. If not given, label will not be shown.\n     */\n    labelPosition?: Position.Bottom | Position.Top;\n    /**\n     * Whether to show the help text icon.\n     */\n    showHelpTextIcon?: boolean;\n    /**\n     * Position of the tooltip.\n     */\n    tooltipPosition?: Position.Bottom | Position.Top;\n    /**\n     * Position of the value label. If not given, value label will not be shown.\n     */\n    valueLabelPosition?: Position.Bottom | Position.Right;\n}\n\nexport function ProgressBar(props: ProgressBarProps) {\n    const {className, helpText, isIndeterminate, labelPosition, showHelpTextIcon, tooltipPosition, valueLabelPosition} =\n        props;\n\n    const [progressBarWidth, setProgressBarWidth] = useState(0);\n    const [tooltipArrowOffset, setTooltipArrowOffset] = useState(0);\n\n    const isValueLabelPositionRight = valueLabelPosition === Position.Right;\n    const label = props['aria-label'];\n    const progressBarRef = useRef<HTMLDivElement>(null);\n\n    const calculateTooltipOffset = (percentage = 0) => {\n        const progressBarFillWidth = (percentage / 100) * progressBarWidth;\n\n        return Math.round(progressBarFillWidth - progressBarWidth / 2);\n    };\n\n    const onProgressBarResize = useCallback(() => {\n        const width = progressBarRef.current?.clientWidth ?? 0;\n\n        setProgressBarWidth(width);\n    }, [progressBarRef]);\n\n    const onTooltipVisible = (tooltipElement: IntersectionObserverEntry) => {\n        const tooltipContentWidth = tooltipElement.intersectionRect?.width ?? 0;\n\n        if (tooltipContentWidth === 0) {\n            return;\n        }\n\n        const arrowOffset = Math.round(tooltipContentWidth / 2 - TOOLTIP_ARROW_WIDTH / 2);\n\n        setTooltipArrowOffset(arrowOffset);\n    };\n\n    useResizeObserver({\n        ref: progressBarRef,\n        onResize: onProgressBarResize\n    });\n\n    const tooltipRef = useIntersectionObserver(onTooltipVisible);\n\n    return (\n        <ReactAriaProgressBar {...props} className={classNames('progress-bar', className)}>\n            {({percentage, valueText}) => (\n                <>\n                    {label && labelPosition === Position.Top && (\n                        <Label\n                            className={classNames('progress-bar__label', {\n                                'progress-bar__label--top': !valueText || !isValueLabelPositionRight\n                            })}\n                            elementType={HTMLElementType.Div}\n                            size={Size.md}>\n                            {label}\n                        </Label>\n                    )}\n                    <div className=\"progress-bar__top_container\">\n                        <TooltipTrigger>\n                            <div className=\"progress-bar__bar-wrapper\" ref={progressBarRef}>\n                                <TriggerElement aria-label={label ?? props['aria-label']} className=\"progress-bar__bar\">\n                                    <div\n                                        className={classNames('progress-bar__fill', {\n                                            'progress-bar__fill--indeterminate': isIndeterminate\n                                        })}\n                                        style={isIndeterminate ? {} : {width: `${percentage}%`}}\n                                    />\n                                </TriggerElement>\n                            </div>\n                            {valueText && (\n                                <Tooltip\n                                    arrowBoundaryOffset={tooltipArrowOffset}\n                                    crossOffset={calculateTooltipOffset(percentage)}\n                                    position={tooltipPosition}\n                                    ref={tooltipRef}\n                                    type={TooltipType.Plain}>\n                                    <Label size={Size.sm}>\n                                        <strong>{valueText}</strong>\n                                    </Label>\n                                </Tooltip>\n                            )}\n                        </TooltipTrigger>\n                        {valueText && isValueLabelPositionRight && (\n                            <Label\n                                className=\"progress-bar__value-label progress-bar__value-label--right\"\n                                size={Size.md}>\n                                {valueText}\n                            </Label>\n                        )}\n                    </div>\n                    <div className=\"progress-bar__bottom_container\">\n                        <div className=\"progress-bar__bottom_left-container\">\n                            {label && labelPosition === Position.Bottom && (\n                                <Label\n                                    className={classNames('progress-bar__label', {\n                                        'progress-bar__label--bottom': !valueText || !isValueLabelPositionRight\n                                    })}\n                                    size={Size.md}>\n                                    {label}\n                                </Label>\n                            )}\n                            {helpText && (\n                                <HelpText className=\"progress-bar__help-text\" showIcon={showHelpTextIcon}>\n                                    {helpText}\n                                </HelpText>\n                            )}\n                        </div>\n                        {valueText && valueLabelPosition === Position.Bottom && (\n                            <Label\n                                className=\"progress-bar__value-label progress-bar__value-label--bottom\"\n                                size={Size.md}>\n                                {valueText}\n                            </Label>\n                        )}\n                    </div>\n                </>\n            )}\n        </ReactAriaProgressBar>\n    );\n}\n"]}