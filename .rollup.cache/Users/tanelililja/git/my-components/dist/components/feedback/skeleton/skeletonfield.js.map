{"version":3,"file":"skeletonfield.js","sourceRoot":"","sources":["../../../../src/components/feedback/skeleton/skeletonfield.tsx"],"names":[],"mappings":";;;AACA,OAAO,EAAC,IAAI,EAAC,MAAM,6BAA6B,CAAC;AACjD,OAAO,EAAC,UAAU,EAAC,MAAM,8BAA8B,CAAC;AACxD,OAAO,EAAC,YAAY,EAAE,gBAAgB,EAAC,MAAM,mBAAmB,CAAC;AACjE,OAAO,EAAC,QAAQ,EAAE,aAAa,EAAC,MAAM,eAAe,CAAC;AAiCtD,IAAM,6BAA6B;IAC/B,GAAC,IAAI,CAAC,EAAE,IAAG,EAAE;IACb,GAAC,IAAI,CAAC,EAAE,IAAG,EAAE;IACb,GAAC,IAAI,CAAC,EAAE,IAAG,EAAE;IACb,GAAC,IAAI,CAAC,EAAE,IAAG,EAAE;OAChB,CAAC;AAEF,MAAM,UAAU,aAAa,CAAC,EAST;QARF,UAAU,oBAAA,EACzB,SAAS,eAAA,EACT,WAAW,iBAAA,EACX,QAAQ,cAAA,EACR,eAAe,qBAAA,EACf,GAAG,SAAA,EACH,IAAI,UAAA,EACJ,KAAK,WAAA;IAEL,IAAI,SAAS,GAAG,IAAI,CAAC,EAAE,CAAC;IAExB,IAAI,IAAI,KAAK,IAAI,CAAC,EAAE,EAAE;QAClB,SAAS,GAAG,IAAI,CAAC,EAAE,CAAC;KACvB;SAAM,IAAI,IAAI,KAAK,IAAI,CAAC,EAAE,EAAE;QACzB,SAAS,GAAG,IAAI,CAAC,EAAE,CAAC;KACvB;IAED,OAAO,CACH,uCACiB,UAAU,KAAK,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,EACpD,SAAS,EAAE,UAAU,CAAC,gBAAgB,EAAE,SAAS,CAAC,EAElD,GAAG,EAAE,GAAG,EACR,KAAK,EAAE,KAAK,iBACX,QAAQ,IAAI,CACT,KAAC,YAAY,mBAAc,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,gBAAgB,CAAC,KAAK,EAAE,KAAK,EAAC,KAAK,GAAG,CAClG,EACD,KAAC,QAAQ,mBACQ,KAAK,EAClB,MAAM,EAAE,eAAe,aAAf,eAAe,cAAf,eAAe,GAAI,6BAA6B,CAAC,IAAI,CAAC,EAC9D,KAAK,EAAE,aAAa,CAAC,SAAS,GAChC,EACD,WAAW,IAAI,CACZ,KAAC,YAAY,mBAAc,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,gBAAgB,CAAC,KAAK,EAAE,KAAK,EAAC,KAAK,GAAG,CAChG,MAbI,UAAG,QAAQ,cAAI,WAAW,CAAE,CAc/B,CACT,CAAC;AACN,CAAC","sourcesContent":["import {CSSProperties, RefAttributes} from 'react';\nimport {Size} from '../../../constants/index.js';\nimport {classNames} from '../../../utils/classnames.js';\nimport {SkeletonText, SkeletonTextType} from './skeletontext.js';\nimport {Skeleton, SkeletonShape} from './skeleton.js';\n\nexport interface SkeletonFieldProps extends RefAttributes<HTMLDivElement> {\n    /**\n     * ARIA hidden attribute.\n     */\n    ['aria-hidden']?: boolean;\n    /**\n     * CSS class name for the element.\n     */\n    className?: string;\n    /**\n     * Whether to show skeleton for help text.\n     */\n    hasHelpText?: boolean;\n    /**\n     * Whether to show skeleton for label text.\n     */\n    hasLabel?: boolean;\n    /**\n     * Custom height for the \"input\" rectangle element. Determined by size prop when not set.\n     */\n    inputRectHeight?: CSSProperties['height'];\n    /**\n     * Size of the element.\n     */\n    size: Size.xs | Size.sm | Size.md | Size.lg;\n    /**\n     * CSS style for the element.\n     */\n    style?: CSSProperties;\n}\n\nconst defaultInputRectHeightForSize = {\n    [Size.xs]: 28,\n    [Size.sm]: 32,\n    [Size.md]: 40,\n    [Size.lg]: 40\n};\n\nexport function SkeletonField({\n    'aria-hidden': ariaHidden,\n    className,\n    hasHelpText,\n    hasLabel,\n    inputRectHeight,\n    ref,\n    size,\n    style\n}: SkeletonFieldProps) {\n    let labelSize = Size.md;\n\n    if (size === Size.xs) {\n        labelSize = Size.sm;\n    } else if (size === Size.lg) {\n        labelSize = Size.lg;\n    }\n\n    return (\n        <div\n            aria-hidden={ariaHidden === false ? undefined : true}\n            className={classNames('skeleton-field', className)}\n            key={`${hasLabel}-${hasHelpText}`} // to sync animations when props change\n            ref={ref}\n            style={style}>\n            {hasLabel && (\n                <SkeletonText aria-hidden={false} size={labelSize} type={SkeletonTextType.Label} width=\"50%\" />\n            )}\n            <Skeleton\n                aria-hidden={false}\n                height={inputRectHeight ?? defaultInputRectHeightForSize[size]}\n                shape={SkeletonShape.Rectangle}\n            />\n            {hasHelpText && (\n                <SkeletonText aria-hidden={false} size={Size.sm} type={SkeletonTextType.Label} width=\"25%\" />\n            )}\n        </div>\n    );\n}\n"]}