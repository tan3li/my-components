{"version":3,"file":"skeletondatatable.js","sourceRoot":"","sources":["../../../../src/components/feedback/skeleton/skeletondatatable.tsx"],"names":[],"mappings":";;AACA,OAAO,EAAC,UAAU,EAAC,MAAM,8BAA8B,CAAC;AACxD,OAAO,EAAC,YAAY,EAAE,gBAAgB,EAAC,MAAM,mBAAmB,CAAC;AACjE,OAAO,EAAC,IAAI,EAAC,MAAM,6BAA6B,CAAC;AACjD,OAAO,EAAC,QAAQ,EAAE,aAAa,EAAC,MAAM,eAAe,CAAC;AAyBtD,IAAM,oBAAoB,GAAG,CAAC,CAAC;AAC/B,IAAM,iBAAiB,GAAG,CAAC,CAAC;AAE5B,MAAM,UAAU,iBAAiB,CAAC,EAOT;QANN,UAAU,oBAAA,EACzB,SAAS,eAAA,EACT,mBAAkC,EAAlC,WAAW,mBAAG,oBAAoB,KAAA,EAClC,eAAe,qBAAA,EACf,GAAG,SAAA,EACH,gBAA4B,EAA5B,QAAQ,mBAAG,iBAAiB,KAAA;IAE5B,IAAM,YAAY,GAAG,iBAAU,QAAQ,YAAS,CAAC;IACjD,IAAM,YAAY,GAAG,eAAe,CAAC,CAAC,CAAC,sBAAe,WAAW,GAAG,CAAC,WAAQ,CAAC,CAAC,CAAC,iBAAU,WAAW,WAAQ,CAAC;IAE9G,OAAO,CACH,uCACiB,UAAU,KAAK,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,EACpD,SAAS,EAAE,UAAU,CAAC,qBAAqB,EAAE,SAAS,CAAC,EAEvD,GAAG,EAAE,GAAG,EACR,KAAK,EAAE,EAAC,YAAY,EAAE,UAAG,YAAY,gBAAM,YAAY,CAAE,EAAC,iBACzD,KAAK,CAAC,IAAI,CAAC,EAAC,MAAM,EAAE,WAAW,EAAC,EAAE,UAAC,CAAC,EAAE,MAAM,IAAK,OAAA,CAC9C,uBAAK,SAAS,EAAC,yBAAyB,gBACnC,MAAM,KAAK,CAAC,IAAI,eAAe,CAAC,CAAC;oBAC9B,KAAC,QAAQ,mBAAc,KAAK,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,aAAa,CAAC,SAAS,EAAE,KAAK,EAAE,EAAE,GAAI;oBAC3F,CAAC,CAAG,KAAC,YAAY,mBAAc,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,gBAAgB,CAAC,KAAK,GAAI,KAH3C,YAAK,MAAM,CAAE,CAIrD,CACT,EANiD,CAMjD,CAAC,EACD,KAAK,CAAC,IAAI,CAAC,EAAC,MAAM,EAAE,QAAQ,EAAC,EAAE,UAAC,EAAE,EAAE,MAAM;gBACvC,OAAA,KAAK,CAAC,IAAI,CAAC,EAAC,MAAM,EAAE,WAAW,EAAC,EAAE,UAAC,EAAE,EAAE,MAAM,IAAK,OAAA,CAC9C,uBAAK,SAAS,EAAC,yBAAyB,gBACnC,MAAM,KAAK,CAAC,IAAI,eAAe,CAAC,CAAC;wBAC9B,KAAC,QAAQ,mBAAc,KAAK,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,aAAa,CAAC,SAAS,EAAE,KAAK,EAAE,EAAE,GAAI;wBAC3F,CAAC,CAAG,KAAC,YAAY,mBAAc,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,gBAAgB,CAAC,KAAK,GAAI,KAH3C,YAAK,MAAM,cAAI,MAAM,CAAE,CAI/D,CACT,EANiD,CAMjD,CAAC;YANF,CAME,CACL,MAlBI,UAAG,QAAQ,cAAI,WAAW,cAAI,eAAe,CAAE,CAmBlD,CACT,CAAC;AACN,CAAC","sourcesContent":["import {RefAttributes} from 'react';\nimport {classNames} from '../../../utils/classnames.js';\nimport {SkeletonText, SkeletonTextType} from './skeletontext.js';\nimport {Size} from '../../../constants/index.js';\nimport {Skeleton, SkeletonShape} from './skeleton.js';\n\nexport interface SkeletonDataTableProps extends RefAttributes<HTMLDivElement> {\n    /**\n     * ARIA hidden attribute.\n     */\n    ['aria-hidden']?: boolean;\n    /**\n     * CSS class name for the element.\n     */\n    className?: string;\n    /**\n     * Number of columns to display. Default is 5.\n     */\n    columnCount?: number;\n    /**\n     * Whether to display first column cells as \"checkbox\" cells.\n     */\n    hasRowSelection?: boolean;\n    /**\n     * Number of rows to display. Default is 5.\n     */\n    rowCount?: number;\n}\n\nconst DEFAULT_COLUMN_COUNT = 5;\nconst DEFAULT_ROW_COUNT = 5;\n\nexport function SkeletonDataTable({\n    'aria-hidden': ariaHidden,\n    className,\n    columnCount = DEFAULT_COLUMN_COUNT,\n    hasRowSelection,\n    ref,\n    rowCount = DEFAULT_ROW_COUNT\n}: SkeletonDataTableProps) {\n    const templateRows = `repeat(${rowCount}, auto)`;\n    const templateCols = hasRowSelection ? `auto repeat(${columnCount - 1}, 1fr)` : `repeat(${columnCount}, 1fr)`;\n\n    return (\n        <div\n            aria-hidden={ariaHidden === false ? undefined : true}\n            className={classNames('skeleton-data-table', className)}\n            key={`${rowCount}-${columnCount}-${hasRowSelection}`} // to sync animations when props change\n            ref={ref}\n            style={{gridTemplate: `${templateRows} / ${templateCols}`}}>\n            {Array.from({length: columnCount}, (_, colIdx) => (\n                <div className=\"skeleton-data-table__th\" key={`th${colIdx}`}>\n                    {colIdx === 0 && hasRowSelection ?\n                        <Skeleton aria-hidden={false} height={16} shape={SkeletonShape.Rectangle} width={16} />\n                    :   <SkeletonText aria-hidden={false} size={Size.sm} type={SkeletonTextType.Label} />}\n                </div>\n            ))}\n            {Array.from({length: rowCount}, (_x, rowIdx) =>\n                Array.from({length: columnCount}, (_y, colIdx) => (\n                    <div className=\"skeleton-data-table__td\" key={`td${rowIdx}-${colIdx}`}>\n                        {colIdx === 0 && hasRowSelection ?\n                            <Skeleton aria-hidden={false} height={16} shape={SkeletonShape.Rectangle} width={16} />\n                        :   <SkeletonText aria-hidden={false} size={Size.md} type={SkeletonTextType.Label} />}\n                    </div>\n                ))\n            )}\n        </div>\n    );\n}\n"]}