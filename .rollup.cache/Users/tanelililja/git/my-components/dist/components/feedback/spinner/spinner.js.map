{"version":3,"file":"spinner.js","sourceRoot":"","sources":["../../../../src/components/feedback/spinner/spinner.tsx"],"names":[],"mappings":";;AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,8BAA8B,CAAC;AACxD,OAAO,EAAC,IAAI,EAAC,MAAM,4BAA4B,CAAC;AAChD,OAAO,EAAC,QAAQ,EAAC,MAAM,gCAAgC,CAAC;AAExD,OAAO,EAAC,QAAQ,EAAC,MAAM,6BAA6B,CAAC;AACrD,OAAO,EAAC,KAAK,EAAa,MAAM,qBAAqB,CAAC;AAEtD,MAAM,CAAN,IAAkB,cAIjB;AAJD,WAAkB,cAAc;IAC5B,qCAAmB,CAAA;IACnB,mCAAiB,CAAA;IACjB,+BAAa,CAAA;AACjB,CAAC,EAJiB,cAAc,KAAd,cAAc,QAI/B;AAsCD,MAAM,UAAU,OAAO,CAAC,EAUT;;QATG,SAAS,mBAAA,EACJ,cAAc,wBAAA,EACjC,SAAS,eAAA,EACT,KAAK,WAAA,EACL,qBAA+B,EAA/B,aAAa,mBAAG,QAAQ,CAAC,MAAM,KAAA,EAC/B,SAAS,eAAA,EACT,GAAG,SAAA,EACH,IAAI,UAAA,EACJ,eAA+B,EAA/B,OAAO,mBAAG,cAAc,CAAC,MAAM,KAAA;IAE/B,OAAO,CACH,sCACgB,SAAS,qBACJ,cAAc,EAC/B,SAAS,EAAE,UAAU,CAAC,2BAAoB,IAAI,CAAE,EAAE,SAAS;YACvD,GAAC,mBAAY,OAAO,CAAE,IAAG,OAAO,KAAK,cAAc,CAAC,IAAI;YACxD,GAAC,yBAAkB,aAAa,CAAE,IAAG,CAAC,CAAC,KAAK;gBAC9C,EACF,GAAG,EAAE,GAAG,EACR,IAAI,EAAE,QAAQ,CAAC,MAAM,iBACrB,eAAM,SAAS,EAAC,iBAAiB,GAAG,EACnC,KAAK,IAAI,CACN,KAAC,KAAK,aAAC,SAAS,EAAC,gBAAgB,EAAC,IAAI,EAAE,SAAS,aAAT,SAAS,cAAT,SAAS,GAAI,CAAC,IAAI,KAAK,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,gBACtF,KAAK,IACF,CACX,KACC,CACT,CAAC;AACN,CAAC","sourcesContent":["import {classNames} from '../../../utils/classnames.js';\nimport {Size} from '../../../constants/size.js';\nimport {AriaRole} from '../../../constants/ariarole.js';\nimport {ReactNode, RefAttributes} from 'react';\nimport {Position} from '../../../constants/index.js';\nimport {Label, LabelProps} from '../../text/index.js';\n\nexport const enum SpinnerVariant {\n    Neutral = 'neutral',\n    Accent = 'accent',\n    None = 'none'\n}\n\nexport interface SpinnerProps extends RefAttributes<HTMLDivElement> {\n    /**\n     * Label for screen readers if you don't want to have visible label.\n     */\n    ['aria-label']?: string;\n    /**\n     * Id of the label element which labels the spinner.\n     */\n    ['aria-labelledby']?: string;\n    /**\n     * CSS class name for the element.\n     */\n    className?: string;\n    /**\n     * Label for the element.\n     */\n    label?: ReactNode;\n    /**\n     * Position of the label.\n     */\n    labelPosition?: Position.Bottom | Position.Right;\n    /**\n     * Custom size for label. Use only if you need to override default sizing logic.\n     */\n    labelSize?: LabelProps['size'];\n    /**\n     * Size of the element.\n     */\n    size: Size.sm | Size.md | Size.lg | Size.xl;\n    /**\n     * Spinner color variant.\n     * If variant = SpinnerVariant.None, color will be inherited from nearest element where color is set.\n     */\n    variant?: SpinnerVariant;\n}\n\nexport function Spinner({\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    className,\n    label,\n    labelPosition = Position.Bottom,\n    labelSize,\n    ref,\n    size,\n    variant = SpinnerVariant.Accent\n}: SpinnerProps) {\n    return (\n        <div\n            aria-label={ariaLabel}\n            aria-labelledby={ariaLabelledBy}\n            className={classNames(`spinner spinner--${size}`, className, {\n                [`spinner--${variant}`]: variant !== SpinnerVariant.None,\n                [`spinner--label-${labelPosition}`]: !!label\n            })}\n            ref={ref}\n            role={AriaRole.status}>\n            <span className=\"spinner__loader\" />\n            {label && (\n                <Label className=\"spinner__label\" size={labelSize ?? (size === Size.xl ? Size.lg : Size.md)}>\n                    {label}\n                </Label>\n            )}\n        </div>\n    );\n}\n"]}