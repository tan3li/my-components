{"version":3,"file":"toastprogressbar.js","sourceRoot":"","sources":["../../../../src/components/feedback/toast/toastprogressbar.tsx"],"names":[],"mappings":";;AAAA,OAAO,EAAC,WAAW,EAAC,MAAM,uBAAuB,CAAC;AAClD,OAAO,EAAC,mBAAmB,EAAC,MAAM,oDAAoD,CAAC;AACvF,OAAO,EAAC,iBAAiB,EAAC,MAAM,qCAAqC,CAAC;AACtE,OAAO,EAAC,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAC,MAAM,OAAO,CAAC;AAOlD,MAAM,UAAU,gBAAgB,CAAC,EAA0C;QAAzC,QAAQ,cAAA,EAAE,OAAO,aAAA;IAC/C,IAAM,gBAAgB,GAAG,mBAAmB,EAAE,CAAC;IACzC,IAAA,KAA0C,QAAQ,CAAC,OAAO,CAAC,EAA1D,gBAAgB,QAAA,EAAE,mBAAmB,QAAqB,CAAC;IAClE,IAAM,OAAO,GAAG,MAAM,CAAiB,IAAI,CAAC,CAAC;IAC7C,IAAM,WAAW,GAAG,MAAM,CAAgB,IAAI,CAAC,CAAC;IAEhD,iBAAiB,CACb,UAAC,IAAY;QACT,IAAI,WAAW,CAAC,OAAO,KAAK,IAAI,EAAE;YAC9B,IAAM,WAAS,GAAG,IAAI,GAAG,WAAW,CAAC,OAAO,CAAC;YAE7C,mBAAmB,CAAC,UAAC,oBAAoB,IAAK,OAAA,oBAAoB,GAAG,WAAS,EAAhC,CAAgC,CAAC,CAAC;SACnF;QAED,WAAW,CAAC,OAAO,GAAG,IAAI,CAAC;IAC/B,CAAC,EACD,gBAAgB,GAAG,CAAC,IAAI,CAAC,QAAQ,CACpC,CAAC;IAEF,SAAS,CAAC;QACN,IAAM,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC;QAE7B,IAAI,IAAI,EAAE;YACN,6GAA6G;YAC7G,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,UAAG,CAAC,gBAAgB,GAAG,OAAO,CAAC,GAAG,GAAG,MAAG,CAAC;SAC/D;IACL,CAAC,EAAE,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC,CAAC;IAEhC,SAAS,CAAC;QACN,IAAI,QAAQ,EAAE;YACV,WAAW,CAAC,OAAO,GAAG,IAAI,CAAC;SAC9B;IACL,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;IAEf,OAAO,CACH,KAAC,WAAW,2BACI,gBAAgB,CAAC,UAAU,CAAC,EACxC,SAAS,EAAC,oBAAoB,EAC9B,KAAK,EAAE,CAAC,gBAAgB,GAAG,OAAO,CAAC,GAAG,GAAG,gBACzC,uBAAK,SAAS,EAAC,yBAAyB,gBACpC,cAAK,SAAS,EAAC,0BAA0B,EAAC,GAAG,EAAE,OAAO,GAAI,IACxD,IACI,CACjB,CAAC;AACN,CAAC","sourcesContent":["import {ProgressBar} from 'react-aria-components';\nimport {useTranslateProject} from '../../../hooks/translations/usetranslateproject.js';\nimport {useAnimationFrame} from '../../../hooks/useanimationframe.js';\nimport {useEffect, useRef, useState} from 'react';\n\nexport interface ToastProgressBarProps {\n    isPaused?: boolean;\n    timeout: number;\n}\n\nexport function ToastProgressBar({isPaused, timeout}: ToastProgressBarProps) {\n    const translateProject = useTranslateProject();\n    const [remainingTimeout, setRemainingTimeout] = useState(timeout);\n    const fillRef = useRef<HTMLDivElement>(null);\n    const prevTimeRef = useRef<number | null>(null);\n\n    useAnimationFrame(\n        (time: number) => {\n            if (prevTimeRef.current !== null) {\n                const deltaTime = time - prevTimeRef.current;\n\n                setRemainingTimeout((prevRemainingTimeout) => prevRemainingTimeout - deltaTime);\n            }\n\n            prevTimeRef.current = time;\n        },\n        remainingTimeout > 0 && !isPaused\n    );\n\n    useEffect(() => {\n        const fill = fillRef.current;\n\n        if (fill) {\n            // Need to set width directly to DOM node because React style prop makes the animation lag when moving mouse.\n            fill.style.width = `${(remainingTimeout / timeout) * 100}%`;\n        }\n    }, [remainingTimeout, timeout]);\n\n    useEffect(() => {\n        if (isPaused) {\n            prevTimeRef.current = null;\n        }\n    }, [isPaused]);\n\n    return (\n        <ProgressBar\n            aria-label={translateProject('progress')}\n            className=\"toast-progress-bar\"\n            value={(remainingTimeout / timeout) * 100}>\n            <div className=\"toast-progress-bar__bar\">\n                <div className=\"toast-progress-bar__fill\" ref={fillRef} />\n            </div>\n        </ProgressBar>\n    );\n}\n"]}