{"version":3,"file":"toastwrapper.js","sourceRoot":"","sources":["../../../../src/components/feedback/toast/toastwrapper.tsx"],"names":[],"mappings":";;AAAA,OAAO,EAA2B,WAAW,EAAE,MAAM,EAAC,MAAM,OAAO,CAAC;AACpE,OAAO,EAAC,UAAU,EAAC,MAAM,8BAA8B,CAAC;AAUxD,MAAM,UAAU,YAAY,CAAC,EAAkE;QAAjE,QAAQ,cAAA,EAAE,EAAE,QAAA,EAAE,QAAQ,cAAA,EAAE,cAAc,oBAAA,EAAE,KAAK,WAAA;IACvE,IAAM,WAAW,GAAG,MAAM,CAA0B,IAAI,CAAC,CAAC;IAC1D,IAAM,GAAG,GAAG,WAAW,CACnB,UAAC,EAAsB;QACnB,IAAI,EAAE,EAAE;YACJ,IAAM,YAAY,GAAG;gBACjB,IAAM,MAAM,GAAG,EAAE,CAAC,qBAAqB,EAAE,CAAC,MAAM,CAAC;gBAEjD,cAAc,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;YAC/B,CAAC,CAAC;YAEF,YAAY,EAAE,CAAC;YAEf,WAAW,CAAC,OAAO,GAAG,IAAI,gBAAgB,CAAC,YAAY,CAAC,CAAC;YACzD,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,EAAE;gBAC5B,OAAO,EAAE,IAAI;gBACb,SAAS,EAAE,IAAI;gBACf,aAAa,EAAE,IAAI;aACtB,CAAC,CAAC;SACN;aAAM,IAAI,WAAW,CAAC,OAAO,EAAE;YAC5B,WAAW,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;SACpC;IACL,CAAC,EACD,CAAC,EAAE,EAAE,cAAc,CAAC,CACvB,CAAC;IAEF,OAAO,CACH,uBACI,SAAS,EAAE,UAAU,CAAC,eAAe,EAAE;YACnC,uBAAuB,EAAE,QAAQ;SACpC,CAAC,EACF,GAAG,EAAE,GAAG,EACR,KAAK,EAAE,KAAK,gBACX,QAAQ,IACP,CACT,CAAC;AACN,CAAC","sourcesContent":["import {CSSProperties, ReactNode, useCallback, useRef} from 'react';\nimport {classNames} from '../../../utils/classnames.js';\n\nexport interface ToastWrapperProps {\n    children?: ReactNode;\n    id: string;\n    isActive?: boolean;\n    onHeightUpdate: (id: string, height: number) => void;\n    style?: CSSProperties;\n}\n\nexport function ToastWrapper({children, id, isActive, onHeightUpdate, style}: ToastWrapperProps) {\n    const observerRef = useRef<MutationObserver | null>(null);\n    const ref = useCallback(\n        (el: HTMLElement | null) => {\n            if (el) {\n                const updateHeight = () => {\n                    const height = el.getBoundingClientRect().height;\n\n                    onHeightUpdate(id, height);\n                };\n\n                updateHeight();\n\n                observerRef.current = new MutationObserver(updateHeight);\n                observerRef.current.observe(el, {\n                    subtree: true,\n                    childList: true,\n                    characterData: true\n                });\n            } else if (observerRef.current) {\n                observerRef.current.disconnect();\n            }\n        },\n        [id, onHeightUpdate]\n    );\n\n    return (\n        <div\n            className={classNames('toast-wrapper', {\n                'toast-wrapper--active': isActive\n            })}\n            ref={ref}\n            style={style}>\n            {children}\n        </div>\n    );\n}\n"]}