{"version":3,"file":"skeletontext.js","sourceRoot":"","sources":["../../../../src/components/feedback/skeleton/skeletontext.tsx"],"names":[],"mappings":";;AACA,OAAO,EAAC,UAAU,EAAC,MAAM,8BAA8B,CAAC;AACxD,OAAO,EAAC,QAAQ,EAAgB,MAAM,eAAe,CAAC;AAGtD,MAAM,CAAN,IAAkB,gBAKjB;AALD,WAAkB,gBAAgB;IAC9B,iCAAa,CAAA;IACb,uCAAmB,CAAA;IACnB,mCAAe,CAAA;IACf,mCAAe,CAAA;AACnB,CAAC,EALiB,gBAAgB,KAAhB,gBAAgB,QAKjC;AAyBD,MAAM,UAAU,YAAY,CAAC,EAOT;QAND,UAAU,oBAAA,EACzB,SAAS,eAAA,EACT,GAAG,SAAA,EACH,IAAI,UAAA,EACJ,YAA4B,EAA5B,IAAI,mBAAG,gBAAgB,CAAC,IAAI,KAAA,EAC5B,KAAK,WAAA;IAEL,OAAO,CACH,sCACiB,UAAU,KAAK,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,EACpD,SAAS,EAAE,UAAU,CAAC,uCAAgC,IAAI,cAAI,IAAI,CAAE,EAAE,SAAS,CAAC,EAChF,GAAG,EAAE,GAAG,EACR,KAAK,EAAE,EAAC,KAAK,OAAA,EAAC,gBACd,KAAC,QAAQ,mBAAc,KAAK,GAAI,IAC9B,CACT,CAAC;AACN,CAAC;AASD,MAAM,UAAU,qBAAqB,CAAC,EAOT;IANzB,IAAe,UAAU,oBAAA,EACzB,SAAS,eAAA,EACT,iBAAa,EAAb,SAAS,mBAAG,CAAC,KAAA,EACb,GAAG,SAAA,EACH,KAAK,WAAA,EACF,KAAK,cAN0B,yDAOrC,CADW;IAER,IAAI,SAAS,IAAI,CAAC,EAAE;QAChB,OAAO,IAAI,CAAC;KACf;IACD,IAAI,SAAS,GAAG,CAAC,EAAE;QACf,OAAO,KAAC,YAAY,eAAK,KAAK,mBAAe,UAAU,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,IAAI,CAAC;KAC7G;IAED,OAAO,CACH,sCACiB,UAAU,KAAK,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,EACpD,SAAS,EAAE,UAAU,CAAC,yBAAyB,EAAE,SAAS,CAAC,EAC3D,GAAG,EAAE,GAAG,gBACP,KAAK,CAAC,IAAI,CAAC,EAAC,MAAM,EAAE,SAAS,EAAC,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CACvC,KAAC,YAAY,4BAAc,KAAK,IAAc,KAAK,IAAE,KAAK,EAAE,CAAC,KAAK,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,KAAxD,CAAC,CAA2D,CACtG,EAF0C,CAE1C,CAAC,IACA,CACT,CAAC;AACN,CAAC","sourcesContent":["import {Size} from '../../../constants/index.js';\nimport {classNames} from '../../../utils/classnames.js';\nimport {Skeleton, SkeletonProps} from './skeleton.js';\nimport {RefAttributes} from 'react';\n\nexport const enum SkeletonTextType {\n    Body = 'body',\n    Heading = 'heading',\n    Label = 'label',\n    Title = 'title'\n}\n\nexport interface SkeletonTextProps extends RefAttributes<HTMLDivElement> {\n    /**\n     * ARIA hidden attribute.\n     */\n    ['aria-hidden']?: boolean;\n    /**\n     * CSS class name for the element.\n     */\n    className?: string;\n    /**\n     * Size of text to mimic.\n     */\n    size: Size.xxs | Size.xs | Size.sm | Size.md | Size.lg;\n    /**\n     * Type of text to mimic.\n     */\n    type?: SkeletonTextType;\n    /**\n     * Width of the element.\n     */\n    width?: SkeletonProps['width'];\n}\n\nexport function SkeletonText({\n    'aria-hidden': ariaHidden,\n    className,\n    ref,\n    size,\n    type = SkeletonTextType.Body,\n    width\n}: SkeletonTextProps) {\n    return (\n        <div\n            aria-hidden={ariaHidden === false ? undefined : true}\n            className={classNames(`skeleton-text skeleton-text--${type}-${size}`, className)}\n            ref={ref}\n            style={{width}}>\n            <Skeleton aria-hidden={false} />\n        </div>\n    );\n}\n\nexport interface SkeletonTextMultilineProps extends SkeletonTextProps {\n    /**\n     * Number of lines.\n     */\n    lineCount?: number;\n}\n\nexport function SkeletonTextMultiline({\n    'aria-hidden': ariaHidden,\n    className,\n    lineCount = 2,\n    ref,\n    width,\n    ...props\n}: SkeletonTextMultilineProps) {\n    if (lineCount <= 0) {\n        return null;\n    }\n    if (lineCount < 2) {\n        return <SkeletonText {...props} aria-hidden={ariaHidden} className={className} ref={ref} width={width} />;\n    }\n\n    return (\n        <div\n            aria-hidden={ariaHidden === false ? undefined : true}\n            className={classNames('skeleton-text-multiline', className)}\n            ref={ref}>\n            {Array.from({length: lineCount}, (_, i) => (\n                <SkeletonText aria-hidden={false} key={i} {...props} width={i === lineCount - 1 ? '60%' : width} />\n            ))}\n        </div>\n    );\n}\n"]}