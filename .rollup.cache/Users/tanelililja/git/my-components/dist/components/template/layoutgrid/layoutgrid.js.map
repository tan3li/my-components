{"version":3,"file":"layoutgrid.js","sourceRoot":"","sources":["../../../../src/components/template/layoutgrid/layoutgrid.tsx"],"names":[],"mappings":";;AACA,OAAO,EAAC,UAAU,EAAC,MAAM,8BAA8B,CAAC;AACxD,OAAO,EAAC,UAAU,EAAC,MAAM,kBAAkB,CAAC;AAE5C,OAAO,EAAC,QAAQ,EAAC,MAAM,gCAAgC,CAAC;AAExD,MAAM,CAAN,IAAkB,uBAKjB;AALD,WAAkB,uBAAuB;IACrC,sDAA2B,CAAA;IAC3B,sDAA2B,CAAA;IAC3B,oDAAyB,CAAA;IACzB,qDAA0B,CAAA;AAC9B,CAAC,EALiB,uBAAuB,KAAvB,uBAAuB,QAKxC;AAqBD,SAAS,gBAAgB,CAAC,SAAiB,EAAE,OAA0C;IACnF,IAAM,YAAY,GAAG,EAAE,CAAC;IACxB,IAAM,aAAa,GAAa,EAAE,CAAC;IAEnC,IAAI,QAAQ,CAAC,OAAO,CAAC,EAAE;QACnB,YAAY,CAAC,wBAAiB,SAAS,SAAM,CAAC,GAAG,OAAO,CAAC;KAC5D;SAAM;QACH,KAAK,IAAM,UAAU,IAAI,OAAO,EAAE;YAC9B,YAAY,CAAC,wBAAiB,SAAS,kBAAQ,UAAU,CAAE,CAAC,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;YACnF,aAAa,CAAC,IAAI,CAAC,uBAAgB,SAAS,kBAAQ,UAAU,CAAE,CAAC,CAAC;SACrE;KACJ;IAED,OAAO;QACH,YAAY,cAAA;QACZ,aAAa,eAAA;KAChB,CAAC;AACN,CAAC;AAED,MAAM,UAAU,UAAU,CAAC,EAMT;QALd,QAAQ,cAAA,EACR,SAAS,eAAA,EACT,qBAA+C,EAA/C,aAAa,mBAAG,uBAAuB,CAAC,OAAO,KAAA,EAC/C,GAAG,SAAA,EACH,kBAA+C,EAA/C,UAAU,mBAAG,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,KAAA;IAE/C,IAAM,gBAAgB,GAAG,gBAAgB,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;IAC7D,IAAM,mBAAmB,GAAG,gBAAgB,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;IAEtE,OAAO,CACH,uBACI,SAAS,EAAE,UAAU,0DACjB,aAAa,GACV,gBAAgB,CAAC,aAAa,UAC9B,mBAAmB,CAAC,aAAa,WACpC,SAAS,YAEb,GAAG,EAAE,GAAG,EACR,KAAK,wBAAM,gBAAgB,CAAC,YAAY,GAAK,mBAAmB,CAAC,YAAY,iBAC5E,QAAQ,IACP,CACT,CAAC;AACN,CAAC","sourcesContent":["import {ReactNode, RefAttributes} from 'react';\nimport {classNames} from '../../../utils/classnames.js';\nimport {coreTokens} from '@tan3li/d-tokens';\nimport {BreakpointValues} from './breakpointvalues.js';\nimport {isString} from '../../../utils/stringhelper.js';\n\nexport const enum LayoutGridColumnSpacing {\n    Default = 'var(--space-md)',\n    Compact = 'var(--space-xs)',\n    Comfy = 'var(--space-xl)',\n    None = 'var(--space-none)'\n}\n\nexport interface LayoutGridProps extends RefAttributes<HTMLDivElement> {\n    /**\n     * Children of the grid.\n     */\n    children: ReactNode;\n    /**\n     * CSS class name for the element.\n     */\n    className?: string;\n    /**\n     * Spacing between columns. Can be provided as single value or per breakpoint.\n     */\n    columnSpacing?: LayoutGridColumnSpacing | BreakpointValues<LayoutGridColumnSpacing>;\n    /**\n     * Spacing between row. Can be provided as single value or per breakpoint.\n     */\n    rowSpacing?: string | BreakpointValues<string>;\n}\n\nfunction getGapProperties(dimension: string, spacing: string | BreakpointValues<string>) {\n    const cssVariables = {};\n    const cssClassNames: string[] = [];\n\n    if (isString(spacing)) {\n        cssVariables[`--layout-grid-${dimension}-gap`] = spacing;\n    } else {\n        for (const breakpoint in spacing) {\n            cssVariables[`--layout-grid-${dimension}-gap-${breakpoint}`] = spacing[breakpoint];\n            cssClassNames.push(`layout-grid--${dimension}-gap-${breakpoint}`);\n        }\n    }\n\n    return {\n        cssVariables,\n        cssClassNames\n    };\n}\n\nexport function LayoutGrid({\n    children,\n    className,\n    columnSpacing = LayoutGridColumnSpacing.Default,\n    ref,\n    rowSpacing = coreTokens.dimension.spaceMd.value\n}: LayoutGridProps) {\n    const rowGapProperties = getGapProperties('row', rowSpacing);\n    const columnGapProperties = getGapProperties('column', columnSpacing);\n\n    return (\n        <div\n            className={classNames(\n                'layout-grid',\n                ...rowGapProperties.cssClassNames,\n                ...columnGapProperties.cssClassNames,\n                className\n            )}\n            ref={ref}\n            style={{...rowGapProperties.cssVariables, ...columnGapProperties.cssVariables}}>\n            {children}\n        </div>\n    );\n}\n"]}