{"version":3,"file":"layoutgriditem.js","sourceRoot":"","sources":["../../../../src/components/template/layoutgrid/layoutgriditem.tsx"],"names":[],"mappings":"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","sourcesContent":["import {classNames} from '../../../utils/classnames.js';\nimport {ReactNode, RefAttributes, useMemo} from 'react';\nimport {BreakpointValues} from './breakpointvalues.js';\nimport {isNumber} from '../../../utils/objecthelper.js';\n\nconst layoutGridColumnCounts = {\n    xs: 4,\n    sm: 8,\n    md: 8,\n    lg: 12\n};\n\nexport const LayoutGridItemPresetSize = {\n    Full: {xs: layoutGridColumnCounts.xs, sm: layoutGridColumnCounts.sm, lg: layoutGridColumnCounts.lg},\n    Half: {xs: layoutGridColumnCounts.xs / 2, sm: layoutGridColumnCounts.sm / 2, lg: layoutGridColumnCounts.lg / 2}\n};\n\nexport interface LayoutGridItemProps extends RefAttributes<HTMLDivElement> {\n    /**\n     * Children of the grid item.\n     */\n    children: ReactNode;\n    /**\n     * CSS class name for the element.\n     */\n    className?: string;\n    /**\n     * How many units does the item take space in a grid.\n     * Can be provided as single value or per breakpoint.\n     */\n    size: number | BreakpointValues<number>;\n    /**\n     * From which column item starts in a grid.\n     * Can be provided as single value or per breakpoint.\n     */\n    start?: number | BreakpointValues<number>;\n}\n\nfunction getPlacementProperties(suffix: string, placement?: number | BreakpointValues<number>) {\n    const cssVariables = {};\n    const cssClassNames: string[] = [];\n\n    if (placement) {\n        if (isNumber(placement)) {\n            cssVariables[`--layout-grid-item-${suffix}`] = placement;\n        } else {\n            for (const breakpoint in placement) {\n                cssVariables[`--layout-grid-item-${suffix}-${breakpoint}`] = placement[breakpoint];\n                cssClassNames.push(`layout-grid-item--${suffix}-${breakpoint}`);\n            }\n        }\n    }\n\n    return {\n        cssVariables,\n        cssClassNames\n    };\n}\n\n// eslint-disable-next-line sonarjs/function-return-type\nfunction sanitizeSize(size: number | BreakpointValues<number>) {\n    let newSize = size;\n\n    if (isNumber(newSize)) {\n        if (newSize > layoutGridColumnCounts.xs) {\n            newSize = {\n                xs: layoutGridColumnCounts.xs,\n                sm: Math.min(newSize, layoutGridColumnCounts.sm),\n                lg: Math.min(newSize, layoutGridColumnCounts.lg)\n            };\n        }\n    } else {\n        for (const breakpoint in newSize) {\n            newSize[breakpoint] = Math.min(\n                layoutGridColumnCounts[breakpoint] ?? layoutGridColumnCounts.lg,\n                newSize[breakpoint]\n            );\n        }\n    }\n\n    return newSize;\n}\n\nexport function LayoutGridItem({children, className, ref, size, start}: LayoutGridItemProps) {\n    const sanitizedSize = useMemo(() => sanitizeSize(size), [size]);\n    const spanProperties = getPlacementProperties('span', sanitizedSize);\n    const startProperties = getPlacementProperties('start', start);\n\n    return (\n        <div\n            className={classNames(\n                'layout-grid-item',\n                ...spanProperties.cssClassNames,\n                ...startProperties.cssClassNames,\n                className\n            )}\n            ref={ref}\n            style={{\n                ...spanProperties.cssVariables,\n                ...startProperties.cssVariables\n            }}>\n            {children}\n        </div>\n    );\n}\n"]}