{"version":3,"file":"collapsibleitem.js","sourceRoot":"","sources":["../../../../src/components/datadisplay/collapsible/collapsibleitem.tsx"],"names":[],"mappings":";;AAAA,OAAO,EAAuB,kBAAkB,EAAC,MAAM,eAAe,CAAC;AACvE,OAAO,EAA0C,MAAM,EAAC,MAAM,OAAO,CAAC;AACtE,OAAO,EAAC,OAAO,EAAE,KAAK,EAAC,MAAM,qBAAqB,CAAC;AACnD,OAAO,EAAC,SAAS,EAAE,gBAAgB,EAAE,IAAI,EAAC,MAAM,6BAA6B,CAAC;AAC9E,OAAO,EAAC,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAC,MAAM,sBAAsB,CAAC;AAC/D,OAAO,EAAC,OAAO,EAAC,MAAM,qBAAqB,CAAC;AAC5C,OAAO,EAAC,UAAU,EAAC,MAAM,8BAA8B,CAAC;AACxD,OAAO,EAAsB,KAAK,EAAE,SAAS,EAAE,UAAU,EAAE,aAAa,EAAC,MAAM,YAAY,CAAC;AAC5F,OAAO,EAAC,MAAM,EAAM,MAAM,uBAAuB,CAAC;AAClD,OAAO,EAAC,OAAO,EAAE,cAAc,EAAE,WAAW,EAAC,MAAM,yBAAyB,CAAC;AAC7E,OAAO,EAAC,cAAc,EAAC,MAAM,uBAAuB,CAAC;AACrD,OAAO,EAAC,sBAAsB,EAAC,MAAM,0CAA0C,CAAC;AAEhF,MAAM,CAAN,IAAkB,oBAGjB;AAHD,WAAkB,oBAAoB;IAClC,qCAAa,CAAA;IACb,uCAAe,CAAA;AACnB,CAAC,EAHiB,oBAAoB,KAApB,oBAAoB,QAGrC;AAgBD,MAAM,UAAU,eAAe,CAAC,EAQT;IAPnB,IAAA,sBAAgC,EAAhC,cAAc,mBAAG,SAAS,CAAC,KAAK,KAAA,EAChC,UAAU,gBAAA,EACV,UAAU,gBAAA,EACV,IAAI,UAAA,EACJ,GAAG,SAAA,EACH,aAAkC,EAAlC,KAAK,mBAAG,oBAAoB,CAAC,KAAK,KAAA,EAC/B,KAAK,cAPoB,sEAQ/B,CADW;IAED,IAAA,EAAE,GAAqC,IAAI,GAAzC,EAAE,KAAK,GAA8B,IAAI,MAAlC,EAAE,cAAc,GAAc,IAAI,eAAlB,EAAE,QAAQ,GAAI,IAAI,SAAR,CAAS;IACnD,IAAM,QAAQ,GAAG,MAAM,CAAiB,IAAI,CAAC,CAAC;IAC9C,IAAM,eAAe,GAAG,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC;IACxF,IAAM,KAAK,GAAG,kBAAkB,uBACzB,KAAK,KACR,UAAU,EAAE,eAAe,EAC3B,gBAAgB,YAAC,aAAa;;YAC1B,IAAI,UAAU,EAAE;gBACZ,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;aAC5B;YAED,MAAA,KAAK,CAAC,gBAAgB,sDAAG,aAAa,CAAC,CAAC;QAC5C,CAAC,IACH,CAAC;IACG,IAAA,KAA4B,aAAa,uBACvC,KAAK,KAAE,UAAU,EAAE,eAAe,EAAE,UAAU,YAAA,KAClD,KAAK,EACL,QAAQ,CACX,EAJM,WAAW,iBAAA,EAAE,UAAU,gBAI7B,CAAC;IACF,IAAM,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;IAC9B,IAAA,KAAiC,sBAAsB,CAAC,EAAC,UAAU,YAAA,EAAE,GAAG,EAAE,QAAQ,EAAC,CAAC,EAAnF,QAAQ,cAAA,EAAS,WAAW,WAAuD,CAAC;IAE3F,IAAM,SAAS,GAAG,UAAC,CAAgB;QAC/B,IAAI,UAAU,IAAI,CAAC,CAAC,GAAG,KAAK,gBAAgB,CAAC,MAAM,EAAE;YACjD,KAAK,CAAC,QAAQ,EAAE,CAAC;SACpB;IACL,CAAC,CAAC;IAEF,IAAM,cAAc,GAChB,cAAc,CAAC,CAAC;QACZ,MAAC,cAAc,eACX,KAAC,cAAc,cACX,KAAC,IAAI,IACD,SAAS,EAAC,gCAAgC,EAC1C,IAAI,EAAE,SAAS,CAAC,UAAU,EAC1B,IAAI,EAAE,KAAK,KAAK,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,GACvE,GACW,EACjB,KAAC,OAAO,aAAC,IAAI,EAAE,WAAW,CAAC,KAAK,gBAAG,cAAc,IAAW,IAC/C;QACrB,CAAC,CAAG,IAAI,CAAC;IAEb,OAAO,CACH,wBACI,SAAS,EAAE,UAAU,CACjB,6CAAsC,KAAK,sCAA4B,cAAc,CAAE,EACvF;YACI,4BAA4B,EAAE,UAAU;YACxC,wBAAwB,EAAE,UAAU;SACvC,CACJ,EACD,GAAG,EAAE,GAAG,iBACR,KAAC,SAAS,aAAC,cAAc,EAAC,mCAAmC,gBACzD,MAAC,MAAM,eACC,WAAW,IACf,SAAS,EAAC,0BAA0B,EACpC,SAAS,EAAE,KAAK,CAAC,WAAW,CAAC,SAAS,EAAE,SAAS,CAAC,iBACjD,KAAK,KAAK,oBAAoB,CAAC,IAAI,CAAC,CAAC;4BAClC,MAAC,OAAO,aAAC,SAAS,EAAC,+BAA+B,EAAC,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,iBACrE,KAAK,EACL,cAAc,KACT;4BACd,CAAC,CAAG,MAAC,KAAK,aAAC,SAAS,EAAC,+BAA+B,EAAC,IAAI,EAAE,IAAI,CAAC,EAAE,iBAC1D,2BAAS,KAAK,GAAU,EACvB,cAAc,KACX,EAEZ,KAAC,IAAI,IACD,SAAS,EAAC,+BAA+B,EACzC,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC,YAAY,EAChE,IAAI,EAAE,QAAQ,CAAC,EAAE,GACnB,KACG,IACD,EACZ,yBAAS,UAAU,CAAC,UAAU,EAAE,WAAW,CAAC,IAAE,SAAS,EAAC,mCAAmC,EAAC,GAAG,EAAE,QAAQ,gBACpG,CAAC,UAAU,IAAI,QAAQ,CAAC,IAAI,uBAAK,SAAS,EAAC,2BAA2B,gBAAE,QAAQ,IAAO,IACtF,EACL,KAAK,KAAK,oBAAoB,CAAC,KAAK,IAAI,KAAC,OAAO,IAAC,SAAS,EAAC,2BAA2B,EAAC,IAAI,EAAE,IAAI,CAAC,EAAE,GAAI,KACvG,CACT,CAAC;AACN,CAAC","sourcesContent":["import {DisclosureGroupState, useDisclosureState} from 'react-stately';\nimport {KeyboardEvent, ReactNode, RefAttributes, useRef} from 'react';\nimport {Heading, Label} from '../../text/index.js';\nimport {Alignment, KeyboardEventKey, Size} from '../../../constants/index.js';\nimport {Icon, iconNames, IconSize} from '../../media/index.js';\nimport {Divider} from '../divider/index.js';\nimport {classNames} from '../../../utils/classnames.js';\nimport {AriaDisclosureProps, chain, FocusRing, mergeProps, useDisclosure} from 'react-aria';\nimport {Button, Key} from 'react-aria-components';\nimport {Tooltip, TooltipTrigger, TooltipType} from '../../feedback/index.js';\nimport {TriggerElement} from '../../action/index.js';\nimport {useAutoHeightAnimation} from '../../../hooks/useautoheightanimation.js';\n\nexport const enum CollapsibleItemStyle {\n    Card = 'card',\n    Plain = 'plain'\n}\n\nexport interface CollapsibleItemObject {\n    children: ReactNode;\n    id: Key;\n    title: ReactNode;\n    tooltipContent?: ReactNode;\n}\n\nexport interface CollapsibleItemProps extends AriaDisclosureProps, RefAttributes<HTMLDivElement> {\n    arrowPlacement?: Alignment.start | Alignment.end;\n    groupState?: DisclosureGroupState;\n    item: CollapsibleItemObject;\n    style?: CollapsibleItemStyle;\n}\n\nexport function CollapsibleItem({\n    arrowPlacement = Alignment.start,\n    groupState,\n    isDisabled,\n    item,\n    ref,\n    style = CollapsibleItemStyle.Plain,\n    ...props\n}: CollapsibleItemProps) {\n    const {id, title, tooltipContent, children} = item;\n    const panelRef = useRef<HTMLDivElement>(null);\n    const propsIsExpanded = groupState ? groupState.expandedKeys.has(id) : props.isExpanded;\n    const state = useDisclosureState({\n        ...props,\n        isExpanded: propsIsExpanded,\n        onExpandedChange(newIsExpanded) {\n            if (groupState) {\n                groupState.toggleKey(id);\n            }\n\n            props.onExpandedChange?.(newIsExpanded);\n        }\n    });\n    const {buttonProps, panelProps} = useDisclosure(\n        {...props, isExpanded: propsIsExpanded, isDisabled},\n        state,\n        panelRef\n    );\n    const isExpanded = state.isExpanded;\n    const {isLoaded, props: panelProps2} = useAutoHeightAnimation({isExpanded, ref: panelRef});\n\n    const onKeyDown = (e: KeyboardEvent) => {\n        if (isExpanded && e.key === KeyboardEventKey.Escape) {\n            state.collapse();\n        }\n    };\n\n    const tooltipElement =\n        tooltipContent ?\n            <TooltipTrigger>\n                <TriggerElement>\n                    <Icon\n                        className=\"collapsible-item__tooltip-icon\"\n                        name={iconNames.InfoFilled}\n                        size={style === CollapsibleItemStyle.Card ? IconSize.SM : IconSize.XS}\n                    />\n                </TriggerElement>\n                <Tooltip type={TooltipType.Plain}>{tooltipContent}</Tooltip>\n            </TooltipTrigger>\n        :   null;\n\n    return (\n        <div\n            className={classNames(\n                `collapsible-item collapsible-item--${style} collapsible-item--arrow-${arrowPlacement}`,\n                {\n                    'collapsible-item--disabled': isDisabled,\n                    'collapsible-item--open': isExpanded\n                }\n            )}\n            ref={ref}>\n            <FocusRing focusRingClass=\"collapsible-item__header--focused\">\n                <Button\n                    {...buttonProps}\n                    className=\"collapsible-item__header\"\n                    onKeyDown={chain(buttonProps.onKeyDown, onKeyDown)}>\n                    {style === CollapsibleItemStyle.Card ?\n                        <Heading className=\"collapsible-item__header-text\" level={1} size={Size.xs}>\n                            {title}\n                            {tooltipElement}\n                        </Heading>\n                    :   <Label className=\"collapsible-item__header-text\" size={Size.lg}>\n                            <strong>{title}</strong>\n                            {tooltipElement}\n                        </Label>\n                    }\n                    <Icon\n                        className=\"collapsible-item__header-icon\"\n                        name={isExpanded ? iconNames.ExpandMore : iconNames.ChevronRight}\n                        size={IconSize.LG}\n                    />\n                </Button>\n            </FocusRing>\n            <div {...mergeProps(panelProps, panelProps2)} className=\"collapsible-item__content-wrapper\" ref={panelRef}>\n                {(isExpanded || isLoaded) && <div className=\"collapsible-item__content\">{children}</div>}\n            </div>\n            {style === CollapsibleItemStyle.Plain && <Divider className=\"collapsible-item__divider\" size={Size.sm} />}\n        </div>\n    );\n}\n"]}