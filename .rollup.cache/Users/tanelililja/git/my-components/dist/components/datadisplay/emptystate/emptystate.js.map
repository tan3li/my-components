{"version":3,"file":"emptystate.js","sourceRoot":"","sources":["../../../../src/components/datadisplay/emptystate/emptystate.tsx"],"names":[],"mappings":";;AAAA,OAAO,EAAC,KAAK,EAAC,MAAM,2BAA2B,CAAC;AAChD,OAAO,EAAC,MAAM,EAAc,MAAM,+BAA+B,CAAC;AAClE,OAAO,EAAC,IAAI,EAAC,MAAM,6BAA6B,CAAC;AACjD,OAAO,EAAC,QAAQ,EAAC,MAAM,iCAAiC,CAAC;AACzD,OAAO,EAAC,IAAI,EAAE,QAAQ,EAAC,MAAM,0BAA0B,CAAC;AAExD,OAAO,EAAC,UAAU,EAAC,MAAM,8BAA8B,CAAC;AAGxD,MAAM,CAAN,IAAkB,uBAIjB;AAJD,WAAkB,uBAAuB;IACrC,gDAAqB,CAAA;IACrB,uDAA4B,CAAA;IAC5B,sDAA2B,CAAA;AAC/B,CAAC,EAJiB,uBAAuB,KAAvB,uBAAuB,QAIxC;AAiCD,MAAM,UAAU,UAAU,CAAC,EAST;QARd,QAAQ,cAAA,EACR,WAAW,iBAAA,EACX,SAAS,eAAA,EACT,QAAQ,cAAA,EACR,gBAAuB,EAAvB,QAAQ,mBAAG,QAAQ,CAAC,GAAG,KAAA,EACvB,cAA2C,EAA3C,MAAM,mBAAG,uBAAuB,CAAC,UAAU,KAAA,EAC3C,GAAG,SAAA,EACH,KAAK,WAAA;IAEL,IAAM,gBAAgB,GAAG,MAAM,KAAK,uBAAuB,CAAC,QAAQ,CAAC;IACrE,IAAM,kBAAkB,GAAG,MAAM,KAAK,uBAAuB,CAAC,UAAU,CAAC;IAEzE,OAAO,CACH,wBAAK,SAAS,EAAE,UAAU,CAAC,aAAa,EAAE,SAAS,CAAC,EAAE,GAAG,EAAE,GAAG,iBACzD,QAAQ,IAAI,kBAAkB,IAAI,CAC/B,KAAC,IAAI,IAAC,SAAS,EAAC,mDAAmD,EAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,GAAI,CACzG,EACD,wBACI,SAAS,EAAE,UAAU,CAAC,2BAA2B,EAAE;oBAC/C,qCAAqC,EAAE,gBAAgB;iBAC1D,CAAC,iBACD,QAAQ,IAAI,CAAC,kBAAkB,IAAI,CAChC,KAAC,IAAI,IAAC,SAAS,EAAC,mBAAmB,EAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,GAAI,CACzE,EACD,wBACI,SAAS,EAAE,UAAU,CAAC,2BAA2B,EAAE;4BAC/C,qCAAqC,EAAE,gBAAgB;yBAC1D,CAAC,iBACF,KAAC,KAAK,aAAC,SAAS,EAAC,yBAAyB,EAAC,IAAI,EAAE,IAAI,CAAC,EAAE,gBACpD,2BAAS,KAAK,GAAU,IACpB,EACR,KAAC,QAAQ,aACL,SAAS,EAAE,UAAU,CAAC,wBAAwB,EAAE;oCAC5C,kCAAkC,EAAE,gBAAgB;iCACvD,CAAC,EACF,IAAI,EAAE,IAAI,CAAC,EAAE,gBACZ,QAAQ,IACF,KACT,EACL,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,OAAO,MAAI,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,QAAQ,CAAA,IAAI,CAC9C,KAAC,MAAM,eAAK,WAAW,IAAE,IAAI,EAAE,IAAI,CAAC,EAAE,gBACjC,WAAW,CAAC,QAAQ,IAChB,CACZ,KACC,KACJ,CACT,CAAC;AACN,CAAC","sourcesContent":["import {Label} from '../../text/label/label.js';\nimport {Button, ButtonProps} from '../../action/button/button.js';\nimport {Size} from '../../../constants/index.js';\nimport {BodyText} from '../../text/bodytext/bodytext.js';\nimport {Icon, IconSize} from '../../media/icon/icon.js';\nimport {IconName} from '../../media/icon/icons.js';\nimport {classNames} from '../../../utils/classnames.js';\nimport {RefAttributes} from 'react';\n\nexport const enum EmptyStateLayoutVariant {\n    Centered = 'centered',\n    LeftAligned = 'left-aligned',\n    SideBySide = 'side-by-side'\n}\n\nexport interface EmptyStateProps extends RefAttributes<HTMLDivElement> {\n    /**\n     * Body text.\n     */\n    bodyText: string;\n    /**\n     * Props for the button.\n     */\n    buttonProps?: ButtonProps;\n    /**\n     * Additional class name to be applied to the EmptyState component.\n     */\n    className?: string;\n    /**\n     * Descriptive icon.\n     */\n    iconName?: IconName;\n    /**\n     * Size of the icon. Defaults to IconSize.XXL.\n     */\n    iconSize?: IconSize;\n    /**\n     * Layout of the EmptyState component. Defaults to EmptyStateLayoutVariant.SideBySide.\n     */\n    layout?: EmptyStateLayoutVariant;\n    /**\n     * Title text.\n     */\n    title: string;\n}\n\nexport function EmptyState({\n    bodyText,\n    buttonProps,\n    className,\n    iconName,\n    iconSize = IconSize.XXL,\n    layout = EmptyStateLayoutVariant.SideBySide,\n    ref,\n    title\n}: EmptyStateProps) {\n    const isLayoutCentered = layout === EmptyStateLayoutVariant.Centered;\n    const isLayoutSideBySide = layout === EmptyStateLayoutVariant.SideBySide;\n\n    return (\n        <div className={classNames('empty-state', className)} ref={ref}>\n            {iconName && isLayoutSideBySide && (\n                <Icon className=\"empty-state__icon empty-state__icon--side-by-side\" name={iconName} size={iconSize} />\n            )}\n            <div\n                className={classNames('empty-state__main-content', {\n                    'empty-state__main-content--centered': isLayoutCentered\n                })}>\n                {iconName && !isLayoutSideBySide && (\n                    <Icon className=\"empty-state__icon\" name={iconName} size={iconSize} />\n                )}\n                <div\n                    className={classNames('empty-state__text-content', {\n                        'empty-state__text-content--centered': isLayoutCentered\n                    })}>\n                    <Label className=\"empty-state__title-text\" size={Size.lg}>\n                        <strong>{title}</strong>\n                    </Label>\n                    <BodyText\n                        className={classNames('empty-state__body-text', {\n                            'empty-state__body-text--centered': isLayoutCentered\n                        })}\n                        size={Size.sm}>\n                        {bodyText}\n                    </BodyText>\n                </div>\n                {buttonProps?.onPress && buttonProps?.children && (\n                    <Button {...buttonProps} size={Size.md}>\n                        {buttonProps.children}\n                    </Button>\n                )}\n            </div>\n        </div>\n    );\n}\n"]}