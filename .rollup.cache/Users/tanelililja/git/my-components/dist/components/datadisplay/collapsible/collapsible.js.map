{"version":3,"file":"collapsible.js","sourceRoot":"","sources":["../../../../src/components/datadisplay/collapsible/collapsible.tsx"],"names":[],"mappings":";;AAAA,OAAO,EAAuB,uBAAuB,EAAC,MAAM,eAAe,CAAC;AAC5E,OAAO,EAAC,eAAe,EAAyB,oBAAoB,EAAC,MAAM,sBAAsB,CAAC;AAElG,OAAO,EAAC,UAAU,EAAC,MAAM,8BAA8B,CAAC;AACxD,OAAO,EAAC,SAAS,EAAC,MAAM,6BAA6B,CAAC;AACtD,OAAO,EAAgB,OAAO,EAAC,MAAM,OAAO,CAAC;AAyB7C,MAAM,UAAU,WAAW,CAAC,EAST;IARf,IAAA,8BAA6B,EAA7B,sBAAsB,mBAAG,IAAI,KAAA,EAC7B,sBAAgC,EAAhC,cAAc,mBAAG,SAAS,CAAC,KAAK,KAAA,EAChC,SAAS,eAAA,EACT,YAAY,kBAAA,EACZ,KAAK,WAAA,EACL,GAAG,SAAA,EACH,aAAkC,EAAlC,KAAK,mBAAG,oBAAoB,CAAC,KAAK,KAAA,EAC/B,KAAK,cARgB,kGAS3B,CADW;IAER,IAAM,UAAU,GAAG,uBAAuB,YAAE,sBAAsB,wBAAA,IAAK,KAAK,EAAE,CAAC;IAC/E,IAAM,eAAe,GAAG,OAAO,CAAC,cAAM,OAAA,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,EAAO,CAAC,EAAvD,CAAuD,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;IAE/G,OAAO,CACH,uBAAK,SAAS,EAAE,UAAU,CAAC,mCAA4B,KAAK,WAAQ,EAAE,SAAS,CAAC,EAAE,GAAG,EAAE,GAAG,gBACrF,KAAK,CAAC,GAAG,CAAC,UAAC,IAAI;;YAAK,OAAA,CACjB,KAAC,eAAe,IACZ,cAAc,EAAE,cAAc,EAC9B,UAAU,EAAE,UAAU,EACtB,UAAU,EAAE,MAAA,KAAK,CAAC,UAAU,mCAAI,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,EAC5D,IAAI,EAAE,IAAI,EAEV,KAAK,EAAE,KAAK,IADP,IAAI,CAAC,EAAE,CAEd,CACL,CAAA;SAAA,CAAC,IACA,CACT,CAAC;AACN,CAAC","sourcesContent":["import {DisclosureGroupProps, useDisclosureGroupState} from 'react-stately';\nimport {CollapsibleItem, CollapsibleItemObject, CollapsibleItemStyle} from './collapsibleitem.js';\nimport {Key} from 'react-aria-components';\nimport {classNames} from '../../../utils/classnames.js';\nimport {Alignment} from '../../../constants/index.js';\nimport {RefAttributes, useMemo} from 'react';\n\nexport interface CollapsibleProps extends DisclosureGroupProps, RefAttributes<HTMLDivElement> {\n    /**\n     * Placement of the arrow in the collapsible item headers.\n     */\n    arrowPlacement?: Alignment.start | Alignment.end;\n    /**\n     * The CSS className for the element.\n     */\n    className?: string;\n    /**\n     * Disabled item keys.\n     */\n    disabledKeys?: Iterable<Key>;\n    /**\n     * Collapsible items.\n     */\n    items: CollapsibleItemObject[];\n    /**\n     * Display style for the collapsible items.\n     */\n    style?: CollapsibleItemStyle;\n}\n\nexport function Collapsible({\n    allowsMultipleExpanded = true,\n    arrowPlacement = Alignment.start,\n    className,\n    disabledKeys,\n    items,\n    ref,\n    style = CollapsibleItemStyle.Plain,\n    ...props\n}: CollapsibleProps) {\n    const groupState = useDisclosureGroupState({allowsMultipleExpanded, ...props});\n    const disabledKeysSet = useMemo(() => (disabledKeys ? new Set(disabledKeys) : new Set<Key>()), [disabledKeys]);\n\n    return (\n        <div className={classNames(`collapsible collapsible--${style}-items`, className)} ref={ref}>\n            {items.map((item) => (\n                <CollapsibleItem\n                    arrowPlacement={arrowPlacement}\n                    groupState={groupState}\n                    isDisabled={props.isDisabled ?? disabledKeysSet.has(item.id)}\n                    item={item}\n                    key={item.id}\n                    style={style}\n                />\n            ))}\n        </div>\n    );\n}\n"]}