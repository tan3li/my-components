{"version":3,"file":"datatable.js","sourceRoot":"","sources":["../../../../src/components/datadisplay/datatable/datatable.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n    ColumnDef,\n    ColumnOrderState,\n    ColumnPinningState,\n    createColumnHelper,\n    ExpandedState,\n    flexRender,\n    getCoreRowModel,\n    getExpandedRowModel,\n    getGroupedRowModel,\n    GroupingState,\n    PaginationState,\n    Row,\n    RowData,\n    RowSelectionState,\n    SortingState,\n    Table,\n    useReactTable,\n    VisibilityState\n} from '@tanstack/react-table';\nimport {Alignment, Size} from '../../../constants/index.js';\nimport {classNames} from '../../../utils/classnames.js';\nimport {Label} from '../../text/index.js';\nimport {DataTableCellContent} from './datatablecellcontent.js';\nimport {isString} from '../../../utils/stringhelper.js';\nimport {\n    ComponentPropsWithoutRef,\n    CSSProperties,\n    ReactNode,\n    RefAttributes,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState\n} from 'react';\nimport {isFunction, safeCall} from '../../../utils/functionhelper.js';\nimport {getIndexOfChangedColumnSort} from './getindexofchangedcolumnsort.js';\nimport {Pagination, PaginationProps} from '../../navigation/index.js';\nimport {\n    closestCenter,\n    DndContext,\n    DragEndEvent,\n    DragMoveEvent,\n    DragOverlay,\n    DragStartEvent,\n    KeyboardSensor,\n    MouseSensor,\n    TouchSensor,\n    UniqueIdentifier,\n    useSensor,\n    useSensors\n} from '@dnd-kit/core';\nimport {restrictToParentElement} from '@dnd-kit/modifiers';\nimport {\n    SortableContext,\n    sortableKeyboardCoordinates,\n    SortingStrategy,\n    verticalListSortingStrategy\n} from '@dnd-kit/sortable';\nimport {DataTableRow} from './datatablerow.js';\nimport {DataTableHeaderCell} from './datatableheadercell.js';\nimport {DataTableDisplayColumnID} from './datatabledisplaycolumnid.js';\nimport {CellContext} from '@tanstack/table-core';\nimport {DataTableRowDragMode, DraggedRowData, DropPosition} from './types.js';\nimport {throttle} from '../../../utils/debounce.js';\nimport {ColumnConfigurator, ColumnConfiguratorProps} from '../columnconfigurator/columnconfigurator.js';\nimport {ColumnConfiguratorItem} from '../columnconfigurator/columnitem.js';\nimport {Button, ButtonStyle, ButtonVariant, IconButton} from '../../action/index.js';\nimport {useTranslateCommon} from '../../../hooks/translations/usetranslatecommon.js';\nimport {iconNames} from '../../media/index.js';\nimport {useTranslateRowDragAndDrop} from '../../../hooks/translations/usetranslaterowdraganddrop.js';\nimport {SkeletonDataTable, SkeletonDataTableProps} from '../../feedback/skeleton/skeletondatatable.js';\nimport {createPortal} from 'react-dom';\nimport {isObject} from '../../../utils/objecthelper.js';\nimport {DataTableRowDragOverlay} from './datatablerowdragoverlay.js';\nimport {nestedDataTableKeyboardCoordinateGetter} from './nestedatatablekeyboardcoordinategetter.js';\n\ninterface ColumnPinningOptions {\n    isSticky?: boolean;\n    offset?: number;\n}\n\ndeclare module '@tanstack/react-table' {\n    interface ColumnMeta<TData extends RowData, TValue> {\n        /**\n         * Alignment of the content within column cells.\n         */\n        alignment?: Alignment;\n        /**\n         * Options for column pinning for left and right side.\n         * isSticky = whether column will stick to given side\n         * offset = distance of the sticking column from given side\n         */\n        columnPinningOptions?: {\n            left?: ColumnPinningOptions;\n            right?: ColumnPinningOptions;\n        };\n        /**\n         * Whether to align the header text with body cell TextField text.\n         */\n        isEditable?: boolean;\n        /**\n         * Whether column is the \"title\" for the row.\n         * Set this for 1 column when using nested rowDragMode to get the correct title for the drag overlay.\n         */\n        isRowTitle?: boolean;\n        /**\n         * Provide additional props for cell element.\n         */\n        getCellProps?: (context: CellContext<TData, TValue>) => ComponentPropsWithoutRef<'td'>;\n        /**\n         * CSS styles for column header.\n         */\n        headerStyle?: CSSProperties;\n        /**\n         * Column title as text. Required when using column drag and drop.\n         */\n        title?: string;\n        /**\n         * Whether column header should row-span to eliminate empty cells when using grouped columns.\n         */\n        useHeaderRowSpan?: boolean;\n    }\n    interface TableMeta<TData extends RowData> {\n        enableParentRowSelectionSync?: boolean;\n        getRowProps?: (row: Row<TData>) => ComponentPropsWithoutRef<'tr'>;\n        isRowDisabled?: (row: Row<TData>) => boolean;\n        isRowLoading?: (row: Row<TData>) => boolean;\n        onDataEdit?: (rowIndex: number, columnId: string, value: any) => void;\n    }\n}\n\nexport interface DataTableColumnConfiguratorOptions extends Partial<Omit<ColumnConfiguratorProps, 'children'>> {\n    /**\n     * Whether to use icon-button as column configurator button. By default, normal button is used.\n     */\n    isMinimized?: boolean;\n}\n\nexport type DataTablePaginationProps = Pick<PaginationProps, 'itemsPerPageOptions' | 'showPagesFirst'>;\n\nexport interface DataTableProps<TData extends RowData> extends RefAttributes<HTMLDivElement> {\n    /**\n     * Props for bottom pagination.\n     */\n    bottomPaginationProps?: DataTablePaginationProps;\n    /**\n     * The CSS className for the table element.\n     */\n    className?: string;\n    /**\n     * Options for column configurator.\n     */\n    columnConfiguratorOptions?: DataTableColumnConfiguratorOptions;\n    /**\n     * Order of the columns.\n     */\n    columnOrder?: ColumnOrderState;\n    /**\n     * Pinned columns.\n     */\n    columnPinning?: ColumnPinningState;\n    /**\n     * Column definitions for the table.\n     */\n    columns: Array<ColumnDef<TData, any>>;\n    /**\n     * Visible columns.\n     */\n    columnVisibility?: VisibilityState;\n    /**\n     * Data for the table.\n     */\n    data: TData[];\n    /**\n     * Whether to select/unselect parent row when its sub-rows are selected/unselected.\n     */\n    enableParentRowSelectionSync?: boolean;\n    /**\n     * Whether row(s) can be selected. Can be defined as boolean or callback function.\n     */\n    enableRowSelection?: boolean | ((row: Row<TData>) => boolean);\n    /**\n     * Current expanded rows state.\n     */\n    expanded?: ExpandedState;\n    /**\n     * Callback for checking whether row is expandable.\n     */\n    getRowCanExpand?: (row: Row<TData>) => boolean;\n    /**\n     * Callback for getting unique id for row. If not provided, indexes are used.\n     */\n    getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string;\n    /**\n     * Callback for getting props for table row.\n     */\n    getRowProps?: (row: Row<TData>) => ComponentPropsWithoutRef<'tr'>;\n    /**\n     * Callback for getting title for the row. This is mainly needed for screen reader announcements in drag and drop.\n     */\n    getRowTitle?: (originalRow: TData) => string;\n    /**\n     * Callback for getting sub rows for expandable row.\n     */\n    getSubRows?: (originalRow: TData, index: number) => undefined | TData[];\n    /**\n     * Row grouping state.\n     */\n    grouping?: GroupingState;\n    /**\n     * Callback which determines whether row is disabled.\n     */\n    isRowDisabled?: (row: Row<TData>) => boolean;\n    /**\n     * Callback which determines whether row is loading.\n     */\n    isRowLoading?: (row: Row<TData>) => boolean;\n    /**\n     * Whether to show skeleton instead of an actual element.\n     */\n    isSkeleton?: boolean;\n    /**\n     * Callback for the column order change.\n     */\n    onColumnOrderChange?: (columnOrder: ColumnOrderState) => void;\n    /**\n     * Callback for the column visibility change.\n     */\n    onColumnVisibilityChange?: (columnVisibility: VisibilityState) => void;\n    /**\n     * Callback for the pagination change.\n     */\n    onExpandedChange?: (expanded: ExpandedState) => void;\n    /**\n     * Callback for data editing.\n     */\n    onDataEdit?: (rowIndex: number, columnId: string, value: any) => void;\n    /**\n     * Callback for the pagination change.\n     */\n    onPaginationChange?: (pagination: PaginationState) => void;\n    /**\n     * Callback for the row drag ending.\n     */\n    onRowDragEnd?: (params: {\n        rowId: string;\n        oldIndex: number;\n        newIndex: number;\n        oldParentId?: string;\n        newParentId?: string;\n    }) => void;\n    /**\n     * Callback for the row drag starting.\n     */\n    onRowDragStart?: (event: DragStartEvent) => void;\n    /**\n     * Callback for the row selection change.\n     */\n    onRowSelectionChange?: (rowSelection: RowSelectionState) => void;\n    /**\n     * Callback for the column sorting change.\n     */\n    onSortingChange?: (sorting: SortingState) => void;\n    /**\n     * Selectable page sizes for pagination.\n     */\n    pageSizes?: number[];\n    /**\n     * Current pagination state.\n     */\n    pagination?: PaginationState;\n    /**\n     * Content to render before the table. Aligned with top pager.\n     */\n    renderBefore?: () => ReactNode;\n    /**\n     * Whether columns can be re-ordered by drag and dropping.\n     * Make sure columns have unique ids when using this prop for drag and drop to work correctly.\n     */\n    reorderableColumns?: boolean;\n    /**\n     * Determines how row drag and drop is handled.\n     */\n    rowDragMode?: DataTableRowDragMode;\n    /**\n     * Current row selection state.\n     */\n    rowSelection?: RowSelectionState;\n    /**\n     * Props for skeleton.\n     */\n    skeletonProps?: Partial<SkeletonDataTableProps>;\n    /**\n     * Current column sorting state.\n     */\n    sorting?: SortingState;\n    /**\n     * Determines the order of sorts in sorting array when adding new or toggling existing sorts.\n     * \"First\" means first selected columns get the priority => sorts are added to end of the array.\n     * \"Last\" means last selected columns get the priority => sorts are added to start of the array.\n     * If not set, order is always the selection order.\n     */\n    sortingColumnSelectionPriority?: 'First' | 'Last';\n    /**\n     * Custom sorting strategy for the table rows.\n     */\n    sortingStrategy?: SortingStrategy;\n    /**\n     * Props for top pagination.\n     */\n    topPaginationProps?: DataTablePaginationProps;\n    /**\n     * Total number of rows. Needed for pagination.\n     */\n    totalRowCount?: number;\n    /**\n     * The CSS className for the root/wrapper element.\n     */\n    wrapperClassName?: string;\n}\n\nfunction detectTableFeatures<TData>(table: Table<TData>) {\n    const allColumns = table.getAllFlatColumns();\n    const features = {\n        hasFooter: false,\n        hasDraggableRows: false\n    };\n\n    for (let i = 0, len = allColumns.length; i < len; i++) {\n        const col = allColumns[i];\n\n        if (col.columnDef.footer) {\n            features.hasFooter = true;\n        }\n        if (col.id === DataTableDisplayColumnID.DragHandle) {\n            features.hasDraggableRows = true;\n        }\n    }\n\n    return features;\n}\n\nfunction getRowTitle<TData extends RowData>(\n    rowId: UniqueIdentifier,\n    table: Table<TData>,\n    getFn?: (originalRow: TData) => string\n) {\n    return getFn ? getFn(table.getRow(rowId as string).original) : (rowId as string);\n}\n\nfunction getColumnTitle<TData extends RowData>(columnId: UniqueIdentifier, table: Table<TData>) {\n    return table.getColumn(columnId as string)?.columnDef?.meta?.title ?? (columnId as string);\n}\n\nconst SYNC_SCROLL_DELAY_MS = 15;\n\n// eslint-disable-next-line max-statements\nexport function DataTable<TData extends RowData>({\n    bottomPaginationProps,\n    className,\n    columnConfiguratorOptions,\n    columnOrder: initialColumnOrder,\n    columnPinning: initialColumnPinning,\n    columns,\n    columnVisibility: initialColumnVisibility,\n    data,\n    enableParentRowSelectionSync,\n    enableRowSelection = true,\n    expanded: initialExpanded,\n    getRowCanExpand,\n    getRowId,\n    getRowProps,\n    getRowTitle: getRowTitleFn,\n    getSubRows,\n    grouping: initialGrouping,\n    isRowDisabled,\n    isRowLoading,\n    isSkeleton,\n    onColumnOrderChange,\n    onColumnVisibilityChange,\n    onExpandedChange,\n    onDataEdit,\n    onPaginationChange,\n    onRowSelectionChange,\n    onSortingChange,\n    pageSizes,\n    pagination: initialPagination,\n    rowSelection: initialRowSelection,\n    ref,\n    reorderableColumns,\n    rowDragMode = DataTableRowDragMode.Flat,\n    skeletonProps,\n    sorting: initialSorting,\n    sortingColumnSelectionPriority,\n    sortingStrategy,\n    topPaginationProps,\n    totalRowCount,\n    wrapperClassName,\n    ...props\n}: DataTableProps<TData>) {\n    const [sorting, setSorting] = useState<SortingState>(initialSorting ?? []);\n    const [rowSelection, setRowSelection] = useState<RowSelectionState>(initialRowSelection ?? {});\n    const [pagination, setPagination] = useState<PaginationState>(initialPagination ?? {pageIndex: 0, pageSize: 0});\n    const [expanded, setExpanded] = useState<ExpandedState>(initialExpanded ?? {});\n    const grouping = useMemo(() => initialGrouping ?? [], [initialGrouping]);\n    const columnPinning = useMemo(() => initialColumnPinning ?? {}, [initialColumnPinning]);\n    const [columnOrder, setColumnOrder] = useState<ColumnOrderState>(initialColumnOrder ?? []);\n    const [columnVisibility, setColumnVisibility] = useState<VisibilityState>(initialColumnVisibility ?? {});\n    const [draggedRowData, setDraggedRowData] = useState<DraggedRowData | null>(null);\n    const rowDropPositionRef = useRef<DropPosition | null>(null);\n    const a11yContainerRef = useRef<HTMLDivElement>(null);\n    const stickyContainerRef = useRef<HTMLDivElement>(null);\n    const scrollableContainerRef = useRef<HTMLDivElement>(null);\n    const translateCommon = useTranslateCommon();\n    const translateRowDragAndDrop = useTranslateRowDragAndDrop();\n\n    const table = useReactTable<TData>({\n        autoResetExpanded: false,\n        columns,\n        data,\n        enableRowSelection: (row) =>\n            !(\n                (isFunction(enableRowSelection) ? !enableRowSelection(row) : !enableRowSelection) ||\n                (isFunction(isRowDisabled) && isRowDisabled(row))\n            ),\n        getCoreRowModel: getCoreRowModel(),\n        getExpandedRowModel: getExpandedRowModel(),\n        getGroupedRowModel: getGroupedRowModel(),\n        getRowCanExpand,\n        getRowId,\n        getSubRows,\n        isMultiSortEvent: () => true,\n        manualPagination: true,\n        manualSorting: true,\n        rowCount: totalRowCount,\n        state: {\n            columnOrder,\n            columnPinning,\n            columnVisibility,\n            expanded,\n            grouping,\n            pagination,\n            rowSelection,\n            sorting\n        },\n        onColumnOrderChange: (updaterOrValue) => {\n            const newColumnOrder = isFunction(updaterOrValue) ? updaterOrValue(columnOrder) : updaterOrValue;\n\n            setColumnOrder(newColumnOrder);\n            safeCall(onColumnOrderChange, newColumnOrder);\n        },\n        onColumnVisibilityChange: (updaterOrValue) => {\n            const newColumnVisibility = isFunction(updaterOrValue) ? updaterOrValue(columnVisibility) : updaterOrValue;\n\n            setColumnVisibility(newColumnVisibility);\n            safeCall(onColumnVisibilityChange, newColumnVisibility);\n        },\n        onExpandedChange: (updaterOrValue) => {\n            const newExpanded = isFunction(updaterOrValue) ? updaterOrValue(expanded) : updaterOrValue;\n\n            setExpanded(newExpanded);\n            safeCall(onExpandedChange, newExpanded);\n        },\n        onPaginationChange: (updaterOrValue) => {\n            const newPagination = isFunction(updaterOrValue) ? updaterOrValue(pagination) : updaterOrValue;\n\n            setPagination(newPagination);\n            safeCall(onPaginationChange, newPagination);\n        },\n        onRowSelectionChange: (updaterOrValue) => {\n            const newRowSelection = isFunction(updaterOrValue) ? updaterOrValue(rowSelection) : updaterOrValue;\n\n            setRowSelection(newRowSelection);\n            safeCall(onRowSelectionChange, newRowSelection);\n        },\n        onSortingChange: (updaterOrValue) => {\n            const newSorting = isFunction(updaterOrValue) ? updaterOrValue(sorting) : updaterOrValue;\n            const idx = getIndexOfChangedColumnSort(newSorting, sorting);\n\n            if (idx !== -1 && sortingColumnSelectionPriority) {\n                newSorting[sortingColumnSelectionPriority === 'Last' ? 'unshift' : 'push'](\n                    newSorting.splice(idx, 1)[0]\n                );\n            }\n\n            setSorting(newSorting);\n            safeCall(onSortingChange, newSorting);\n        },\n        meta: {\n            enableParentRowSelectionSync,\n            getRowProps,\n            isRowDisabled,\n            isRowLoading,\n            onDataEdit\n        }\n    });\n    const {hasFooter, hasDraggableRows} = detectTableFeatures(table);\n    const showPagination = !!initialPagination;\n    const {pageIndex, pageSize} = table.getState().pagination;\n    const rowIds: string[] = [];\n    const columnConfiguratorColumns: ColumnConfiguratorItem[] = useMemo(() => {\n        if (reorderableColumns) {\n            return columnOrder.map((id) => {\n                const isDragHandleColumn = id === DataTableDisplayColumnID.DragHandle;\n\n                return {\n                    id,\n                    name: getColumnTitle(id, table),\n                    isHidden: isDragHandleColumn,\n                    isSelectable: !isDragHandleColumn\n                };\n            });\n        }\n\n        return [];\n    }, [columnOrder, reorderableColumns]);\n    const hasNestedRowDrag = rowDragMode === DataTableRowDragMode.Nested;\n\n    const onRowDragCancel = () => {\n        if (draggedRowData) {\n            setDraggedRowData(null);\n            setExpanded(draggedRowData.expanded ?? {});\n        }\n    };\n\n    const onRowDragEnd = (event: DragEndEvent) => {\n        if (hasNestedRowDrag) {\n            const {active, over, dropPosition, expanded: expandedState} = draggedRowData ?? {};\n\n            if (active && over && dropPosition) {\n                const activeId = active.id as string;\n                const overId = over.id as string;\n                const activeRow = table.getRow(activeId);\n                const overRow = table.getRow(overId);\n                const oldParentId = activeRow.parentId;\n                const oldIndex = activeRow.index;\n                const overIndex = overRow.index;\n                let newIndex: number, newParentId: string | undefined;\n\n                if (dropPosition === DropPosition.Before) {\n                    newParentId = overRow.parentId;\n                    newIndex = overIndex - (newParentId === oldParentId && overIndex > oldIndex ? 1 : 0);\n                } else if (dropPosition === DropPosition.After) {\n                    newParentId = overRow.parentId;\n                    newIndex = overIndex + (newParentId === oldParentId && overIndex > oldIndex ? 0 : 1);\n                } else if (activeId === overId) {\n                    newParentId = oldParentId;\n                    newIndex = oldIndex;\n                } else {\n                    newParentId = activeId === overId ? oldParentId : overId;\n                    newIndex = overRow.subRows?.length ?? 0;\n                }\n\n                props.onRowDragEnd?.({\n                    rowId: activeId,\n                    newIndex,\n                    oldIndex,\n                    newParentId,\n                    oldParentId\n                });\n            }\n\n            setDraggedRowData(null);\n            setExpanded(expandedState ?? {});\n        } else {\n            const {active, over} = event;\n            const activeId = active?.id as string;\n            const overId = over?.id as string;\n\n            if (activeId && overId && rowIds.includes(activeId)) {\n                safeCall(props.onRowDragEnd, {\n                    rowId: activeId,\n                    oldIndex: rowIds.indexOf(activeId),\n                    newIndex: rowIds.indexOf(overId)\n                });\n            }\n        }\n    };\n\n    const onRowDragMove = (event: DragMoveEvent) => {\n        const {active, over} = event;\n        const activeTop = active.rect.current.translated?.top;\n\n        if (draggedRowData && activeTop !== undefined && over) {\n            const {top: overTop, height: overHeight} = over.rect;\n            const heightPercentage = 0.25;\n            const afterThreshold = overTop + overHeight * heightPercentage;\n            const beforeThreshold = overTop - overHeight * heightPercentage;\n            let dropPosition: DropPosition = DropPosition.Inside;\n\n            if (activeTop < beforeThreshold) {\n                dropPosition = DropPosition.Before;\n            } else if (activeTop > afterThreshold) {\n                dropPosition = DropPosition.After;\n            }\n\n            if (over.id !== draggedRowData.over?.id || dropPosition !== draggedRowData.dropPosition) {\n                setDraggedRowData({\n                    ...draggedRowData,\n                    active,\n                    dropPosition,\n                    over\n                });\n\n                // Setting state is async so it's not immediately readable in dnd a11y announcements.\n                // Thus, we set it to ref for quick access.\n                rowDropPositionRef.current = dropPosition;\n            }\n        }\n    };\n\n    const onRowDragOver = (event: DragMoveEvent) => {\n        // We need to handle drag over events for keyboard because onDragMove is triggered only once after key press and\n        // at that point event.over has not updated yet.\n        if (event.activatorEvent instanceof KeyboardEvent) {\n            onRowDragMove(event);\n        }\n    };\n\n    const onRowDragStart = (event: DragStartEvent) => {\n        props.onRowDragStart?.(event);\n\n        if (hasNestedRowDrag) {\n            const active = event.active;\n            const activeId = active.id;\n            const isExpanded = isObject(expanded) ? expanded[activeId] : expanded;\n\n            setDraggedRowData({active, expanded});\n\n            if (isExpanded) {\n                setExpanded({\n                    ...(isObject(expanded) ? expanded : (\n                        table.getRowModel().rows.reduce((currentValue, row) => {\n                            if (row.subRows) {\n                                currentValue[row.id] = true;\n                            }\n\n                            return currentValue;\n                        }, {})\n                    )),\n                    [activeId]: false\n                });\n            }\n        }\n    };\n\n    const onPageIndexChange = (newPageIndex: number) => {\n        table.setPageIndex(newPageIndex);\n    };\n\n    const onPageSizeChange = (newPageSize: number) => {\n        table.setPageSize(newPageSize);\n    };\n\n    const syncScroll = useCallback(\n        throttle(() => {\n            const scrollContainer = scrollableContainerRef.current;\n            const stickyContainer = stickyContainerRef.current;\n\n            if (scrollContainer && stickyContainer) {\n                stickyContainer.scrollLeft = scrollContainer.scrollLeft;\n            }\n        }, SYNC_SCROLL_DELAY_MS),\n        []\n    );\n\n    const rowDragSensors = useSensors(\n        useSensor(MouseSensor, {}),\n        useSensor(TouchSensor, {}),\n        useSensor(KeyboardSensor, {\n            coordinateGetter: hasNestedRowDrag ? nestedDataTableKeyboardCoordinateGetter : sortableKeyboardCoordinates\n        })\n    );\n\n    useEffect(() => {\n        setExpanded(initialExpanded ?? {});\n    }, [initialExpanded]);\n\n    useEffect(() => {\n        setPagination(initialPagination ?? {pageIndex: 0, pageSize: 0});\n    }, [initialPagination]);\n\n    useEffect(() => {\n        setRowSelection(initialRowSelection ?? {});\n    }, [initialRowSelection]);\n\n    useEffect(() => {\n        setSorting(initialSorting ?? []);\n    }, [initialSorting]);\n\n    useEffect(() => {\n        setColumnOrder(initialColumnOrder ?? []);\n    }, [initialColumnOrder]);\n\n    if (isSkeleton) {\n        return <SkeletonDataTable {...skeletonProps} />;\n    }\n\n    const visitedHeaderPlaceholderColumns = new Set();\n    const headerRows = table.getHeaderGroups().map((headerGroup, idx, headerGroups) => (\n        <tr\n            className={classNames('data-table__header-row', {\n                'data-table__header-row--first': idx === 0,\n                'data-table__header-row--last': idx === headerGroups.length - 1\n            })}\n            key={headerGroup.id}>\n            {headerGroup.headers.map((header) => {\n                const {column, id, isPlaceholder} = header;\n                const useHeaderRowSpan = column.columnDef.meta?.useHeaderRowSpan;\n                let showContent: boolean, rowSpan: number | undefined;\n\n                if (isPlaceholder) {\n                    visitedHeaderPlaceholderColumns.add(column.id);\n                    if (useHeaderRowSpan) {\n                        rowSpan = header.getLeafHeaders().length;\n                    }\n                    showContent = true;\n                } else {\n                    showContent = !visitedHeaderPlaceholderColumns.has(column.id);\n\n                    if (useHeaderRowSpan && !showContent) {\n                        return null;\n                    }\n                }\n\n                return <DataTableHeaderCell header={header} key={id} rowSpan={rowSpan} showContent={showContent} />;\n            })}\n        </tr>\n    ));\n\n    const bodyRows = table.getRowModel().rows.map((row) => {\n        const rowId = row.id;\n\n        rowIds.push(rowId);\n\n        return (\n            <DataTableRow\n                draggedRowData={draggedRowData}\n                isDraggable={hasDraggableRows}\n                key={rowId}\n                row={row}\n                rowDragMode={rowDragMode}\n                table={table}\n            />\n        );\n    });\n\n    const footerRows =\n        hasFooter ?\n            table.getFooterGroups().map((footerGroup) => (\n                <tr className=\"data-table__footer-row\" key={footerGroup.id}>\n                    {footerGroup.headers.map((header) => {\n                        let content =\n                            header.isPlaceholder ? null : (\n                                flexRender(header.column.columnDef.footer, header.getContext())\n                            );\n\n                        if (isString(content)) {\n                            content = (\n                                <Label size={Size.sm}>\n                                    <strong>{content}</strong>\n                                </Label>\n                            );\n                        }\n\n                        return (\n                            <td className=\"data-table__footer-cell\" key={header.id}>\n                                <DataTableCellContent alignment={header.column.columnDef.meta?.alignment}>\n                                    {content}\n                                </DataTableCellContent>\n                            </td>\n                        );\n                    })}\n                </tr>\n            ))\n        :   null;\n\n    const renderTable = (hasRowDrag?: boolean) => (\n        <table className={classNames('data-table', className)}>\n            <thead className=\"data-table__header\">{headerRows}</thead>\n            <tbody className=\"data-table__body\">\n                {hasRowDrag ?\n                    <DndContext\n                        accessibility={{\n                            container: a11yContainerRef.current!,\n                            screenReaderInstructions: {\n                                draggable: translateRowDragAndDrop('instructions')\n                            },\n                            announcements: {\n                                onDragStart({active}) {\n                                    return translateRowDragAndDrop('onDragStart', {\n                                        title: getRowTitle(active.id, table, getRowTitleFn)\n                                    });\n                                },\n                                onDragMove({active, over}) {\n                                    if (hasNestedRowDrag && over) {\n                                        const keys = {\n                                            activeTitle: getRowTitle(active.id, table, getRowTitleFn),\n                                            overTitle: getRowTitle(over.id, table, getRowTitleFn)\n                                        };\n                                        const dragOverMsg = translateRowDragAndDrop('onDragOver', keys);\n                                        const dropPos = rowDropPositionRef.current;\n\n                                        if (dropPos === DropPosition.Before) {\n                                            return translateRowDragAndDrop('onDragOverBefore', keys);\n                                        } else if (dropPos === DropPosition.After) {\n                                            return translateRowDragAndDrop('onDragOverAfter', keys);\n                                        }\n\n                                        return dragOverMsg;\n                                    }\n\n                                    return '';\n                                },\n                                onDragOver({active, over}) {\n                                    if (over) {\n                                        const keys = {\n                                            activeTitle: getRowTitle(active.id, table, getRowTitleFn),\n                                            overTitle: getRowTitle(over.id, table, getRowTitleFn)\n                                        };\n                                        const dragOverMsg = translateRowDragAndDrop('onDragOver', keys);\n\n                                        if (hasNestedRowDrag) {\n                                            const dropPos = rowDropPositionRef.current;\n\n                                            if (dropPos === DropPosition.Before) {\n                                                return translateRowDragAndDrop('onDragOverBefore', keys);\n                                            } else if (dropPos === DropPosition.After) {\n                                                return translateRowDragAndDrop('onDragOverAfter', keys);\n                                            }\n\n                                            return dragOverMsg;\n                                        }\n\n                                        return dragOverMsg;\n                                    }\n\n                                    return translateRowDragAndDrop('onDragOverEnd', {\n                                        title: getRowTitle(active.id, table, getRowTitleFn)\n                                    });\n                                },\n                                onDragEnd({active, over}) {\n                                    const dropPos = rowDropPositionRef.current;\n\n                                    rowDropPositionRef.current = null;\n\n                                    if (over) {\n                                        const keys = {\n                                            activeTitle: getRowTitle(active.id, table, getRowTitleFn),\n                                            overTitle: getRowTitle(over.id, table, getRowTitleFn)\n                                        };\n\n                                        if (hasNestedRowDrag) {\n                                            if (dropPos === DropPosition.Before) {\n                                                return translateRowDragAndDrop('onDragEndBefore', keys);\n                                            } else if (dropPos === DropPosition.After) {\n                                                return translateRowDragAndDrop('onDragEndAfter', keys);\n                                            }\n\n                                            return translateRowDragAndDrop('onDragEndInside', keys);\n                                        }\n\n                                        return translateRowDragAndDrop('onDragEndOver', keys);\n                                    }\n\n                                    return translateRowDragAndDrop('onDragEnd', {\n                                        title: getRowTitle(active.id, table, getRowTitleFn)\n                                    });\n                                },\n                                onDragCancel({active}) {\n                                    rowDropPositionRef.current = null;\n\n                                    return translateRowDragAndDrop('onDragCancel', {\n                                        title: getRowTitle(active.id, table, getRowTitleFn)\n                                    });\n                                }\n                            }\n                        }}\n                        collisionDetection={closestCenter}\n                        modifiers={hasNestedRowDrag ? undefined : [restrictToParentElement]}\n                        onDragCancel={onRowDragCancel}\n                        onDragEnd={onRowDragEnd}\n                        onDragMove={hasNestedRowDrag ? onRowDragMove : undefined}\n                        onDragOver={hasNestedRowDrag ? onRowDragOver : undefined}\n                        onDragStart={onRowDragStart}\n                        sensors={rowDragSensors}>\n                        <SortableContext items={rowIds} strategy={sortingStrategy ?? verticalListSortingStrategy}>\n                            {bodyRows}\n                        </SortableContext>\n                        {hasNestedRowDrag &&\n                            createPortal(\n                                <DragOverlay>\n                                    {draggedRowData && <DataTableRowDragOverlay draggedRowData={draggedRowData} />}\n                                </DragOverlay>,\n                                document.body\n                            )}\n                    </DndContext>\n                :   bodyRows}\n            </tbody>\n            {footerRows && <tfoot className=\"data-table__footer\">{footerRows}</tfoot>}\n        </table>\n    );\n\n    const renderBefore = () => {\n        const customContent = safeCall(props.renderBefore);\n        let pager: ReactNode, columnConfigurator: ReactNode;\n\n        if (showPagination) {\n            pager = (\n                <Pagination\n                    {...topPaginationProps}\n                    className=\"data-table__top-pagination\"\n                    isMinimized={true}\n                    onPageIndexChange={onPageIndexChange}\n                    onPageSizeChange={onPageSizeChange}\n                    pageIndex={pageIndex}\n                    pageSize={pageSize}\n                    pageSizes={pageSizes}\n                    totalRowCount={totalRowCount}\n                />\n            );\n        }\n\n        if (reorderableColumns) {\n            const {isMinimized, ...configuratorProps} = columnConfiguratorOptions ?? {};\n\n            columnConfigurator = (\n                <ColumnConfigurator\n                    columnOrder={columnOrder}\n                    columnVisibility={columnVisibility}\n                    columns={columnConfiguratorColumns}\n                    onColumnOrderChange={(colOrder) => {\n                        table.setColumnOrder(() => colOrder);\n                    }}\n                    onColumnVisibilityChange={(colVisibility) => {\n                        table.setColumnVisibility(() => colVisibility);\n                    }}\n                    {...configuratorProps}>\n                    {isMinimized ?\n                        <IconButton\n                            aria-label={translateCommon('customizeColumns')}\n                            iconName={iconNames.ViewKanban}\n                            style={ButtonStyle.Outline}\n                            variant={ButtonVariant.Neutral}\n                        />\n                    :   <Button size={Size.md} style={ButtonStyle.Outline} variant={ButtonVariant.Neutral}>\n                            {translateCommon('customizeColumns')}\n                        </Button>\n                    }\n                </ColumnConfigurator>\n            );\n        }\n\n        if (pager || columnConfigurator || customContent) {\n            return (\n                <div className=\"data-table-before\">\n                    {customContent}\n                    <div className=\"data-table-before__right\">\n                        {pager}\n                        {columnConfigurator}\n                    </div>\n                </div>\n            );\n        }\n\n        return null;\n    };\n\n    return (\n        <div className={classNames('data-table-wrapper', wrapperClassName)} ref={ref}>\n            <div className=\"data-table-a11y-container\" ref={a11yContainerRef} />\n            {renderBefore()}\n            <div className=\"data-table-sticky-container\" ref={stickyContainerRef}>\n                {renderTable()}\n            </div>\n            <div\n                className=\"data-table-scrollable-container\"\n                onScroll={syncScroll}\n                ref={scrollableContainerRef}\n                tabIndex={-1}>\n                {renderTable(hasDraggableRows)}\n            </div>\n            {showPagination && (\n                <Pagination\n                    {...bottomPaginationProps}\n                    className=\"data-table__bottom-pagination\"\n                    onPageIndexChange={onPageIndexChange}\n                    onPageSizeChange={onPageSizeChange}\n                    pageIndex={pageIndex}\n                    pageSize={pageSize}\n                    pageSizes={pageSizes}\n                    totalRowCount={totalRowCount}\n                />\n            )}\n        </div>\n    );\n}\n\nexport type {\n    SortingState as DataTableSortingState,\n    RowSelectionState as DataTableRowSelectionState,\n    PaginationState as DataTablePaginationState,\n    ColumnOrderState as DataTableColumnOrderState,\n    VisibilityState as DataTableColumnVisibilityState,\n    ColumnPinningState as DataTableColumnPinningState,\n    ExpandedState as DataTableExpandedState,\n    GroupingState as DataTableGroupingState,\n    CellContext as DataTableCellContext\n};\n\nexport {createColumnHelper as createDataTableColumnHelper};\n"]}