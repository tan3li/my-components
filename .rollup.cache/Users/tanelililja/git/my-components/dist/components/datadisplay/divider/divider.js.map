{"version":3,"file":"divider.js","sourceRoot":"","sources":["../../../../src/components/datadisplay/divider/divider.tsx"],"names":[],"mappings":";;AAAA,OAAO,EAAC,IAAI,EAAC,MAAM,4BAA4B,CAAC;AAChD,OAAO,EAAC,UAAU,EAAC,MAAM,8BAA8B,CAAC;AACxD,OAAO,EAAC,KAAK,EAAC,MAAM,2BAA2B,CAAC;AAChD,OAAO,EAAC,QAAQ,EAAC,MAAM,gCAAgC,CAAC;AACxD,OAAO,EAAC,WAAW,EAAC,MAAM,mCAAmC,CAAC;AAC9D,OAAO,EAAC,SAAS,EAAC,MAAM,uBAAuB,CAAC;AAChD,OAAO,EAAC,SAAS,EAAC,MAAM,iCAAiC,CAAC;AAC1D,OAAO,EAAC,eAAe,EAAC,MAAM,uCAAuC,CAAC;AA8BtE,MAAM,UAAU,OAAO,CAAC,EAQT;QAPX,iBAA4B,EAA5B,SAAS,mBAAG,SAAS,CAAC,MAAM,KAAA,EAC5B,SAAS,eAAA,EACT,mBAAoC,EAApC,WAAW,mBAAG,WAAW,CAAC,UAAU,KAAA,EACpC,GAAG,SAAA,EACH,IAAI,UAAA,EACJ,KAAK,WAAA,EACL,IAAI,UAAA;IAEJ,IAAM,YAAY,GAAG,UAAU,CAC3B,2BAAoB,IAAI,uBAAa,WAAW,6BAAmB,SAAS,CAAE,EAC9E,SAAS,CACZ,CAAC;IAEF,IAAI,CAAC,IAAI,EAAE;QACP,OAAO,CACH,KAAC,SAAS,IACN,SAAS,EAAE,YAAY,EACvB,WAAW,EAAE,eAAe,CAAC,GAAG,EAChC,WAAW,EAAE,WAAW,EACxB,KAAK,EAAE,KAAK,GACd,CACL,CAAC;KACL;IAED,OAAO,CACH,2CAAuB,WAAW,EAAE,SAAS,EAAE,YAAY,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,QAAQ,CAAC,SAAS,EAAE,KAAK,EAAE,KAAK,gBACzG,KAAC,KAAK,aAAC,SAAS,EAAC,gBAAgB,EAAC,IAAI,EAAE,IAAI,CAAC,EAAE,gBAC1C,IAAI,IACD,IACN,CACT,CAAC;AACN,CAAC","sourcesContent":["import {Size} from '../../../constants/size.js';\nimport {classNames} from '../../../utils/classnames.js';\nimport {Label} from '../../text/label/label.js';\nimport {AriaRole} from '../../../constants/ariarole.js';\nimport {Orientation} from '../../../constants/orientation.js';\nimport {Separator} from 'react-aria-components';\nimport {Alignment} from '../../../constants/alignment.js';\nimport {HTMLElementType} from '../../../constants/htmlelementtype.js';\nimport {CSSProperties, RefAttributes} from 'react';\n\nexport interface DividerProps extends RefAttributes<HTMLDivElement> {\n    /**\n     * Alignment of the Divider text label\n     */\n    alignment?: Alignment;\n    /**\n     * Additional class names to be applied to the Divider\n     */\n    className?: string;\n    /**\n     * Orientation of the Divider\n     */\n    orientation?: Orientation;\n    /**\n     * Size of the Divider\n     */\n    size: Size.sm | Size.md | Size.lg;\n    /**\n     * CSS styles for the element.\n     */\n    style?: CSSProperties;\n    /**\n     * Text to be displayed in the Divider. If not given, displays only divider line.\n     */\n    text?: string;\n}\n\nexport function Divider({\n    alignment = Alignment.center,\n    className,\n    orientation = Orientation.horizontal,\n    ref,\n    size,\n    style,\n    text\n}: DividerProps) {\n    const cssClassName = classNames(\n        `divider divider--${size} divider--${orientation} divider--align-${alignment}`,\n        className\n    );\n\n    if (!text) {\n        return (\n            <Separator\n                className={cssClassName}\n                elementType={HTMLElementType.Div}\n                orientation={orientation}\n                style={style}\n            />\n        );\n    }\n\n    return (\n        <div aria-orientation={orientation} className={cssClassName} ref={ref} role={AriaRole.separator} style={style}>\n            <Label className=\"divider__label\" size={Size.sm}>\n                {text}\n            </Label>\n        </div>\n    );\n}\n"]}