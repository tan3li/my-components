{"version":3,"file":"datacard.js","sourceRoot":"","sources":["../../../../src/components/datadisplay/datacard/datacard.tsx"],"names":[],"mappings":"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","sourcesContent":["import {HTMLElementType, Size} from '../../../constants/index.js';\nimport {classNames} from '../../../utils/classnames.js';\nimport {Label, Title, TitleProps} from '../../text/index.js';\nimport {CSSProperties, ReactNode, RefAttributes} from 'react';\nimport {Icon, IconName, iconNames, IconSize} from '../../media/index.js';\nimport {Badge, BadgeProps} from '../../feedback/index.js';\nimport {Button as ActionButton, ButtonStyle, ButtonVariant, TriggerElement} from '../../action/index.js';\nimport {FocusRing} from 'react-aria';\nimport {useTranslateCommon} from '../../../hooks/translations/usetranslatecommon.js';\nimport {DataCardAction, DataCardActionElement, DataCardAlert, DataCardAlertLevel, DataCardStyle} from './types.js';\nimport {SkeletonDataCard} from '../../feedback/skeleton/skeletondatacard.js';\n\nexport interface DataCardProps extends RefAttributes<HTMLDivElement> {\n    /**\n     * CTA for the element. Action element can be the whole card (Self) or Button.\n     * Note: Self-option is applied only when Card-style is used.\n     */\n    action?: DataCardAction;\n    /**\n     * Options for alert icon to show after value.\n     */\n    alert?: DataCardAlert;\n    /**\n     * Props for Badge element displayed in the header area.\n     */\n    badgeProps?: BadgeProps;\n    /**\n     * CSS class name for the element.\n     */\n    className?: string;\n    /**\n     * Description text for the value.\n     */\n    description: string;\n    /**\n     * Header icon name.\n     */\n    headerIconName?: IconName;\n    /**\n     * Header text.\n     */\n    headerText?: string;\n    /**\n     * Whether element is disabled. Given actions will be disabled if set.\n     */\n    isDisabled?: boolean;\n    /**\n     * Whether to show skeleton instead of an actual element.\n     */\n    isSkeleton?: boolean;\n    /**\n     * Minimum width for the card.\n     */\n    minWidth?: CSSProperties['minWidth'];\n    /**\n     * Size of the element.\n     */\n    size: Size.sm | Size.md | Size.lg;\n    /**\n     * Display style of the element.\n     */\n    style: DataCardStyle;\n    /**\n     * Main display value.\n     */\n    value: string | number;\n    /**\n     * Slot to provide data visualization.\n     */\n    visualization?: ReactNode;\n}\n\nconst valueSize: Record<DataCardProps['size'], TitleProps['size']> = {\n    [Size.sm]: Size.xs,\n    [Size.md]: Size.sm,\n    [Size.lg]: Size.md\n};\n\nconst headerIconSize: Record<DataCardProps['size'], IconSize> = {\n    [Size.sm]: IconSize.XS,\n    [Size.md]: IconSize.SM,\n    [Size.lg]: IconSize.MD\n};\n\nexport function DataCard({\n    action,\n    alert,\n    badgeProps,\n    className,\n    description,\n    headerIconName,\n    headerText,\n    isDisabled,\n    isSkeleton,\n    minWidth,\n    ref,\n    size,\n    style,\n    value,\n    visualization\n}: DataCardProps) {\n    const translateCommon = useTranslateCommon();\n\n    if (isSkeleton) {\n        return (\n            <SkeletonDataCard\n                hasHeaderIcon={!!headerIconName}\n                hasHeaderText={!!headerText}\n                hasVisualization={!!visualization}\n                minWidth={minWidth}\n                size={size}\n                style={style}\n            />\n        );\n    }\n\n    const showHeader = !!headerText || !!badgeProps;\n    const alertLevel = alert?.level;\n    const content = (\n        <>\n            {showHeader && (\n                <div className=\"data-card__header\">\n                    {headerText && (\n                        <div className=\"data-card__header-left\">\n                            {headerIconName && (\n                                <Icon\n                                    className=\"data-card__header-icon\"\n                                    name={headerIconName}\n                                    size={headerIconSize[size]}\n                                />\n                            )}\n                            <Label className=\"data-card__header-text\" size={Size.md}>\n                                {headerText}\n                            </Label>\n                        </div>\n                    )}\n                    {badgeProps && (\n                        <Badge\n                            className=\"data-card__badge\"\n                            isDisabled={isDisabled && style === DataCardStyle.Card}\n                            {...badgeProps}\n                        />\n                    )}\n                </div>\n            )}\n            <div className=\"data-card__body\">\n                <div className=\"data-card__value-wrapper\">\n                    <Title className=\"data-card__value\" key=\"value\" size={valueSize[size]}>\n                        <strong>{value}</strong>\n                    </Title>\n                    {alert && alertLevel && (\n                        <Icon\n                            ariaLabel={alert.ariaLabel ?? translateCommon(alertLevel)}\n                            className={`data-card__alert-icon--${alertLevel}`}\n                            name={\n                                alertLevel === DataCardAlertLevel.Danger ?\n                                    iconNames.EmergencyHomeFilled\n                                :   iconNames.MinusCircleFilled\n                            }\n                            size={IconSize.SM}\n                        />\n                    )}\n                </div>\n                <Label className=\"data-card__description\" size={Size.md}>\n                    {description}\n                </Label>\n            </div>\n            {action && action.element === DataCardActionElement.Button && (\n                <ActionButton\n                    isDisabled={isDisabled}\n                    size={Size.sm}\n                    style={ButtonStyle.Fill}\n                    variant={ButtonVariant.Neutral}>\n                    {action.text}\n                </ActionButton>\n            )}\n            {visualization && <div className=\"data-card__visualization\">{visualization}</div>}\n        </>\n    );\n    const cssClassName = classNames(`data-card data-card--${style} data-card--${size}`, className, {\n        'data-card--disabled': isDisabled\n    });\n\n    // Self-action is only allowed for Card variation.\n    if (style === DataCardStyle.Card && action && action.element === DataCardActionElement.Self && !isDisabled) {\n        return (\n            <FocusRing focusRingClass=\"data-card--focused\">\n                <TriggerElement\n                    className={cssClassName}\n                    elementType={HTMLElementType.Div}\n                    onPress={action.onPress}\n                    ref={ref}>\n                    {content}\n                </TriggerElement>\n            </FocusRing>\n        );\n    }\n\n    return (\n        <div className={cssClassName} ref={ref} style={{minWidth}}>\n            {content}\n        </div>\n    );\n}\n"]}