{"version":3,"file":"list.js","sourceRoot":"","sources":["../../../../src/components/datadisplay/list/list.tsx"],"names":[],"mappings":";;AAAA,OAAO,EAAC,QAAQ,EAAE,YAAY,EAAE,cAAc,EAAyC,MAAM,OAAO,CAAC;AACrG,OAAO,EAAC,UAAU,EAAC,MAAM,8BAA8B,CAAC;AACxD,OAAO,EAAC,QAAQ,EAAiB,aAAa,EAAC,MAAM,eAAe,CAAC;AACrE,OAAO,EAAC,UAAU,EAAC,MAAM,kBAAkB,CAAC;AAC5C,OAAO,EAAC,UAAU,EAAC,MAAM,kCAAkC,CAAC;AAqC5D,MAAM,UAAU,IAAI,CAAuB,EASxB;QARf,QAAQ,cAAA,EACR,SAAS,eAAA,EACT,IAAI,UAAA,EACJ,UAAU,gBAAA,EACV,GAAG,SAAA,EACH,uBAAuB,6BAAA,EACvB,OAAO,aAAA,EACP,aAA0B,EAA1B,KAAK,mBAAG,aAAa,CAAC,IAAI,KAAA;IAE1B,IAAM,cAAc,GAAG,KAAK,KAAK,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC;IAC9F,IAAM,mBAAmB,GAA2B;QAChD,mBAAmB,EAAE,uBAAuB;QAC5C,KAAK,OAAA;KACR,CAAC;IACF,IAAI,SAAoB,CAAC;IAEzB,IAAI,UAAU,CAAC,QAAQ,CAAC,EAAE;QACtB,IAAI,CAAC,IAAI,EAAE;YACP,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;SACnE;QACD,IAAI,CAAC,UAAU,EAAE;YACb,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;SACzE;QAED,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,UAAC,IAAI;YACtB,IAAM,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;YAC/B,IAAM,GAAG,GAAG,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAEzE,IAAI,cAAc,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,IAAI,KAAK,QAAQ,EAAE;gBACtD,OAAO,YAAY,CAAC,OAAsC,aAAG,GAAG,KAAA,IAAK,mBAAmB,EAAE,CAAC;aAC9F;YAED,OAAO,CACH,KAAC,QAAQ,eAAe,mBAAmB,cACtC,OAAO,KADG,GAAG,CAEP,CACd,CAAC;QACN,CAAC,CAAC,CAAC;KACN;SAAM;QACH,IAAM,WAAW,GAAG,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAE/C,SAAS,GAAG,WAAW,CAAC,GAAG,CAAC,UAAC,KAAK;YAC9B,OAAA,YAAY,CAAC,KAAoC,eAAM,mBAAmB,EAAE;QAA5E,CAA4E,CAC/E,CAAC;KACL;IAED,OAAO,CACH,sBAAI,SAAS,EAAE,UAAU,CAAC,MAAM,EAAE,SAAS,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,EAAC,GAAG,EAAE,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,cAAc,EAAC,gBAC1F,SAAS,IACT,CACR,CAAC;AACN,CAAC","sourcesContent":["import {Children, cloneElement, isValidElement, ReactElement, ReactNode, RefAttributes} from 'react';\nimport {classNames} from '../../../utils/classnames.js';\nimport {ListItem, ListItemProps, ListItemStyle} from './listitem.js';\nimport {coreTokens} from '@tan3li/d-tokens';\nimport {isFunction} from '../../../utils/functionhelper.js';\n\nexport interface ListProps<TData extends object> extends RefAttributes<HTMLUListElement> {\n    /**\n     * The contents of the list.\n     * For static lists, use ListItem component.\n     * For dynamic lists, provide render function which renders item content or ListItem for each data item.\n     */\n    children: ReactNode | ((item: TData) => ReactNode);\n    /**\n     * CSS class name for the element.\n     */\n    className?: string;\n    /**\n     * Data for dynamic list.\n     */\n    data?: TData[];\n    /**\n     * Accessor to get unique identifier for dynamic list item.\n     * Can be either item id property name or method which returns id value for item.\n     */\n    idAccessor?: string | ((item: TData) => string | number);\n    /**\n     * Whether to separate list item body and footer with separator.\n     */\n    showItemFooterSeparator?: boolean;\n    /**\n     * Spacing between rows. Should be provided using design tokens.\n     * Defaults to 0 with Plain-style and space-sm with other styles.\n     */\n    spacing?: string;\n    /**\n     * Display style for the list items.\n     */\n    style?: ListItemStyle;\n}\n\nexport function List<TData extends object>({\n    children,\n    className,\n    data,\n    idAccessor,\n    ref,\n    showItemFooterSeparator,\n    spacing,\n    style = ListItemStyle.Card\n}: ListProps<TData>) {\n    const defaultSpacing = style === ListItemStyle.Plain ? 0 : coreTokens.dimension.spaceSm.value;\n    const commonListItemProps: Partial<ListItemProps> = {\n        showFooterSeparator: showItemFooterSeparator,\n        style\n    };\n    let listItems: ReactNode;\n\n    if (isFunction(children)) {\n        if (!data) {\n            throw new Error('Must provide data prop for dynamic children.');\n        }\n        if (!idAccessor) {\n            throw new Error('Must provide idAccessor prop for dynamic children.');\n        }\n\n        listItems = data.map((item) => {\n            const element = children(item);\n            const key = isFunction(idAccessor) ? idAccessor(item) : item[idAccessor];\n\n            if (isValidElement(element) && element.type === ListItem) {\n                return cloneElement(element as ReactElement<ListItemProps>, {key, ...commonListItemProps});\n            }\n\n            return (\n                <ListItem key={key} {...commonListItemProps}>\n                    {element}\n                </ListItem>\n            );\n        });\n    } else {\n        const childrenArr = Children.toArray(children);\n\n        listItems = childrenArr.map((child) =>\n            cloneElement(child as ReactElement<ListItemProps>, {...commonListItemProps})\n        );\n    }\n\n    return (\n        <ul className={classNames('list', className)} ref={ref} style={{gap: spacing ?? defaultSpacing}}>\n            {listItems}\n        </ul>\n    );\n}\n"]}