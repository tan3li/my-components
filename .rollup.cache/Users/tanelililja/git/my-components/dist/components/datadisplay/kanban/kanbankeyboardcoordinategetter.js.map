{"version":3,"file":"kanbankeyboardcoordinategetter.js","sourceRoot":"","sources":["../../../../src/components/datadisplay/kanban/kanbankeyboardcoordinategetter.tsx"],"names":[],"mappings":"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","sourcesContent":["import {closestCorners, DroppableContainer, getFirstCollision, KeyboardCoordinateGetter} from '@dnd-kit/core';\nimport {KanbanElementType} from './types.js';\nimport {KeyboardEventKey} from '../../../constants/index.js';\nimport {arrayMove} from '@dnd-kit/sortable';\n\nconst COLUMN_OVERLAY_X_OFFSET = 12;\nconst COLUMN_OVERLAY_Y_OFFSET = 40;\n\nconst CARD_OVERLAY_X_OFFSET = 8;\nconst CARD_OVERLAY_Y_OFFSET = 8;\n\nconst eventKeys: string[] = [\n    KeyboardEventKey.ArrowDown,\n    KeyboardEventKey.ArrowUp,\n    KeyboardEventKey.ArrowLeft,\n    KeyboardEventKey.ArrowRight\n];\n\nconst enum Direction {\n    Left = -1,\n    Right = 1\n}\n\nconst kanbanCardKeyboardCoordinateGetter: KeyboardCoordinateGetter = (event, args) => {\n    const {context} = args;\n    const {active, collisionRect, droppableContainers, droppableRects} = context;\n\n    if (!active?.data.current || !collisionRect) {\n        return;\n    }\n\n    const filteredContainers: DroppableContainer[] = [];\n\n    droppableContainers.getEnabled().forEach((entry) => {\n        if (!entry || entry?.disabled) {\n            return;\n        }\n\n        const rect = droppableRects.get(entry.id);\n\n        if (!rect) {\n            return;\n        }\n\n        const data = entry.data.current;\n\n        if (data && data.type !== KanbanElementType.ColumnBody) {\n            return;\n        }\n\n        switch (event.key) {\n            case KeyboardEventKey.ArrowDown:\n                if (collisionRect.top < rect.top) {\n                    filteredContainers.push(entry);\n                }\n                break;\n            case KeyboardEventKey.ArrowUp:\n                if (collisionRect.top > rect.top + CARD_OVERLAY_Y_OFFSET) {\n                    filteredContainers.push(entry);\n                }\n                break;\n            case KeyboardEventKey.ArrowLeft:\n                if (collisionRect.left >= rect.left + rect.width) {\n                    filteredContainers.push(entry);\n                }\n                break;\n            case KeyboardEventKey.ArrowRight:\n                if (collisionRect.left + collisionRect.width <= rect.left) {\n                    filteredContainers.push(entry);\n                }\n                break;\n            default:\n                break;\n        }\n    });\n\n    const collisions = closestCorners({\n        active,\n        collisionRect,\n        droppableRects,\n        droppableContainers: filteredContainers,\n        pointerCoordinates: null\n    });\n    const closestId = getFirstCollision(collisions, 'id');\n\n    if (closestId !== null) {\n        const newDroppable = droppableContainers.get(closestId);\n        const newNode = newDroppable?.node.current;\n        const newRect = newDroppable?.rect.current;\n\n        if (newNode && newRect) {\n            if (newDroppable.data.current?.columnId === active.data.current?.columnId) {\n                // Moving back to initial position...\n                const initialRect = active.rect.current.initial;\n\n                if (initialRect) {\n                    return {\n                        x: newRect.left + CARD_OVERLAY_X_OFFSET,\n                        y: initialRect.top\n                    };\n                }\n            }\n\n            return {\n                x: newRect.left + CARD_OVERLAY_X_OFFSET,\n                y: newRect.top + CARD_OVERLAY_Y_OFFSET\n            };\n        }\n    }\n};\n\nconst kanbanColumnKeyboardCoordinateGetter: KeyboardCoordinateGetter = (event, args) => {\n    const {context} = args;\n    const {active, over, droppableContainers, collisionRect} = context;\n\n    if (!collisionRect || !active?.data.current) {\n        return;\n    }\n\n    const activeId = active.id as string;\n    const overId = (over?.id ?? activeId) as string;\n    const items = active.data.current.sortable.items as string[];\n    const overIdx = items.indexOf(overId);\n    const activeIdx = items.indexOf(activeId);\n    let nextIdx = overIdx,\n        direction = Direction.Right,\n        nextId: string | undefined;\n\n    switch (event.key) {\n        case KeyboardEventKey.ArrowRight:\n            nextIdx = Math.min(overIdx + 1, items.length - 1);\n            break;\n        case KeyboardEventKey.ArrowLeft:\n            nextIdx = Math.max(0, overIdx - 1);\n            direction = Direction.Left;\n            break;\n        default:\n            break;\n    }\n\n    if (overIdx !== nextIdx) {\n        nextId = items[nextIdx];\n    }\n\n    if (nextId) {\n        const activeNode = droppableContainers.get(activeId)?.node.current;\n        const sortedItems = arrayMove(items, activeIdx, overIdx);\n        const currentNodeIdAtNextIndex = sortedItems[nextIdx];\n        const newNode = droppableContainers.get(currentNodeIdAtNextIndex)?.node.current;\n\n        if (newNode && activeNode) {\n            const activeRect = activeNode.getBoundingClientRect();\n            const newRect = newNode.getBoundingClientRect();\n            const gapBetweenColumns =\n                direction === Direction.Right ? newRect.left - activeRect.right : activeRect.left - newRect.right;\n\n            return {\n                x: activeRect.left + direction * (newRect.width + gapBetweenColumns) + COLUMN_OVERLAY_X_OFFSET,\n                y: activeRect.top + COLUMN_OVERLAY_Y_OFFSET\n            };\n        }\n    }\n};\n\nexport const kanbanKeyboardCoordinateGetter: KeyboardCoordinateGetter = (event, args) => {\n    event.preventDefault();\n\n    const eventKey = event.key;\n    const {active} = args.context;\n\n    if (!eventKeys.includes(eventKey) || !active) {\n        return;\n    }\n\n    const activeElementType = active.data.current?.type;\n\n    if (activeElementType === KanbanElementType.Column) {\n        return kanbanColumnKeyboardCoordinateGetter(event, args);\n    } else if (activeElementType === KanbanElementType.Card) {\n        return kanbanCardKeyboardCoordinateGetter(event, args);\n    }\n};\n"]}