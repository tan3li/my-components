{"version":3,"file":"datatablecheckboxcell.js","sourceRoot":"","sources":["../../../../src/components/datadisplay/datatable/datatablecheckboxcell.tsx"],"names":[],"mappings":";;AACA,OAAO,EAAC,QAAQ,EAAsB,MAAM,uBAAuB,CAAC;AACpE,OAAO,EAAC,kBAAkB,EAAC,MAAM,mDAAmD,CAAC;AAGrF,OAAO,EAAC,iBAAiB,EAAC,MAAM,wBAAwB,CAAC;AAQzD,MAAM,UAAU,qBAAqB,CAAqC,EAI3B;;IAH3C,IAAA,GAAG,SAAA,EACH,KAAK,WAAA,EACF,KAAK,cAH8D,gBAIzE,CADW;IAER,IAAM,eAAe,GAAG,kBAAkB,EAAE,CAAC;IAC7C,IAAM,4BAA4B,GAAG,MAAA,KAAK,CAAC,OAAO,CAAC,IAAI,0CAAE,4BAA4B,CAAC;IAEtF,OAAO,CACH,KAAC,QAAQ,eACD,KAAK,kBACG,MAAA,KAAK,CAAC,YAAY,CAAC,mCAAI,eAAe,CAAC,WAAW,CAAC,EAC/D,UAAU,EAAE,CAAC,GAAG,CAAC,YAAY,EAAE,EAC/B,eAAe,EAAE,4BAA4B,CAAC,CAAC,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC,SAAS,EACnF,UAAU,EAAE,GAAG,CAAC,aAAa,EAAE,EAC/B,QAAQ,EAAE,UAAC,UAAU,IAAK,OAAA,iBAAiB,CAAC,UAAU,EAAE,GAAG,EAAE,KAAK,CAAC,EAAzC,CAAyC,IACrE,CACL,CAAC;AACN,CAAC","sourcesContent":["import {CellContext} from '@tanstack/table-core';\nimport {Checkbox, CheckboxCommonProps} from '../../inputs/index.js';\nimport {useTranslateCommon} from '../../../hooks/translations/usetranslatecommon.js';\nimport {AnyObject} from '../../../hooks/usechangeparamscallback.js';\nimport {ReactNode} from 'react';\nimport {toggleSelectedRow} from './toggleselectedrow.js';\n\nexport interface DataTableCheckboxCellProps<TData, TValue, P extends AnyObject>\n    extends CellContext<TData, TValue>,\n        CheckboxCommonProps<P> {\n    label?: ReactNode;\n}\n\nexport function DataTableCheckboxCell<TData, TValue, P extends AnyObject>({\n    row,\n    table,\n    ...props\n}: DataTableCheckboxCellProps<TData, TValue, P>) {\n    const translateCommon = useTranslateCommon();\n    const enableParentRowSelectionSync = table.options.meta?.enableParentRowSelectionSync;\n\n    return (\n        <Checkbox\n            {...props}\n            aria-label={props['aria-label'] ?? translateCommon('selectRow')}\n            isDisabled={!row.getCanSelect()}\n            isIndeterminate={enableParentRowSelectionSync ? row.getIsSomeSelected() : undefined}\n            isSelected={row.getIsSelected()}\n            onChange={(isSelected) => toggleSelectedRow(isSelected, row, table)}\n        />\n    );\n}\n"]}