{"version":3,"file":"kanban.js","sourceRoot":"","sources":["../../../../src/components/datadisplay/kanban/kanban.tsx"],"names":[],"mappings":"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","sourcesContent":["import {CSSProperties, ReactNode, RefAttributes, useEffect, useMemo, useRef, useState} from 'react';\nimport {\n    closestCorners,\n    DndContext,\n    DragEndEvent,\n    DragOverlay,\n    DragStartEvent,\n    KeyboardSensor,\n    MeasuringStrategy,\n    MouseSensor,\n    TouchSensor,\n    useSensor,\n    useSensors\n} from '@dnd-kit/core';\nimport {horizontalListSortingStrategy, SortableContext} from '@dnd-kit/sortable';\nimport {\n    KanbanCardData,\n    KanbanCardDragData,\n    KanbanColumnData,\n    KanbanColumnDragData,\n    KanbanColumnHeightMode,\n    KanbanElementType\n} from './types.js';\nimport {KanbanColumn, KanbanColumnProps} from './kanbancolumn.js';\nimport {createPortal} from 'react-dom';\nimport {classNames} from '../../../utils/classnames.js';\nimport {Button, ButtonStyle, ButtonVariant, IconButton, MenuItem} from '../../action/index.js';\nimport {iconNames} from '../../media/index.js';\nimport {kanbanKeyboardCoordinateGetter} from './kanbankeyboardcoordinategetter.js';\nimport {useTranslateKanbanDragAndDrop} from '../../../hooks/translations/usetranslatekanbandraganddrop.js';\nimport {isFunction} from '../../../utils/functionhelper.js';\nimport {horizontalSortableListCollisionDetection} from './horizontalsortablelistcollisiondetection.js';\n\nexport interface KanbanProps<TCardData extends KanbanCardData, TMenuItem extends MenuItem>\n    extends RefAttributes<HTMLDivElement> {\n    /**\n     * Display \"Add card\" button in the footer of each column with given label and press callback.\n     */\n    addCardOptions?: KanbanColumnProps<TCardData, TMenuItem>['addCardOptions'];\n    /**\n     * Display \"Add column\" button after the columns with given label and press callback.\n     * If showIconOnly = true, will be displayed as icon button with given label as aria label.\n     */\n    addColumnOptions?: {\n        label: string;\n        onAdd?: () => void;\n        showIconOnly?: boolean;\n    };\n    /**\n     * Aria label for the element.\n     */\n    ['aria-label']?: string;\n    /**\n     * Accessor to get the name for card. Required for drag and drop a11y announcements.\n     * Can be either property name or method which returns the property name for given item.\n     */\n    cardNameAccessor: string | ((card: TCardData) => string);\n    /**\n     * CSS class name for the element.\n     */\n    className?: string;\n    /**\n     * Identifiers of collapsed columns.\n     */\n    collapsedColumnKeys?: Set<string>;\n    /**\n     * Determines how column height behaves.\n     * Full (default) = columns take full height of the board.\n     * Auto = columns take height of their content.\n     */\n    columnHeightMode?: KanbanColumnHeightMode;\n    /**\n     * Fixed width for columns. Should be between column min-width (240px) and max-width (550px).\n     * If not given, columns fill the available space within their min and max width.\n     */\n    columnWidth?: string | number;\n    /**\n     * Data for the kanban.\n     */\n    data: Array<KanbanColumnData<TCardData, TMenuItem>>;\n    /**\n     * Whether columns can be drag and dropped.\n     */\n    enableColumnReordering?: boolean;\n    /**\n     * Height of the kanban board.\n     */\n    height?: CSSProperties['height'];\n    /**\n     * Handler that is called when on card drag end.\n     */\n    onCardDragEnd?: (params: {\n        cardId: string;\n        oldColumnId: string;\n        oldColumnIndex: number;\n        newColumnId: string;\n        newColumnIndex: number;\n    }) => void;\n    /**\n     * Handler that is called when on column collapsed state changes.\n     */\n    onColumnCollapsedChange?: (collapsedKeys: Set<string>) => void;\n    /**\n     * Handler that is called when on column drag end.\n     */\n    onColumnDragEnd?: (params: {columnId: string; oldIndex: number; newIndex: number}) => void;\n    /**\n     * Handler that is called when column menu action is pressed.\n     */\n    onColumnMenuAction?: KanbanColumnProps<TCardData, TMenuItem>['onMenuAction'];\n    /**\n     * Handler that is called when column menu selection changed.\n     */\n    onColumnMenuSelectionChange?: KanbanColumnProps<TCardData, TMenuItem>['onMenuSelectionChange'];\n    /**\n     * Handler that is called when show more button for column is pressed.\n     */\n    onShowMoreCards?: KanbanColumnProps<TCardData, TMenuItem>['onShowMoreCards'];\n    /**\n     * Renderer for content after columns.\n     */\n    renderAfterColumns: (props: {isDraggingColumn?: boolean}) => ReactNode;\n    /**\n     * Renderer for card.\n     */\n    renderCard: KanbanColumnProps<TCardData, TMenuItem>['renderCard'];\n}\n\nexport function Kanban<TCardData extends KanbanCardData, TMenuItem extends MenuItem>({\n    addCardOptions,\n    addColumnOptions,\n    'aria-label': ariaLabel,\n    cardNameAccessor,\n    className,\n    collapsedColumnKeys: propsCollapsedColumnKeys,\n    columnHeightMode = KanbanColumnHeightMode.Full,\n    columnWidth,\n    data,\n    enableColumnReordering,\n    height,\n    onCardDragEnd,\n    onColumnDragEnd,\n    onColumnCollapsedChange: propsOnColumnCollapsedChange,\n    onColumnMenuAction,\n    onColumnMenuSelectionChange,\n    onShowMoreCards,\n    ref,\n    renderAfterColumns,\n    renderCard\n}: KanbanProps<TCardData, TMenuItem>) {\n    const [collapsedColumnKeys, setCollapsedColumnKeys] = useState<Set<string>>(propsCollapsedColumnKeys ?? new Set());\n    const columnIds = useMemo(() => data.map((col) => col.id), [data]);\n    const [activeColumnDragData, setActiveColumnDragData] = useState<KanbanColumnDragData<TCardData, TMenuItem> | null>(\n        null\n    );\n    const [activeCardDragData, setActiveCardDragData] = useState<KanbanCardDragData<TCardData> | null>(null);\n    const translateKanbanDragAndDrop = useTranslateKanbanDragAndDrop();\n    const isFirstAnnouncementRef = useRef(true);\n\n    const sensors = useSensors(\n        useSensor(MouseSensor, {}),\n        useSensor(TouchSensor, {}),\n        useSensor(KeyboardSensor, {\n            coordinateGetter: kanbanKeyboardCoordinateGetter\n        })\n    );\n\n    const onDragStart = (event: DragStartEvent) => {\n        const eventData = event.active.data.current;\n\n        if (eventData?.type === KanbanElementType.Column) {\n            setActiveColumnDragData(eventData as KanbanColumnDragData<TCardData, TMenuItem>);\n        }\n        if (eventData?.type === KanbanElementType.Card) {\n            setActiveCardDragData(eventData as KanbanCardDragData<TCardData>);\n        }\n    };\n\n    const onDragEnd = (event: DragEndEvent) => {\n        const {active, over} = event;\n        const activeId = active.id as string;\n        const overId = over?.id as string;\n\n        if (activeColumnDragData) {\n            setActiveColumnDragData(null);\n\n            if (activeId && overId) {\n                onColumnDragEnd?.({\n                    columnId: activeId,\n                    oldIndex: columnIds.indexOf(activeId),\n                    newIndex: columnIds.indexOf(overId)\n                });\n            }\n        }\n        if (activeCardDragData) {\n            const columnId = activeCardDragData.columnId;\n            const {columnId: overColId, type: overElementType} = over?.data.current ?? {};\n\n            setActiveCardDragData(null);\n\n            if (overElementType === KanbanElementType.ColumnBody && activeId && overColId) {\n                onCardDragEnd?.({\n                    cardId: activeId,\n                    oldColumnId: columnId,\n                    oldColumnIndex: columnIds.indexOf(columnId),\n                    newColumnId: overColId,\n                    newColumnIndex: columnIds.indexOf(overColId)\n                });\n            }\n        }\n\n        isFirstAnnouncementRef.current = true;\n    };\n\n    const onDragCancel = () => {\n        setActiveCardDragData(null);\n        setActiveColumnDragData(null);\n        isFirstAnnouncementRef.current = true;\n    };\n\n    const onColumnCollapsedChange = ({id, isCollapsed}: {id: string; isCollapsed: boolean}) => {\n        const newCollapsedKeys = new Set(collapsedColumnKeys);\n\n        if (isCollapsed) {\n            newCollapsedKeys.add(id);\n        } else {\n            newCollapsedKeys.delete(id);\n        }\n\n        setCollapsedColumnKeys(newCollapsedKeys);\n        propsOnColumnCollapsedChange?.(newCollapsedKeys);\n    };\n\n    useEffect(() => {\n        if (propsCollapsedColumnKeys !== undefined) {\n            setCollapsedColumnKeys(propsCollapsedColumnKeys);\n        }\n    }, [propsCollapsedColumnKeys]);\n\n    return (\n        <DndContext\n            accessibility={{\n                screenReaderInstructions: {\n                    draggable: translateKanbanDragAndDrop('instructions')\n                },\n                announcements: {\n                    onDragStart({active}) {\n                        const type = active.data.current?.type;\n\n                        if (type === KanbanElementType.Column) {\n                            const column = active.data.current?.column as KanbanColumnData<TCardData, TMenuItem>;\n\n                            return translateKanbanDragAndDrop('onColumnDragStart', {\n                                title: column.title\n                            });\n                        }\n\n                        if (type === KanbanElementType.Card) {\n                            const card = active.data.current?.card as TCardData;\n\n                            return translateKanbanDragAndDrop('onCardDragStart', {\n                                title: card[isFunction(cardNameAccessor) ? cardNameAccessor(card) : cardNameAccessor]\n                            });\n                        }\n                    },\n                    onDragOver({active, over}) {\n                        // Workaround for dnd-kit skipping the start announcement: https://github.com/clauderic/dnd-kit/issues/424\n                        if (isFirstAnnouncementRef.current) {\n                            isFirstAnnouncementRef.current = false;\n\n                            return;\n                        }\n\n                        const type = active.data.current?.type;\n\n                        if (over && type === KanbanElementType.Column) {\n                            const activeColumn = active.data.current?.column as KanbanColumnData<TCardData, TMenuItem>;\n                            const overColumn = over.data.current?.column as KanbanColumnData<TCardData, TMenuItem>;\n\n                            return translateKanbanDragAndDrop('onColumnDragOver', {\n                                activeTitle: activeColumn.title,\n                                overTitle: overColumn.title\n                            });\n                        }\n\n                        if (over && over.data.current?.type === KanbanElementType.ColumnBody) {\n                            const activeCard = active.data.current?.card as TCardData;\n                            const overColumnBody = over.data.current?.column as KanbanColumnData<TCardData, TMenuItem>;\n\n                            return translateKanbanDragAndDrop('onCardDragOver', {\n                                activeTitle:\n                                    activeCard[\n                                        isFunction(cardNameAccessor) ? cardNameAccessor(activeCard) : cardNameAccessor\n                                    ],\n                                overTitle: overColumnBody.title\n                            });\n                        }\n                    },\n                    onDragEnd({active, over}) {\n                        const type = active.data.current?.type;\n\n                        if (over && type === KanbanElementType.Column) {\n                            const activeColumn = active.data.current?.column as KanbanColumnData<TCardData, TMenuItem>;\n                            const overColumn = over.data.current?.column as KanbanColumnData<TCardData, TMenuItem>;\n\n                            return translateKanbanDragAndDrop('onColumnDragEndOver', {\n                                activeTitle: activeColumn.title,\n                                overTitle: overColumn.title\n                            });\n                        }\n\n                        if (over && over.data.current?.type === KanbanElementType.ColumnBody) {\n                            const activeCard = active.data.current?.card as TCardData;\n                            const overColumnBody = over.data.current?.column as KanbanColumnData<TCardData, TMenuItem>;\n\n                            return translateKanbanDragAndDrop('onCardDragEndOver', {\n                                activeTitle:\n                                    activeCard[\n                                        isFunction(cardNameAccessor) ? cardNameAccessor(activeCard) : cardNameAccessor\n                                    ],\n                                overTitle: overColumnBody.title\n                            });\n                        }\n                    },\n                    onDragCancel({active}) {\n                        const type = active.data.current?.type;\n\n                        if (type === KanbanElementType.Column) {\n                            const column = active.data.current?.column as KanbanColumnData<TCardData, TMenuItem>;\n\n                            return translateKanbanDragAndDrop('onColumnDragCancel', {\n                                title: column.title\n                            });\n                        }\n\n                        if (type === KanbanElementType.Card) {\n                            const card = active.data.current?.card as TCardData;\n\n                            return translateKanbanDragAndDrop('onCardDragCancel', {\n                                title: card[isFunction(cardNameAccessor) ? cardNameAccessor(card) : cardNameAccessor]\n                            });\n                        }\n                    }\n                }\n            }}\n            collisionDetection={activeColumnDragData ? horizontalSortableListCollisionDetection : closestCorners}\n            measuring={{\n                droppable: {\n                    strategy: MeasuringStrategy.Always\n                }\n            }}\n            onDragCancel={onDragCancel}\n            onDragEnd={onDragEnd}\n            onDragStart={onDragStart}\n            sensors={sensors}>\n            <div\n                aria-label={ariaLabel}\n                className={classNames('kanban', className)}\n                ref={ref}\n                role=\"region\"\n                style={{\n                    alignItems: columnHeightMode === KanbanColumnHeightMode.Auto ? 'flex-start' : undefined,\n                    height\n                }}>\n                <SortableContext items={columnIds} strategy={horizontalListSortingStrategy}>\n                    {data.map((col) => (\n                        <KanbanColumn\n                            addCardOptions={addCardOptions}\n                            data={col}\n                            isCollapsed={collapsedColumnKeys.has(col.id)}\n                            isDraggable={enableColumnReordering}\n                            key={col.id}\n                            onCollapsedChange={onColumnCollapsedChange}\n                            onMenuAction={onColumnMenuAction}\n                            onMenuSelectionChange={onColumnMenuSelectionChange}\n                            onShowMoreCards={onShowMoreCards}\n                            renderCard={renderCard}\n                            width={columnWidth}\n                        />\n                    ))}\n                </SortableContext>\n                {renderAfterColumns?.({isDraggingColumn: !!activeColumnDragData})}\n                {addColumnOptions && (\n                    // Button will handle the press events and focus.\n                    // eslint-disable-next-line\n                    <li className=\"kanban__new-column\" onClick={addColumnOptions.onAdd}>\n                        {addColumnOptions.showIconOnly ?\n                            <IconButton\n                                aria-label={addColumnOptions.label}\n                                iconName={iconNames.Add}\n                                onPress={addColumnOptions.onAdd}\n                                style={ButtonStyle.Plain}\n                                variant={ButtonVariant.Neutral}\n                            />\n                        :   <Button\n                                onPress={addColumnOptions.onAdd}\n                                startIconName={iconNames.Add}\n                                style={ButtonStyle.Plain}\n                                variant={ButtonVariant.Neutral}>\n                                {addColumnOptions.label}\n                            </Button>\n                        }\n                    </li>\n                )}\n            </div>\n            {createPortal(\n                <DragOverlay>\n                    {activeColumnDragData && (\n                        <KanbanColumn\n                            addCardOptions={addCardOptions}\n                            data={activeColumnDragData.column}\n                            isCollapsed={collapsedColumnKeys?.has(activeColumnDragData.column.id)}\n                            isDraggable={true}\n                            isOverlay={true}\n                            renderCard={renderCard}\n                        />\n                    )}\n                    {activeCardDragData &&\n                        renderCard({\n                            columnId: activeCardDragData.columnId,\n                            data: activeCardDragData.card,\n                            isOverlay: true\n                        })}\n                </DragOverlay>,\n                document.body\n            )}\n        </DndContext>\n    );\n}\n"]}