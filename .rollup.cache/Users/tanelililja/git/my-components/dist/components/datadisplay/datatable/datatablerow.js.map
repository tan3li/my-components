{"version":3,"file":"datatablerow.js","sourceRoot":"","sources":["../../../../src/components/datadisplay/datatable/datatablerow.tsx"],"names":[],"mappings":"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","sourcesContent":["import {flexRender, Row, RowData, Table} from '@tanstack/react-table';\nimport {classNames} from '../../../utils/classnames.js';\nimport {DataTableCellContent} from './datatablecellcontent.js';\nimport {useSortable} from '@dnd-kit/sortable';\nimport {CSSProperties} from 'react';\nimport {CSS} from '@dnd-kit/utilities';\nimport {getColumnPinningStyles} from './getcolumnpinningstyles.js';\nimport {DataTableRowDragMode, DraggedRowData} from './types.js';\n\ninterface DataTableRowProps<TData> {\n    draggedRowData?: DraggedRowData | null;\n    isDraggable?: boolean;\n    row: Row<TData>;\n    rowDragMode?: DataTableRowDragMode;\n    table: Table<TData>;\n}\n\nfunction getRowDropCSSClass(rowId: string, draggedRowData?: DraggedRowData | null) {\n    if (!draggedRowData) {\n        return '';\n    }\n\n    const {active, over, dropPosition} = draggedRowData;\n    const activeId = active.id;\n    const overId = over?.id;\n\n    if (dropPosition && overId && activeId !== overId && overId === rowId) {\n        return `data-table__row--drop-${dropPosition}`;\n    }\n\n    return '';\n}\n\nexport function DataTableRow<TData extends RowData>({\n    draggedRowData,\n    isDraggable,\n    row,\n    rowDragMode = DataTableRowDragMode.Flat,\n    table\n}: DataTableRowProps<TData>) {\n    const rowId = row.id;\n    const {transform, transition, setNodeRef, isDragging} = useSortable({\n        id: rowId,\n        data: {\n            row\n        }\n    });\n    const tableMeta = table.options.meta;\n    const isSelected = row.getIsSelected();\n    const isDisabled = tableMeta?.isRowDisabled?.(row);\n    const rowProps = tableMeta?.getRowProps?.(row);\n    const isGhost = isDragging && rowDragMode === DataTableRowDragMode.Nested;\n    const rowDropCSSClass = getRowDropCSSClass(rowId, draggedRowData);\n    let style: CSSProperties | undefined;\n\n    if (isDraggable && rowDragMode === DataTableRowDragMode.Flat) {\n        style = {\n            transform: CSS.Translate.toString(transform),\n            transition,\n            zIndex: isDragging ? 1 : 0,\n            position: 'relative'\n        };\n    }\n\n    return (\n        <tr\n            {...rowProps}\n            aria-disabled={isDisabled}\n            aria-selected={isSelected}\n            className={classNames('data-table__row', rowDropCSSClass, rowProps?.className, {\n                'data-table__row--selected': isSelected,\n                'data-table__row--disabled': isDisabled,\n                'data-table__row--ghost': isGhost\n            })}\n            ref={setNodeRef}\n            style={{...rowProps?.style, ...style}}>\n            {row.getVisibleCells().map((cell) => {\n                const columnDef = cell.column.columnDef;\n                const context = cell.getContext();\n                const {\n                    colSpan,\n                    className: cellClassName,\n                    style: cellStyle,\n                    ...cellProps\n                } = columnDef.meta?.getCellProps?.(context) ?? {};\n\n                if (colSpan === 0) {\n                    return null;\n                }\n\n                return (\n                    <td\n                        className={classNames('data-table__cell', cellClassName)}\n                        colSpan={colSpan}\n                        key={cell.id}\n                        style={{...getColumnPinningStyles(cell.column), ...cellStyle}}\n                        {...cellProps}>\n                        <DataTableCellContent alignment={columnDef.meta?.alignment}>\n                            {flexRender(columnDef.cell, context)}\n                        </DataTableCellContent>\n                    </td>\n                );\n            })}\n        </tr>\n    );\n}\n"]}