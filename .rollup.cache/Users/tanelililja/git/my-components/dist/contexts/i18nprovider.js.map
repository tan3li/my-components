{"version":3,"file":"i18nprovider.js","sourceRoot":"","sources":["../../src/contexts/i18nprovider.tsx"],"names":[],"mappings":";;AAAA,OAAO,EAAC,aAAa,EAAa,UAAU,EAAE,OAAO,EAAC,MAAM,OAAO,CAAC;AACpE,OAAO,EAAC,gBAAgB,EAAC,MAAM,yBAAyB,CAAC;AACzD,OAAO,EAAC,YAAY,IAAI,qBAAqB,EAAC,MAAM,YAAY,CAAC;AA0BjE,MAAM,CAAC,IAAM,WAAW,GAAG,aAAa,CAAU;IAC9C,aAAa,EAAE,OAAO;IACtB,cAAc,EAAE,OAAO;IACvB,QAAQ,EAAE,gBAAgB,EAAE;CAC/B,CAAC,CAAC;AAkBH,MAAM,UAAU,UAAU;IACtB,OAAO,UAAU,CAAC,WAAW,CAAC,CAAC;AACnC,CAAC;AAED,MAAM,UAAU,YAAY,CAAC,EAAsE;QAArE,QAAQ,cAAA,EAAE,aAAa,mBAAA,EAAE,cAAc,oBAAA,EAAE,QAAQ,cAAA;IAC3E,IAAM,KAAK,GAAG,OAAO,CAAC,cAAM,OAAA,CAAC,EAAC,aAAa,eAAA,EAAE,cAAc,gBAAA,EAAE,QAAQ,UAAA,EAAC,CAAC,EAA3C,CAA2C,EAAE,CAAC,aAAa,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,CAAC;IAEpH,OAAO,CACH,KAAC,qBAAqB,aAAC,MAAM,EAAE,cAAc,gBACzC,KAAC,WAAW,aAAC,KAAK,EAAE,KAAK,gBAAG,QAAQ,IAAe,IAC/B,CAC3B,CAAC;AACN,CAAC","sourcesContent":["import {createContext, ReactNode, useContext, useMemo} from 'react';\nimport {getLocalTimeZone} from '@internationalized/date';\nimport {I18nProvider as ReactAriaI18nProvider} from 'react-aria';\n\nexport type LocaleCode =\n    | 'en-IE'\n    | 'en-GB'\n    | 'en-US'\n    | 'nb-NO'\n    | 'fi-FI'\n    | 'da-DK'\n    | 'nl-NL'\n    | 'de-DE'\n    | 'sv-SE'\n    | 'et-EE'\n    | 'fr-FR'\n    | 'it-IT'\n    | 'pl-PL'\n    | 'pt-PT'\n    | 'ru-RU'\n    | 'es-ES';\n\ninterface Locales {\n    cultureLocale: LocaleCode;\n    languageLocale: LocaleCode;\n    timeZone: string;\n}\n\nexport const I18nContext = createContext<Locales>({\n    cultureLocale: 'en-GB',\n    languageLocale: 'en-GB',\n    timeZone: getLocalTimeZone()\n});\n\ninterface I18nProviderProps {\n    children: ReactNode;\n    /**\n     * BCP47 code (en-GB, fi-FI...)\n     */\n    cultureLocale: LocaleCode;\n    /**\n     * BCP47 code (en-GB, fi-FI...)\n     */\n    languageLocale: LocaleCode;\n    /**\n     * IANA timezone (Europe/London, Europe/Helsinki...)\n     */\n    timeZone: string;\n}\n\nexport function useLocales() {\n    return useContext(I18nContext);\n}\n\nexport function I18nProvider({children, cultureLocale, languageLocale, timeZone}: I18nProviderProps) {\n    const value = useMemo(() => ({cultureLocale, languageLocale, timeZone}), [cultureLocale, languageLocale, timeZone]);\n\n    return (\n        <ReactAriaI18nProvider locale={languageLocale}>\n            <I18nContext value={value}>{children}</I18nContext>\n        </ReactAriaI18nProvider>\n    );\n}\n"]}