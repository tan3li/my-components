{"version":3,"file":"useautoheightanimation.js","sourceRoot":"","sources":["../../src/hooks/useautoheightanimation.ts"],"names":[],"mappings":"AAAA,OAAO,EAAoC,SAAS,EAAE,MAAM,EAAC,MAAM,OAAO,CAAC;AAE3E,MAAM,UAAU,sBAAsB,CAAC,EAA4E;QAA3E,UAAU,gBAAA,EAAE,GAAG,SAAA;IACnD,IAAM,gBAAgB,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;IACtC,IAAM,WAAW,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;IAEvC,SAAS,CAAC;QACN,IAAM,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;QAE5B,IAAI,CAAC,OAAO,EAAE;YACV,OAAO;SACV;QAED,IAAM,aAAa,GAAG,gBAAgB,CAAC,OAAO,CAAC;QAE/C,0BAA0B;QAC1B,OAAO,CAAC,MAAM,GAAG,aAAa,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC;QACtE,OAAO,CAAC,KAAK,CAAC,QAAQ,GAAG,aAAa,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ,CAAC;QAC9D,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,aAAa,IAAI,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,UAAG,OAAO,CAAC,YAAY,OAAI,CAAC;QAE1F,gBAAgB,CAAC,OAAO,GAAG,KAAK,CAAC;QAEjC,IAAI,UAAU,EAAE;YACZ,WAAW,CAAC,OAAO,GAAG,IAAI,CAAC;SAC9B;aAAM;YACH,oEAAoE;YACpE,OAAO,CAAC,YAAY,CAAC,CAAC,yBAAyB;YAC/C,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC;SAChC;IACL,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;IAEjB,IAAM,eAAe,GAAwC,UAAC,KAAK;QAC/D,IAAM,MAAM,GAAG,KAAK,CAAC,MAAqB,CAAC;QAE3C,IAAI,UAAU,EAAE;YACZ,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;SAChC;aAAM;YACH,0BAA0B;YAC1B,MAAM,CAAC,MAAM,GAAG,aAAa,CAAC;SACjC;QAED,MAAM,CAAC,KAAK,CAAC,QAAQ,GAAG,SAAS,CAAC;IACtC,CAAC,CAAC;IAEF,OAAO;QACH,QAAQ,EAAE,WAAW,CAAC,OAAO;QAC7B,KAAK,EAAE;YACH,eAAe,iBAAA;YACf,KAAK,EAAE;gBACH,UAAU,EAAE,sBAAsB;aACrC;SACJ;KACJ,CAAC;AACN,CAAC","sourcesContent":["import {RefObject, TransitionEventHandler, useEffect, useRef} from 'react';\n\nexport function useAutoHeightAnimation({isExpanded, ref}: {isExpanded: boolean; ref: RefObject<HTMLElement | null>}) {\n    const isFirstRenderRef = useRef(true);\n    const isLoadedRef = useRef(isExpanded);\n\n    useEffect(() => {\n        const element = ref.current;\n\n        if (!element) {\n            return;\n        }\n\n        const isFirstRender = isFirstRenderRef.current;\n\n        // @ts-expect-error TS2322\n        element.hidden = isFirstRender && !isExpanded ? 'until-found' : false;\n        element.style.overflow = isFirstRender ? 'visible' : 'hidden';\n        element.style.height = isFirstRender && isExpanded ? 'auto' : `${element.scrollHeight}px`;\n\n        isFirstRenderRef.current = false;\n\n        if (isExpanded) {\n            isLoadedRef.current = true;\n        } else {\n            // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n            element.offsetHeight; // force browser re-paint\n            element.style.height = '0px';\n        }\n    }, [isExpanded]);\n\n    const onTransitionEnd: TransitionEventHandler<HTMLElement> = (event) => {\n        const target = event.target as HTMLElement;\n\n        if (isExpanded) {\n            target.style.height = 'auto';\n        } else {\n            // @ts-expect-error TS2322\n            target.hidden = 'until-found';\n        }\n\n        target.style.overflow = 'visible';\n    };\n\n    return {\n        isLoaded: isLoadedRef.current,\n        props: {\n            onTransitionEnd,\n            style: {\n                transition: 'height 0.2s ease-out'\n            }\n        }\n    };\n}\n"]}