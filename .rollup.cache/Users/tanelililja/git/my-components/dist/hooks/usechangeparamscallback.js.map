{"version":3,"file":"usechangeparamscallback.js","sourceRoot":"","sources":["../../src/hooks/usechangeparamscallback.ts"],"names":[],"mappings":";AAAA,OAAO,EAAC,QAAQ,EAAC,MAAM,4BAA4B,CAAC;AAYpD,MAAM,UAAU,uBAAuB,CACnC,YAAgB,EAChB,QAAgD;IAEhD,iHAAiH;IACjH,OAAO,UAAC,YAAiB;QACrB,IAAM,KAAK,GAAG,CAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,MAAM,EAAC,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC;QAE9E,QAAQ,CAAC,QAAQ,EAAE,sBAAI,YAAY,KAAE,KAAK,OAAA,GAA0B,CAAC,CAAC;IAC1E,CAAC,CAAC;AACN,CAAC","sourcesContent":["import {safeCall} from '../utils/functionhelper.js';\n\nexport interface ValueArgs<T> {\n    value: T;\n}\n\nexport interface AnyObject {\n    [key: string]: any; // Must be any so type that lacks index signature, e.g. interface, can be assigned to AnyObject.\n}\n\nexport type ChangeArgs<P, TValue> = P & ValueArgs<TValue>;\n\nexport function useChangeParamsCallback<P extends AnyObject, TValue = unknown>(\n    changeParams?: P,\n    callback?: (args: ChangeArgs<P, TValue>) => void\n) {\n    // Can be used f.e. with onChange event when arg is value of element and also with onBlur event when arg is event\n    return (eventOrValue: any) => {\n        const value = eventOrValue?.target ? eventOrValue.target.value : eventOrValue;\n\n        safeCall(callback, {...changeParams, value} as ChangeArgs<P, TValue>);\n    };\n}\n"]}