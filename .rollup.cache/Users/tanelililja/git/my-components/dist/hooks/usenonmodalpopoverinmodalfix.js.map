{"version":3,"file":"usenonmodalpopoverinmodalfix.js","sourceRoot":"","sources":["../../src/hooks/usenonmodalpopoverinmodalfix.ts"],"names":[],"mappings":"AAAA,OAAO,EAAY,SAAS,EAAC,MAAM,OAAO,CAAC;AAC3C,OAAO,EAAC,eAAe,EAAC,MAAM,sBAAsB,CAAC;AAErD,qEAAqE;AACrE,gFAAgF;AAChF,0EAA0E;AAC1E,MAAM,UAAU,4BAA4B,CACxC,MAAe,EACf,UAAyC,EACzC,UAAyC;IAEzC,SAAS,CAAC;QACN,IAAI,MAAM,IAAI,UAAU,CAAC,OAAO,IAAI,UAAU,CAAC,OAAO,EAAE;YACpD,OAAO,eAAe,CAAC,CAAC,UAAU,CAAC,OAAO,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;SACpE;IACL,CAAC,EAAE,CAAC,MAAM,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;AACzC,CAAC","sourcesContent":["import {RefObject, useEffect} from 'react';\nimport {ariaHideOutside} from '@react-aria/overlays';\n\n// This hook should be run when using Popover with isNonModal = true.\n// It is a workaround for accessibility issue when Popover is used inside Modal.\n// For more info, see: https://github.com/adobe/react-spectrum/issues/4213\nexport function useNonModalPopoverInModalFix(\n    isOpen: boolean,\n    triggerRef: RefObject<HTMLElement | null>,\n    popoverRef: RefObject<HTMLElement | null>\n) {\n    useEffect(() => {\n        if (isOpen && triggerRef.current && popoverRef.current) {\n            return ariaHideOutside([triggerRef.current, popoverRef.current]);\n        }\n    }, [isOpen, triggerRef, popoverRef]);\n}\n"]}