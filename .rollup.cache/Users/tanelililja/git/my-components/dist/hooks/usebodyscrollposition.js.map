{"version":3,"file":"usebodyscrollposition.js","sourceRoot":"","sources":["../../src/hooks/usebodyscrollposition.ts"],"names":[],"mappings":"AAAA,OAAO,EAAU,WAAW,EAAE,MAAM,EAAE,QAAQ,EAAC,MAAM,OAAO,CAAC;AAC7D,OAAO,EAAC,QAAQ,EAAC,MAAM,sBAAsB,CAAC;AAE9C,MAAM,CAAN,IAAkB,kBAIjB;AAJD,WAAkB,kBAAkB;IAChC,iCAAW,CAAA;IACX,uCAAiB,CAAA;IACjB,uCAAiB,CAAA;AACrB,CAAC,EAJiB,kBAAkB,KAAlB,kBAAkB,QAInC;AAED,MAAM,UAAU,qBAAqB;IAC3B,IAAA,KAA8C,QAAQ,CAA4B,IAAI,CAAC,EAAtF,kBAAkB,QAAA,EAAE,qBAAqB,QAA6C,CAAC;IAE9F,IAAM,8BAA8B,GAAG,WAAW,CAAC,UAAC,WAA2B;QACpE,IAAA,SAAS,GAAgC,WAAW,UAA3C,EAAE,YAAY,GAAkB,WAAW,aAA7B,EAAE,YAAY,GAAI,WAAW,aAAf,CAAgB;QAC5D,IAAI,QAAQ,GAA8B,IAAI,CAAC;QAE/C,IAAI,YAAY,GAAG,YAAY,EAAE;YAC7B,IAAI,SAAS,KAAK,CAAC,EAAE;gBACjB,QAAQ,GAAG,kBAAkB,CAAC,GAAG,CAAC;aACrC;iBAAM,IAAI,IAAI,CAAC,GAAG,CAAC,YAAY,GAAG,YAAY,GAAG,SAAS,CAAC,GAAG,CAAC,EAAE;gBAC9D,QAAQ,GAAG,kBAAkB,CAAC,MAAM,CAAC;aACxC;iBAAM;gBACH,QAAQ,GAAG,kBAAkB,CAAC,MAAM,CAAC;aACxC;SACJ;QAED,qBAAqB,CAAC,QAAQ,CAAC,CAAC;IACpC,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,IAAM,QAAQ,GAAG,WAAW,CACxB,QAAQ,CAAC,UAAC,CAA0B;QAChC,8BAA8B,CAAC,CAAC,CAAC,MAAwB,CAAC,CAAC;IAC/D,CAAC,EAAE,GAAG,CAAC,EACP,EAAE,CACL,CAAC;IAEF,IAAM,cAAc,GAAG,MAAM,CAAwB,IAAI,CAAC,CAAC;IAE3D,IAAM,SAAS,GAAG,WAAW,CAAC,UAAC,WAAkC;QAC7D,IAAI,WAAW,EAAE;YACb,cAAc,CAAC,OAAO,GAAG,IAAI,cAAc,CAAC;gBACxC,8BAA8B,CAAC,WAAW,CAAC,CAAC;YAChD,CAAC,CAAC,CAAC;YACH,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;SAC/C;QAED,OAAO;;YACH,MAAA,cAAc,CAAC,OAAO,0CAAE,UAAU,EAAE,CAAC;QACzC,CAAC,CAAC;IACN,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO;QACH,kBAAkB,oBAAA;QAClB,SAAS,WAAA;QACT,QAAQ,UAAA;KACX,CAAC;AACN,CAAC","sourcesContent":["import {UIEvent, useCallback, useRef, useState} from 'react';\nimport {throttle} from '../utils/debounce.js';\n\nexport const enum BodyScrollPosition {\n    Top = 'top',\n    Middle = 'middle',\n    Bottom = 'bottom'\n}\n\nexport function useBodyScrollPosition() {\n    const [bodyScrollPosition, setBodyScrollPosition] = useState<BodyScrollPosition | null>(null);\n\n    const detectAndSetBodyScrollPosition = useCallback((bodyElement: HTMLDivElement) => {\n        const {scrollTop, scrollHeight, clientHeight} = bodyElement;\n        let position: BodyScrollPosition | null = null;\n\n        if (scrollHeight > clientHeight) {\n            if (scrollTop === 0) {\n                position = BodyScrollPosition.Top;\n            } else if (Math.abs(scrollHeight - clientHeight - scrollTop) < 1) {\n                position = BodyScrollPosition.Bottom;\n            } else {\n                position = BodyScrollPosition.Middle;\n            }\n        }\n\n        setBodyScrollPosition(position);\n    }, []);\n\n    const onScroll = useCallback(\n        throttle((e: UIEvent<HTMLDivElement>) => {\n            detectAndSetBodyScrollPosition(e.target as HTMLDivElement);\n        }, 100),\n        []\n    );\n\n    const resizeObserver = useRef<ResizeObserver | null>(null);\n\n    const onBodyRef = useCallback((bodyElement: HTMLDivElement | null) => {\n        if (bodyElement) {\n            resizeObserver.current = new ResizeObserver(() => {\n                detectAndSetBodyScrollPosition(bodyElement);\n            });\n            resizeObserver.current.observe(bodyElement);\n        }\n\n        return () => {\n            resizeObserver.current?.disconnect();\n        };\n    }, []);\n\n    return {\n        bodyScrollPosition,\n        onBodyRef,\n        onScroll\n    };\n}\n"]}