{"version":3,"file":"usecontrolledstate.js","sourceRoot":"","sources":["../../src/hooks/usecontrolledstate.ts"],"names":[],"mappings":";AAAA,OAAO,EAAC,WAAW,EAAE,QAAQ,EAAC,MAAM,OAAO,CAAC;AAE5C,mEAAmE;AACnE,oEAAoE;AACpE,MAAM,UAAU,kBAAkB,CAC9B,YAAe,EACf,KAAS,EACT,QAAyC;IAEnC,IAAA,KAA8B,QAAQ,CAAC,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,YAAY,CAAC,EAA5D,UAAU,QAAA,EAAE,aAAa,QAAmC,CAAC;IACpE,IAAM,YAAY,GAAG,KAAK,KAAK,SAAS,CAAC;IAEzC,IAAI,YAAY,GAAG,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC;IAErD,IAAM,QAAQ,GAAG,WAAW,CACxB,UAAC,QAAW;QAAE,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,6BAAc;;QACxB,IAAM,cAAc,GAAG,UAAC,GAAM;YAAE,sBAAsB;iBAAtB,UAAsB,EAAtB,qBAAsB,EAAtB,IAAsB;gBAAtB,qCAAsB;;YAClD,IAAI,QAAQ,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,YAAY,EAAE,GAAG,CAAC,EAAE;gBAC3C,QAAQ,8BAAC,GAAG,GAAK,YAAY,UAAE;aAClC;YACD,IAAI,CAAC,YAAY,EAAE;gBACf,kEAAkE;gBAClE,gFAAgF;gBAChF,8EAA8E;gBAC9E,yFAAyF;gBACzF,YAAY,GAAG,GAAG,CAAC;aACtB;QACL,CAAC,CAAC;QAEF,IAAI,CAAC,YAAY,EAAE;YACf,aAAa,CAAC,QAAQ,CAAC,CAAC;SAC3B;QACD,cAAc,8BAAC,QAAQ,GAAK,IAAI,UAAE;IACtC,CAAC,EACD,CAAC,YAAY,EAAE,YAAY,EAAE,QAAQ,CAAC,CACzC,CAAC;IAEF,OAAO,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;AACpC,CAAC","sourcesContent":["import {useCallback, useState} from 'react';\n\n// Simplified version of the React Stately useControlledState hook.\n// See @react-stately/utils package for the original implementation.\nexport function useControlledState<T>(\n    defaultValue: T,\n    value?: T,\n    onChange?: (v: T, ...args: any[]) => void\n): [T, (value: T, ...args: any[]) => void] {\n    const [stateValue, setStateValue] = useState(value ?? defaultValue);\n    const isControlled = value !== undefined;\n\n    let currentValue = isControlled ? value : stateValue;\n\n    const setValue = useCallback(\n        (newValue: T, ...args: any[]) => {\n            const onChangeCaller = (val: T, ...onChangeArgs: any[]) => {\n                if (onChange && !Object.is(currentValue, val)) {\n                    onChange(val, ...onChangeArgs);\n                }\n                if (!isControlled) {\n                    // If uncontrolled, mutate the currentValue local variable so that\n                    // calling setState multiple times with the same value only emits onChange once.\n                    // We do not use a ref for this because we specifically _do_ want the value to\n                    // reset every render, and assigning to a ref in render breaks aborted suspended renders.\n                    currentValue = val;\n                }\n            };\n\n            if (!isControlled) {\n                setStateValue(newValue);\n            }\n            onChangeCaller(newValue, ...args);\n        },\n        [isControlled, currentValue, onChange]\n    );\n\n    return [currentValue, setValue];\n}\n"]}