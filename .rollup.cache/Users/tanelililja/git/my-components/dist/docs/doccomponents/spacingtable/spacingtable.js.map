{"version":3,"file":"spacingtable.js","sourceRoot":"","sources":["../../../../src/docs/doccomponents/spacingtable/spacingtable.tsx"],"names":[],"mappings":"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","sourcesContent":["import {createDataTableColumnHelper, DataTable, DataTableTextCell} from '../../../components/index.js';\nimport {Alignment} from '../../../constants/index.js';\nimport {parsePixelValue} from '../../../utils/cssunithelper.js';\nimport {kebabCase, splitSeparateNumbers} from 'change-case';\nimport {TextWithCopyToClipboard} from '../textwithcopytoclipboard/textwithcopytoclipboard.js';\n\ninterface SpacingItem {\n    token: string;\n    value: string;\n}\n\nconst columnHelper = createDataTableColumnHelper<SpacingItem>();\n\nconst spacingColumns = [\n    columnHelper.accessor('token', {\n        id: 'token',\n        header: 'Token',\n        cell: (props) => {\n            const text = kebabCase(props.getValue(), {\n                split: (val) => {\n                    const words: string[] = [];\n\n                    splitSeparateNumbers(val).forEach((word) => {\n                        const prevIdx = words.length - 1;\n                        const prevWord = words[prevIdx];\n\n                        if (prevWord && !isNaN(parseFloat(prevWord))) {\n                            words[prevIdx] += word;\n                        } else {\n                            words.push(word);\n                        }\n                    });\n\n                    return words;\n                }\n            });\n\n            return (\n                <TextWithCopyToClipboard text={text}>\n                    <DataTableTextCell {...props}>\n                        <strong>{text}</strong>\n                    </DataTableTextCell>\n                </TextWithCopyToClipboard>\n            );\n        },\n        meta: {\n            alignment: Alignment.start\n        },\n        enableSorting: false\n    }),\n    columnHelper.accessor('value', {\n        id: 'value',\n        header: 'Value',\n        cell: (props) => {\n            const remValue = props.getValue();\n            const pxValue = `${parsePixelValue(remValue)}px`;\n\n            return <DataTableTextCell {...props}>{`${remValue} / ${pxValue}`}</DataTableTextCell>;\n        },\n        meta: {\n            alignment: Alignment.start\n        },\n        enableSorting: false\n    }),\n    columnHelper.accessor('value', {\n        id: 'sample',\n        header: 'Sample',\n        cell: (props) => (\n            <div style={{background: 'var(--neutral-background-strong)', height: '1.5rem', width: props.getValue()}} />\n        ),\n        meta: {\n            alignment: Alignment.start\n        },\n        enableSorting: false\n    })\n];\n\ninterface SpacingTableProps {\n    data: SpacingItem[];\n}\n\nexport function SpacingTable(props: SpacingTableProps) {\n    return (\n        <div className=\"sb-unstyled\" style={{margin: '1rem 0 3rem'}}>\n            <DataTable {...props} columns={spacingColumns} />\n        </div>\n    );\n}\n"]}