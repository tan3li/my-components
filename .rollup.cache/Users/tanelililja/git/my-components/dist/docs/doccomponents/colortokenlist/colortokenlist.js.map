{"version":3,"file":"colortokenlist.js","sourceRoot":"","sources":["../../../../src/docs/doccomponents/colortokenlist/colortokenlist.tsx"],"names":[],"mappings":"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","sourcesContent":["import './colortokenlist.scss';\nimport {Size} from '../../../constants/size.js';\nimport {kebabCase, splitSeparateNumbers} from 'change-case';\nimport {\n    createDataTableColumnHelper,\n    DataTable,\n    DataTableTextCell,\n    Heading,\n    PanelItem,\n    TabItem,\n    Tabs\n} from '../../../components/index.js';\nimport {ReactNode} from 'react';\nimport {Alignment} from '../../../constants/index.js';\nimport {CellContext} from '@tanstack/table-core';\nimport {TextWithCopyToClipboard} from '../textwithcopytoclipboard/textwithcopytoclipboard.js';\n\ninterface ColorItem {\n    name: string;\n    variableName: string;\n    value: string;\n    reference?: string;\n}\n\ninterface Token {\n    reference: string;\n    value: string;\n}\n\ninterface ColorTokenListProps {\n    getGroup?: (tokenKey: string, token: Token) => string;\n    groupOrder?: string[];\n    title: string;\n    tokens: {\n        [key: string]: Token;\n    };\n}\n\ninterface ColorTokenPropertyProps<TData> extends CellContext<TData, any> {\n    className?: string;\n}\n\nfunction ColorTokenProperty<TData>({className, ...props}: ColorTokenPropertyProps<TData>) {\n    const text = props.getValue();\n\n    return (\n        <TextWithCopyToClipboard text={text}>\n            <DataTableTextCell className={className} {...props} />\n        </TextWithCopyToClipboard>\n    );\n}\n\nconst columnHelper = createDataTableColumnHelper<ColorItem>();\nconst columns = [\n    columnHelper.accessor('value', {\n        id: 'sample',\n        header: 'Sample',\n        cell: (props) => <div className=\"color-token-sample\" style={{backgroundColor: props.getValue()}} />,\n        meta: {\n            alignment: Alignment.start,\n            headerStyle: {\n                width: '10%'\n            }\n        },\n        enableSorting: false\n    }),\n    columnHelper.accessor('variableName', {\n        id: 'variableName',\n        header: 'Token',\n        cell: (props) => <ColorTokenProperty className=\"color-token-variable\" {...props} />,\n        meta: {\n            alignment: Alignment.start,\n            headerStyle: {\n                width: '45%'\n            }\n        },\n        enableSorting: false\n    }),\n    columnHelper.accessor('reference', {\n        id: 'reference',\n        header: 'Reference',\n        cell: ColorTokenProperty,\n        meta: {\n            alignment: Alignment.start,\n            headerStyle: {\n                width: '30%'\n            }\n        },\n        enableSorting: false\n    }),\n    columnHelper.accessor('value', {\n        id: 'value',\n        header: 'Value',\n        cell: ColorTokenProperty,\n        meta: {\n            alignment: Alignment.start,\n            headerStyle: {\n                width: '15%'\n            }\n        },\n        enableSorting: false\n    })\n];\n\nfunction renderColorItems(colorItems: ColorItem[]) {\n    return (\n        <div className=\"color-tokens-wrapper\">\n            {colorItems.length === 0 ? 'No tokens' : <DataTable columns={columns} data={colorItems} />}\n        </div>\n    );\n}\n\nexport function ColorTokenList({getGroup, groupOrder, title, tokens}: ColorTokenListProps) {\n    const colorItems: ColorItem[] = [];\n    const groupedColorItems: Map<string, ColorItem[]> = new Map();\n\n    for (const tokenKey in tokens) {\n        const token = tokens[tokenKey];\n        const {reference, value} = token;\n        const kebabCaseTokenName = kebabCase(tokenKey, {split: splitSeparateNumbers});\n        const colorItem: ColorItem = {\n            name: kebabCaseTokenName,\n            variableName: `--${kebabCaseTokenName}`,\n            value,\n            reference\n        };\n\n        if (getGroup) {\n            const group = getGroup(tokenKey, token);\n            const groupItems = groupedColorItems.get(group);\n\n            if (groupItems) {\n                groupItems.push(colorItem);\n            } else {\n                groupedColorItems.set(group, [colorItem]);\n            }\n        } else {\n            colorItems.push(colorItem);\n        }\n    }\n\n    let content: ReactNode;\n\n    if (groupedColorItems.size) {\n        const panelItems: PanelItem[] = [];\n        const tabItems: TabItem[] = [];\n\n        groupedColorItems.forEach((colorItemArr, group) => {\n            tabItems.push({id: group, name: group});\n            panelItems.push({id: group, content: renderColorItems(colorItemArr)});\n        });\n\n        if (groupOrder) {\n            tabItems.sort((a, b) => groupOrder.indexOf(a.name) - groupOrder.indexOf(b.name));\n        }\n\n        content = <Tabs panelItems={panelItems} tabItems={tabItems} />;\n    } else {\n        content = renderColorItems(colorItems);\n    }\n\n    return (\n        <div className=\"sb-unstyled\">\n            <Heading level={2} size={Size.sm}>\n                {title}\n            </Heading>\n            {content}\n        </div>\n    );\n}\n"]}