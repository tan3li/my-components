{"version":3,"file":"sortinghelper.js","sourceRoot":"","sources":["../../src/utils/sortinghelper.ts"],"names":[],"mappings":"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","sourcesContent":["import {isNullOrUndefined} from './objecthelper.js';\n\nconst comparisonOptions = {sensitivity: 'accent'} as const;\n\ntype Sorting = Array<\n    Record<'props', string[]> & Partial<Record<'ascNullsLast', boolean>> & Partial<Record<'desc', boolean>>\n>;\n\n// eslint-disable-next-line complexity\nfunction sortComparator<T>(a: T, b: T, sorting: Sorting) {\n    const sortingLen = sorting.length;\n\n    for (let s = 0; s < sortingLen; s++) {\n        const sortInfo = sorting[s];\n        const props = sortInfo.props;\n        const useAscNullsLast = Boolean(sortInfo.ascNullsLast); // Force to boolean\n        const useDesc = Boolean(sortInfo.desc); // Force to boolean\n        let valueA = a,\n            valueB = b,\n            isANull = isNullOrUndefined(valueA),\n            isBNull = isNullOrUndefined(valueB);\n\n        // If there are nested properties get those\n        for (let p = 0; p < props.length; p++) {\n            const propName = props[p];\n\n            if (!isANull) {\n                valueA = valueA[propName];\n            }\n\n            if (!isBNull) {\n                valueB = valueB[propName];\n            }\n            isANull = isNullOrUndefined(valueA);\n            isBNull = isNullOrUndefined(valueB);\n\n            if (isANull && !isBNull) {\n                return useDesc || useAscNullsLast ? 1 : -1;\n            } else if (!isANull && isBNull) {\n                return useDesc || useAscNullsLast ? -1 : 1;\n            } else if (isANull && isBNull) {\n                break;\n            }\n        }\n\n        if (valueA !== valueB && !isANull && !isBNull) {\n            const typeA = typeof valueA;\n            const typeB = typeof valueB;\n\n            if (typeA === 'number' || typeB === 'number' || typeA === 'boolean' || typeB === 'boolean') {\n                if (valueA < valueB) {\n                    return useDesc ? 1 : -1;\n                }\n                if (valueA > valueB) {\n                    return useDesc ? -1 : 1;\n                }\n            } else {\n                // All others go through String localeCompare, get rid off nulls / undefineds\n                const val = (valueA as string).localeCompare(valueB as string, 'fi', comparisonOptions);\n\n                if (val < 0) {\n                    return useDesc ? 1 : -1;\n                } else if (val > 0) {\n                    return useDesc ? -1 : 1;\n                }\n            }\n        }\n    }\n\n    return 0;\n}\n\n/*\n * Bubble sort algorithm\n * https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/sorting/bubble-sort\n *\n * best      O(n)\n * average   O(n^2)\n * worst     O(n^2)\n * memory    1\n * stable:   yes\n */\nexport function bubbleSort<T>(items: T[], comparator: (a: T, b: T, sorting: Sorting) => 0 | 1 | -1, sorting: Sorting) {\n    // Flag that holds info about whether the swap has occur or not.\n    let swapped = false;\n    const clonedItems = items.slice();\n    const itemsLen = clonedItems.length;\n\n    for (let i = 1; i < itemsLen; i += 1) {\n        swapped = false;\n\n        for (let j = 0; j < itemsLen - i; j += 1) {\n            // Swap elements if they are in wrong order.\n            if (comparator(clonedItems[j + 1], clonedItems[j], sorting) < 0) {\n                const tmp = clonedItems[j + 1];\n\n                clonedItems[j + 1] = clonedItems[j];\n                clonedItems[j] = tmp;\n\n                swapped = true;\n            }\n        }\n\n        // If there were no swaps then array is already sorted and there is\n        // no need to proceed.\n        if (!swapped) {\n            return clonedItems;\n        }\n    }\n\n    return clonedItems;\n}\n\n/*\n * items = Array of objects to sort\n * sortings array of sort details, default sort is Ascending\n *\n * example:\n * [{desc: true, props: ['data', 'customer', 'name']}, {props: ['data', 'invoice', 'number']}, ...]\n */\nexport function sortByProperties<T>(items: T[], sorting: Sorting) {\n    return bubbleSort(items, sortComparator, sorting);\n}\n"]}