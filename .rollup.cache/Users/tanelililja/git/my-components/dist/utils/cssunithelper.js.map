{"version":3,"file":"cssunithelper.js","sourceRoot":"","sources":["../../src/utils/cssunithelper.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,QAAQ,EAAC,MAAM,WAAW,CAAC;AAEnC,IAAM,cAAc,GAAG,EAAE,CAAC,CAAC,wCAAwC;AAEnE,MAAM,UAAU,MAAM,CAAC,EAAU,EAAE,QAAgB;IAC/C,OAAO,QAAQ,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;AAClC,CAAC;AAED,MAAM,UAAU,OAAO,CAAC,GAAW;IAC/B,OAAO,QAAQ,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC;AACzC,CAAC;AAED,MAAM,UAAU,eAAe,CAAC,KAAa,EAAE,QAAiB;IAC5D,IAAM,YAAY,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;IAEvC,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;QACvB,OAAO,OAAO,CAAC,YAAY,CAAC,CAAC;KAChC;SAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,QAAQ,EAAE;QACzC,OAAO,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC;KAC1D;IAED,OAAO,YAAY,CAAC;AACxB,CAAC","sourcesContent":["import {multiply} from './math.js';\n\nconst ROOT_FONT_SIZE = 16; // browser default, should sync with CSS\n\nexport function emToPx(em: number, fontSize: number): number {\n    return multiply(em, fontSize);\n}\n\nexport function remToPx(rem: number): number {\n    return multiply(rem, ROOT_FONT_SIZE);\n}\n\nexport function parsePixelValue(value: string, fontSize?: string): number {\n    const numericValue = parseFloat(value);\n\n    if (value.endsWith('rem')) {\n        return remToPx(numericValue);\n    } else if (value.endsWith('em') && fontSize) {\n        return emToPx(numericValue, parsePixelValue(fontSize));\n    }\n\n    return numericValue;\n}\n"]}