{"version":3,"file":"functionhelper.js","sourceRoot":"","sources":["../../src/utils/functionhelper.ts"],"names":[],"mappings":"AAAA,sEAAsE;AACtE,MAAM,UAAU,UAAU,CAAC,GAAY;IACnC,OAAO,OAAO,GAAG,KAAK,UAAU,CAAC;AACrC,CAAC;AAED,6DAA6D;AAC7D,MAAM,UAAU,OAAO;IAAC,eAAQ;SAAR,UAAQ,EAAR,qBAAQ,EAAR,IAAQ;QAAR,0BAAQ;;IAC5B,2BAA2B;AAC/B,CAAC;AAED,MAAM,UAAU,QAAQ,CACpB,EAAyB;IACzB,cAAa;SAAb,UAAa,EAAb,qBAAa,EAAb,IAAa;QAAb,6BAAa;;IAEb,IAAI,UAAU,CAAC,EAAE,CAAC,EAAE;QAChB,OAAO,EAAE,eAAI,IAAI,EAAE;KACtB;IAED,OAAO,SAAS,CAAC;AACrB,CAAC","sourcesContent":["// eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\nexport function isFunction(obj: unknown): obj is Function {\n    return typeof obj === 'function';\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function emptyFn(..._args) {\n    /* Nothing to do here... */\n}\n\nexport function safeCall<Fn extends (...args: Args) => any, Args extends unknown[]>(\n    fn: Fn | null | undefined,\n    ...args: Args\n): ReturnType<Fn> | undefined {\n    if (isFunction(fn)) {\n        return fn(...args);\n    }\n\n    return undefined;\n}\n"]}